getgenv().HAVOC = {
	AimLock = {
		Enabled = false,
		Target = "",
		Settings = {
			Mode = "HOLD",
			AimPart = "Head",
			KeyBind = Enum.KeyCode.C,
			CrewCheck = false,
			FriendCheck = false,
			AntiGroundShoot = false,
		}
	},
	Orbit = {
		Enabled = false,
		Target = "",
		Settings  = {
			AutoStomp = false,
			Void = false,
			AimPart = "Head",
			KeyBind = Enum.KeyCode.LeftAlt
		}
	},
	LocalPlayer = {
		CFrameWalk = {
			Enabled = false,
			KeyBind = Enum.KeyCode.F,
			Speed = 100,
		},
		Fly = {
			Enabled = false,
			KeyBind = Enum.KeyCode.H,
			Speed = 200,
		},
		CharacterSettings = {
			InfStamina = false,
			NoShootingRecoil = false,
			AntiStomp = false,
			NoSeats = false,
		},
	},
	Player = {
		ESP = {
			Enabled = false,
			AlwaysOnTop = true,
			Box = false,
		},
		View = {
			Enabled = false,
			Target = "",
		},
		RageAim = {
			KillAura = false,
		},
	},
	AutoSettings = {
		AutoReload = false,
		AutoShoot = false,
		AutoStomp = false,
	}
}

--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88    @uniquadev
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER 
]=]

-- Instances: 500 | Scripts: 33 | Modules: 0 | Tags: 0
local G2L = {};

-- StarterGui.havoc
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["IgnoreGuiInset"] = true;
G2L["1"]["ScreenInsets"] = Enum.ScreenInsets.DeviceSafeInsets;
G2L["1"]["Name"] = [[havoc]];
G2L["1"]["ResetOnSpawn"] = false;


-- StarterGui.havoc.ESPSFolder
G2L["2"] = Instance.new("Folder", G2L["1"]);
G2L["2"]["Name"] = [[ESPSFolder]];


-- StarterGui.havoc.MainFrame
G2L["3"] = Instance.new("Frame", G2L["1"]);
G2L["3"]["BorderSizePixel"] = 0;
G2L["3"]["BackgroundColor3"] = Color3.fromRGB(22, 0, 0);
G2L["3"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["3"]["Size"] = UDim2.new(0.29086, 0, 0.3085, 0);
G2L["3"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3"]["Name"] = [[MainFrame]];


-- StarterGui.havoc.MainFrame.UICorner
G2L["4"] = Instance.new("UICorner", G2L["3"]);
G2L["4"]["CornerRadius"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.Glow
G2L["5"] = Instance.new("ImageLabel", G2L["3"]);
G2L["5"]["ZIndex"] = -1;
G2L["5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5"]["Image"] = [[rbxassetid://5028857084]];
G2L["5"]["Size"] = UDim2.new(1.0978, 0, 1.10526, 0);
G2L["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5"]["BackgroundTransparency"] = 1;
G2L["5"]["Name"] = [[Glow]];
G2L["5"]["Position"] = UDim2.new(-0.0504, 0, -0.0539, 0);


-- StarterGui.havoc.MainFrame.Glow.UIGradient
G2L["6"] = Instance.new("UIGradient", G2L["5"]);



-- StarterGui.havoc.MainFrame.Glow.GLOW
G2L["7"] = Instance.new("LocalScript", G2L["5"]);
G2L["7"]["Name"] = [[GLOW]];


-- StarterGui.havoc.MainFrame.Glow.UIAspectRatioConstraint
G2L["8"] = Instance.new("UIAspectRatioConstraint", G2L["5"]);
G2L["8"]["AspectRatio"] = 1.83793;


-- StarterGui.havoc.MainFrame.Drag
G2L["9"] = Instance.new("Frame", G2L["3"]);
G2L["9"]["ZIndex"] = 2;
G2L["9"]["BorderSizePixel"] = 0;
G2L["9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9"]["Size"] = UDim2.new(1, 0, 0.1108, 0);
G2L["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9"]["Name"] = [[Drag]];
G2L["9"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.Drag.DragScript
G2L["a"] = Instance.new("LocalScript", G2L["9"]);
G2L["a"]["Name"] = [[DragScript]];


-- StarterGui.havoc.MainFrame.Drag.UIAspectRatioConstraint
G2L["b"] = Instance.new("UIAspectRatioConstraint", G2L["9"]);
G2L["b"]["AspectRatio"] = 16.33885;


-- StarterGui.havoc.MainFrame.ViewFrame
G2L["c"] = Instance.new("Frame", G2L["3"]);
G2L["c"]["BorderSizePixel"] = 0;
G2L["c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c"]["Size"] = UDim2.new(0.79341, 0, 0.8892, 0);
G2L["c"]["Position"] = UDim2.new(0.20659, 0, 0.1108, 0);
G2L["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c"]["Name"] = [[ViewFrame]];
G2L["c"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer
G2L["d"] = Instance.new("ScrollingFrame", G2L["c"]);
G2L["d"]["Visible"] = false;
G2L["d"]["Active"] = true;
G2L["d"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["d"]["BorderSizePixel"] = 0;
G2L["d"]["CanvasSize"] = UDim2.new(0, 0, 2.5, 0);
G2L["d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d"]["Name"] = [[LocalPlayer]];
G2L["d"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["d"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d"]["ScrollBarThickness"] = 0;
G2L["d"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.UIListLayout
G2L["e"] = Instance.new("UIListLayout", G2L["d"]);
G2L["e"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["e"]["Padding"] = UDim.new(0.05, 0);
G2L["e"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe
G2L["f"] = Instance.new("Frame", G2L["d"]);
G2L["f"]["BorderSizePixel"] = 0;
G2L["f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["f"]["Size"] = UDim2.new(0.906, 0, 0.676, 0);
G2L["f"]["Position"] = UDim2.new(0.0566, 0, -0, 0);
G2L["f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f"]["Name"] = [[Cframe]];
G2L["f"]["LayoutOrder"] = 2;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.UICorner
G2L["10"] = Instance.new("UICorner", G2L["f"]);
G2L["10"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.Title
G2L["11"] = Instance.new("TextLabel", G2L["f"]);
G2L["11"]["TextWrapped"] = true;
G2L["11"]["BorderSizePixel"] = 0;
G2L["11"]["TextSize"] = 14;
G2L["11"]["TextScaled"] = true;
G2L["11"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["11"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["11"]["BackgroundTransparency"] = 1;
G2L["11"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["11"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11"]["Text"] = [[CFRAME MOVEMENT]];
G2L["11"]["Name"] = [[Title]];
G2L["11"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.Title.UIAspectRatioConstraint
G2L["12"] = Instance.new("UIAspectRatioConstraint", G2L["11"]);
G2L["12"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.UIGradient
G2L["13"] = Instance.new("UIGradient", G2L["f"]);
G2L["13"]["Rotation"] = 90;
G2L["13"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.UIListLayout
G2L["14"] = Instance.new("UIListLayout", G2L["f"]);
G2L["14"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.UIAspectRatioConstraint
G2L["15"] = Instance.new("UIAspectRatioConstraint", G2L["f"]);
G2L["15"]["AspectRatio"] = 2.1659;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK
G2L["16"] = Instance.new("Frame", G2L["f"]);
G2L["16"]["BorderSizePixel"] = 0;
G2L["16"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["16"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["16"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16"]["Name"] = [[CFRAMEWALK]];
G2L["16"]["LayoutOrder"] = 1;
G2L["16"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Trigger
G2L["17"] = Instance.new("TextButton", G2L["16"]);
G2L["17"]["TextWrapped"] = true;
G2L["17"]["BorderSizePixel"] = 0;
G2L["17"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["17"]["TextSize"] = 14;
G2L["17"]["TextScaled"] = true;
G2L["17"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["17"]["BackgroundTransparency"] = 1;
G2L["17"]["Name"] = [[Trigger]];
G2L["17"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17"]["Text"] = [[CFRAME WALK]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Trigger.UITextSizeConstraint
G2L["18"] = Instance.new("UITextSizeConstraint", G2L["17"]);
G2L["18"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Trigger.UIAspectRatioConstraint
G2L["19"] = Instance.new("UIAspectRatioConstraint", G2L["17"]);
G2L["19"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Toggle
G2L["1a"] = Instance.new("TextLabel", G2L["16"]);
G2L["1a"]["BorderSizePixel"] = 0;
G2L["1a"]["TextSize"] = 14;
G2L["1a"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a"]["Text"] = [[]];
G2L["1a"]["Name"] = [[Toggle]];
G2L["1a"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Toggle.UICorner
G2L["1b"] = Instance.new("UICorner", G2L["1a"]);
G2L["1b"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Toggle.UIAspectRatioConstraint
G2L["1c"] = Instance.new("UIAspectRatioConstraint", G2L["1a"]);
G2L["1c"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Handle
G2L["1d"] = Instance.new("LocalScript", G2L["16"]);
G2L["1d"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.UIAspectRatioConstraint
G2L["1e"] = Instance.new("UIAspectRatioConstraint", G2L["16"]);
G2L["1e"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.KeyBind
G2L["1f"] = Instance.new("TextButton", G2L["16"]);
G2L["1f"]["TextWrapped"] = true;
G2L["1f"]["BorderSizePixel"] = 0;
G2L["1f"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1f"]["TextSize"] = 14;
G2L["1f"]["TextScaled"] = true;
G2L["1f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1f"]["Size"] = UDim2.new(0.30638, 0, 1, 0);
G2L["1f"]["BackgroundTransparency"] = 1;
G2L["1f"]["Name"] = [[KeyBind]];
G2L["1f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f"]["Text"] = [[F]];
G2L["1f"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.KeyBind.UITextSizeConstraint
G2L["20"] = Instance.new("UITextSizeConstraint", G2L["1f"]);
G2L["20"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMESPEED
G2L["21"] = Instance.new("Frame", G2L["f"]);
G2L["21"]["BorderSizePixel"] = 0;
G2L["21"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["21"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["21"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["21"]["Name"] = [[CFRAMESPEED]];
G2L["21"]["LayoutOrder"] = 2;
G2L["21"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMESPEED.UIAspectRatioConstraint
G2L["22"] = Instance.new("UIAspectRatioConstraint", G2L["21"]);
G2L["22"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMESPEED.SPEED
G2L["23"] = Instance.new("TextBox", G2L["21"]);
G2L["23"]["Name"] = [[SPEED]];
G2L["23"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["23"]["BorderSizePixel"] = 0;
G2L["23"]["TextWrapped"] = true;
G2L["23"]["TextSize"] = 14;
G2L["23"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["23"]["TextScaled"] = true;
G2L["23"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["23"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["23"]["PlaceholderText"] = [[CFRAME SPEED]];
G2L["23"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["23"]["Text"] = [[100]];
G2L["23"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMESPEED.SPEED.UITextSizeConstraint
G2L["24"] = Instance.new("UITextSizeConstraint", G2L["23"]);
G2L["24"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMESPEED.SPEED.UIAspectRatioConstraint
G2L["25"] = Instance.new("UIAspectRatioConstraint", G2L["23"]);
G2L["25"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY
G2L["26"] = Instance.new("Frame", G2L["f"]);
G2L["26"]["BorderSizePixel"] = 0;
G2L["26"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["26"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["26"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["26"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["26"]["Name"] = [[FLY]];
G2L["26"]["LayoutOrder"] = 3;
G2L["26"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Trigger
G2L["27"] = Instance.new("TextButton", G2L["26"]);
G2L["27"]["TextWrapped"] = true;
G2L["27"]["BorderSizePixel"] = 0;
G2L["27"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["27"]["TextSize"] = 14;
G2L["27"]["TextScaled"] = true;
G2L["27"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["27"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["27"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["27"]["BackgroundTransparency"] = 1;
G2L["27"]["Name"] = [[Trigger]];
G2L["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["27"]["Text"] = [[FLY]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Trigger.UITextSizeConstraint
G2L["28"] = Instance.new("UITextSizeConstraint", G2L["27"]);
G2L["28"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Trigger.UIAspectRatioConstraint
G2L["29"] = Instance.new("UIAspectRatioConstraint", G2L["27"]);
G2L["29"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Toggle
G2L["2a"] = Instance.new("TextLabel", G2L["26"]);
G2L["2a"]["BorderSizePixel"] = 0;
G2L["2a"]["TextSize"] = 14;
G2L["2a"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["2a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2a"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2a"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["2a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2a"]["Text"] = [[]];
G2L["2a"]["Name"] = [[Toggle]];
G2L["2a"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Toggle.UICorner
G2L["2b"] = Instance.new("UICorner", G2L["2a"]);
G2L["2b"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Toggle.UIAspectRatioConstraint
G2L["2c"] = Instance.new("UIAspectRatioConstraint", G2L["2a"]);
G2L["2c"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.UIAspectRatioConstraint
G2L["2d"] = Instance.new("UIAspectRatioConstraint", G2L["26"]);
G2L["2d"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.KeyBind
G2L["2e"] = Instance.new("TextButton", G2L["26"]);
G2L["2e"]["TextWrapped"] = true;
G2L["2e"]["BorderSizePixel"] = 0;
G2L["2e"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["2e"]["TextSize"] = 14;
G2L["2e"]["TextScaled"] = true;
G2L["2e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2e"]["Size"] = UDim2.new(0.30638, 0, 1, 0);
G2L["2e"]["BackgroundTransparency"] = 1;
G2L["2e"]["Name"] = [[KeyBind]];
G2L["2e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2e"]["Text"] = [[H]];
G2L["2e"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.KeyBind.UITextSizeConstraint
G2L["2f"] = Instance.new("UITextSizeConstraint", G2L["2e"]);
G2L["2f"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Handle
G2L["30"] = Instance.new("LocalScript", G2L["26"]);
G2L["30"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLYSPEED
G2L["31"] = Instance.new("Frame", G2L["f"]);
G2L["31"]["BorderSizePixel"] = 0;
G2L["31"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["31"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["31"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["31"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["31"]["Name"] = [[FLYSPEED]];
G2L["31"]["LayoutOrder"] = 4;
G2L["31"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLYSPEED.UIAspectRatioConstraint
G2L["32"] = Instance.new("UIAspectRatioConstraint", G2L["31"]);
G2L["32"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLYSPEED.SPEED
G2L["33"] = Instance.new("TextBox", G2L["31"]);
G2L["33"]["Name"] = [[SPEED]];
G2L["33"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["33"]["BorderSizePixel"] = 0;
G2L["33"]["TextWrapped"] = true;
G2L["33"]["TextSize"] = 14;
G2L["33"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["33"]["TextScaled"] = true;
G2L["33"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["33"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["33"]["PlaceholderText"] = [[CFRAME FLY SPEED]];
G2L["33"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["33"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["33"]["Text"] = [[200]];
G2L["33"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLYSPEED.SPEED.UITextSizeConstraint
G2L["34"] = Instance.new("UITextSizeConstraint", G2L["33"]);
G2L["34"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLYSPEED.SPEED.UIAspectRatioConstraint
G2L["35"] = Instance.new("UIAspectRatioConstraint", G2L["33"]);
G2L["35"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.UIAspectRatioConstraint
G2L["36"] = Instance.new("UIAspectRatioConstraint", G2L["d"]);
G2L["36"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings
G2L["37"] = Instance.new("Frame", G2L["d"]);
G2L["37"]["BorderSizePixel"] = 0;
G2L["37"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["37"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["37"]["Size"] = UDim2.new(0.906, 0, 0.676, 0);
G2L["37"]["Position"] = UDim2.new(0.0566, 0, -0, 0);
G2L["37"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["37"]["Name"] = [[Playersettings]];
G2L["37"]["LayoutOrder"] = 3;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.UICorner
G2L["38"] = Instance.new("UICorner", G2L["37"]);
G2L["38"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.Title
G2L["39"] = Instance.new("TextLabel", G2L["37"]);
G2L["39"]["TextWrapped"] = true;
G2L["39"]["BorderSizePixel"] = 0;
G2L["39"]["TextSize"] = 14;
G2L["39"]["TextScaled"] = true;
G2L["39"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["39"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["39"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["39"]["BackgroundTransparency"] = 1;
G2L["39"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["39"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["39"]["Text"] = [[CHARACTER SETTINGS]];
G2L["39"]["Name"] = [[Title]];
G2L["39"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.Title.UIAspectRatioConstraint
G2L["3a"] = Instance.new("UIAspectRatioConstraint", G2L["39"]);
G2L["3a"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.UIGradient
G2L["3b"] = Instance.new("UIGradient", G2L["37"]);
G2L["3b"]["Rotation"] = 90;
G2L["3b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.UIListLayout
G2L["3c"] = Instance.new("UIListLayout", G2L["37"]);
G2L["3c"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.UIAspectRatioConstraint
G2L["3d"] = Instance.new("UIAspectRatioConstraint", G2L["37"]);
G2L["3d"]["AspectRatio"] = 2.1659;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA
G2L["3e"] = Instance.new("Frame", G2L["37"]);
G2L["3e"]["BorderSizePixel"] = 0;
G2L["3e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3e"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["3e"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["3e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3e"]["Name"] = [[INFSTAMINA]];
G2L["3e"]["LayoutOrder"] = 1;
G2L["3e"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Trigger
G2L["3f"] = Instance.new("TextButton", G2L["3e"]);
G2L["3f"]["TextWrapped"] = true;
G2L["3f"]["BorderSizePixel"] = 0;
G2L["3f"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["3f"]["TextSize"] = 14;
G2L["3f"]["TextScaled"] = true;
G2L["3f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3f"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["3f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3f"]["BackgroundTransparency"] = 1;
G2L["3f"]["Name"] = [[Trigger]];
G2L["3f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3f"]["Text"] = [[INF STAMINA]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Trigger.UITextSizeConstraint
G2L["40"] = Instance.new("UITextSizeConstraint", G2L["3f"]);
G2L["40"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Trigger.UIAspectRatioConstraint
G2L["41"] = Instance.new("UIAspectRatioConstraint", G2L["3f"]);
G2L["41"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Toggle
G2L["42"] = Instance.new("TextLabel", G2L["3e"]);
G2L["42"]["BorderSizePixel"] = 0;
G2L["42"]["TextSize"] = 14;
G2L["42"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["42"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["42"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["42"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["42"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["42"]["Text"] = [[]];
G2L["42"]["Name"] = [[Toggle]];
G2L["42"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Toggle.UICorner
G2L["43"] = Instance.new("UICorner", G2L["42"]);
G2L["43"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Toggle.UIAspectRatioConstraint
G2L["44"] = Instance.new("UIAspectRatioConstraint", G2L["42"]);
G2L["44"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.UIAspectRatioConstraint
G2L["45"] = Instance.new("UIAspectRatioConstraint", G2L["3e"]);
G2L["45"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Handle
G2L["46"] = Instance.new("LocalScript", G2L["3e"]);
G2L["46"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil
G2L["47"] = Instance.new("Frame", G2L["37"]);
G2L["47"]["BorderSizePixel"] = 0;
G2L["47"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["47"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["47"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["47"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["47"]["Name"] = [[NoShootingRecoil]];
G2L["47"]["LayoutOrder"] = 2;
G2L["47"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Trigger
G2L["48"] = Instance.new("TextButton", G2L["47"]);
G2L["48"]["TextWrapped"] = true;
G2L["48"]["BorderSizePixel"] = 0;
G2L["48"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["48"]["TextSize"] = 14;
G2L["48"]["TextScaled"] = true;
G2L["48"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["48"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["48"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["48"]["BackgroundTransparency"] = 1;
G2L["48"]["Name"] = [[Trigger]];
G2L["48"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["48"]["Text"] = [[NO SHOOTING RECOIL]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Trigger.UITextSizeConstraint
G2L["49"] = Instance.new("UITextSizeConstraint", G2L["48"]);
G2L["49"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Trigger.UIAspectRatioConstraint
G2L["4a"] = Instance.new("UIAspectRatioConstraint", G2L["48"]);
G2L["4a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Toggle
G2L["4b"] = Instance.new("TextLabel", G2L["47"]);
G2L["4b"]["BorderSizePixel"] = 0;
G2L["4b"]["TextSize"] = 14;
G2L["4b"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["4b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["4b"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4b"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["4b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4b"]["Text"] = [[]];
G2L["4b"]["Name"] = [[Toggle]];
G2L["4b"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Toggle.UICorner
G2L["4c"] = Instance.new("UICorner", G2L["4b"]);
G2L["4c"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Toggle.UIAspectRatioConstraint
G2L["4d"] = Instance.new("UIAspectRatioConstraint", G2L["4b"]);
G2L["4d"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.UIAspectRatioConstraint
G2L["4e"] = Instance.new("UIAspectRatioConstraint", G2L["47"]);
G2L["4e"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Handle
G2L["4f"] = Instance.new("LocalScript", G2L["47"]);
G2L["4f"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp
G2L["50"] = Instance.new("Frame", G2L["37"]);
G2L["50"]["BorderSizePixel"] = 0;
G2L["50"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["50"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["50"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["50"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["50"]["Name"] = [[AntiStomp]];
G2L["50"]["LayoutOrder"] = 3;
G2L["50"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Trigger
G2L["51"] = Instance.new("TextButton", G2L["50"]);
G2L["51"]["TextWrapped"] = true;
G2L["51"]["BorderSizePixel"] = 0;
G2L["51"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["51"]["TextSize"] = 14;
G2L["51"]["TextScaled"] = true;
G2L["51"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["51"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["51"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["51"]["BackgroundTransparency"] = 1;
G2L["51"]["Name"] = [[Trigger]];
G2L["51"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["51"]["Text"] = [[ANTI STOMP]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Trigger.UITextSizeConstraint
G2L["52"] = Instance.new("UITextSizeConstraint", G2L["51"]);
G2L["52"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Trigger.UIAspectRatioConstraint
G2L["53"] = Instance.new("UIAspectRatioConstraint", G2L["51"]);
G2L["53"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Toggle
G2L["54"] = Instance.new("TextLabel", G2L["50"]);
G2L["54"]["BorderSizePixel"] = 0;
G2L["54"]["TextSize"] = 14;
G2L["54"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["54"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["54"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["54"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["54"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["54"]["Text"] = [[]];
G2L["54"]["Name"] = [[Toggle]];
G2L["54"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Toggle.UICorner
G2L["55"] = Instance.new("UICorner", G2L["54"]);
G2L["55"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Toggle.UIAspectRatioConstraint
G2L["56"] = Instance.new("UIAspectRatioConstraint", G2L["54"]);
G2L["56"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.UIAspectRatioConstraint
G2L["57"] = Instance.new("UIAspectRatioConstraint", G2L["50"]);
G2L["57"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Handle
G2L["58"] = Instance.new("LocalScript", G2L["50"]);
G2L["58"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats
G2L["59"] = Instance.new("Frame", G2L["37"]);
G2L["59"]["BorderSizePixel"] = 0;
G2L["59"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["59"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["59"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["59"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["59"]["Name"] = [[NoSeats]];
G2L["59"]["LayoutOrder"] = 3;
G2L["59"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Trigger
G2L["5a"] = Instance.new("TextButton", G2L["59"]);
G2L["5a"]["TextWrapped"] = true;
G2L["5a"]["BorderSizePixel"] = 0;
G2L["5a"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["5a"]["TextSize"] = 14;
G2L["5a"]["TextScaled"] = true;
G2L["5a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["5a"]["BackgroundTransparency"] = 1;
G2L["5a"]["Name"] = [[Trigger]];
G2L["5a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5a"]["Text"] = [[NO SEATS]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Trigger.UITextSizeConstraint
G2L["5b"] = Instance.new("UITextSizeConstraint", G2L["5a"]);
G2L["5b"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Trigger.UIAspectRatioConstraint
G2L["5c"] = Instance.new("UIAspectRatioConstraint", G2L["5a"]);
G2L["5c"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Toggle
G2L["5d"] = Instance.new("TextLabel", G2L["59"]);
G2L["5d"]["BorderSizePixel"] = 0;
G2L["5d"]["TextSize"] = 14;
G2L["5d"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["5d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5d"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["5d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5d"]["Text"] = [[]];
G2L["5d"]["Name"] = [[Toggle]];
G2L["5d"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Toggle.UICorner
G2L["5e"] = Instance.new("UICorner", G2L["5d"]);
G2L["5e"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Toggle.UIAspectRatioConstraint
G2L["5f"] = Instance.new("UIAspectRatioConstraint", G2L["5d"]);
G2L["5f"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.UIAspectRatioConstraint
G2L["60"] = Instance.new("UIAspectRatioConstraint", G2L["59"]);
G2L["60"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Handle
G2L["61"] = Instance.new("LocalScript", G2L["59"]);
G2L["61"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.UIPadding
G2L["62"] = Instance.new("UIPadding", G2L["d"]);
G2L["62"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player
G2L["63"] = Instance.new("ScrollingFrame", G2L["c"]);
G2L["63"]["Active"] = true;
G2L["63"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["63"]["BorderSizePixel"] = 0;
G2L["63"]["CanvasSize"] = UDim2.new(0, 0, 3, 0);
G2L["63"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["63"]["Name"] = [[Player]];
G2L["63"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["63"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["63"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["63"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["63"]["ScrollBarThickness"] = 0;
G2L["63"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.UIListLayout
G2L["64"] = Instance.new("UIListLayout", G2L["63"]);
G2L["64"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["64"]["Padding"] = UDim.new(0.05, 0);
G2L["64"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.UIAspectRatioConstraint
G2L["65"] = Instance.new("UIAspectRatioConstraint", G2L["63"]);
G2L["65"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp
G2L["66"] = Instance.new("Frame", G2L["63"]);
G2L["66"]["BorderSizePixel"] = 0;
G2L["66"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["66"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["66"]["Size"] = UDim2.new(0.90639, 0, 0.67436, 0);
G2L["66"]["Position"] = UDim2.new(0.0468, 0, 0.03093, 0);
G2L["66"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["66"]["Name"] = [[Esp]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.UICorner
G2L["67"] = Instance.new("UICorner", G2L["66"]);
G2L["67"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.Title
G2L["68"] = Instance.new("TextLabel", G2L["66"]);
G2L["68"]["TextWrapped"] = true;
G2L["68"]["BorderSizePixel"] = 0;
G2L["68"]["TextSize"] = 14;
G2L["68"]["TextScaled"] = true;
G2L["68"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["68"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["68"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["68"]["BackgroundTransparency"] = 1;
G2L["68"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["68"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["68"]["Text"] = [[ESP]];
G2L["68"]["Name"] = [[Title]];
G2L["68"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.Title.UIAspectRatioConstraint
G2L["69"] = Instance.new("UIAspectRatioConstraint", G2L["68"]);
G2L["69"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.UIGradient
G2L["6a"] = Instance.new("UIGradient", G2L["66"]);
G2L["6a"]["Rotation"] = 90;
G2L["6a"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.UIListLayout
G2L["6b"] = Instance.new("UIListLayout", G2L["66"]);
G2L["6b"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP
G2L["6c"] = Instance.new("Frame", G2L["66"]);
G2L["6c"]["BorderSizePixel"] = 0;
G2L["6c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6c"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["6c"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["6c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6c"]["Name"] = [[ESP]];
G2L["6c"]["LayoutOrder"] = 2;
G2L["6c"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Trigger
G2L["6d"] = Instance.new("TextButton", G2L["6c"]);
G2L["6d"]["TextWrapped"] = true;
G2L["6d"]["BorderSizePixel"] = 0;
G2L["6d"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["6d"]["TextSize"] = 14;
G2L["6d"]["TextScaled"] = true;
G2L["6d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6d"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["6d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["6d"]["BackgroundTransparency"] = 1;
G2L["6d"]["Name"] = [[Trigger]];
G2L["6d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6d"]["Text"] = [[ESP]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Trigger.UITextSizeConstraint
G2L["6e"] = Instance.new("UITextSizeConstraint", G2L["6d"]);
G2L["6e"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Trigger.UIAspectRatioConstraint
G2L["6f"] = Instance.new("UIAspectRatioConstraint", G2L["6d"]);
G2L["6f"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Toggle
G2L["70"] = Instance.new("TextLabel", G2L["6c"]);
G2L["70"]["BorderSizePixel"] = 0;
G2L["70"]["TextSize"] = 14;
G2L["70"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["70"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["70"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["70"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["70"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["70"]["Text"] = [[]];
G2L["70"]["Name"] = [[Toggle]];
G2L["70"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Toggle.UICorner
G2L["71"] = Instance.new("UICorner", G2L["70"]);
G2L["71"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Toggle.UIAspectRatioConstraint
G2L["72"] = Instance.new("UIAspectRatioConstraint", G2L["70"]);
G2L["72"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.UIAspectRatioConstraint
G2L["73"] = Instance.new("UIAspectRatioConstraint", G2L["6c"]);
G2L["73"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP
G2L["74"] = Instance.new("Frame", G2L["66"]);
G2L["74"]["BorderSizePixel"] = 0;
G2L["74"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["74"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["74"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["74"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["74"]["Name"] = [[ALWAYSONTOP]];
G2L["74"]["LayoutOrder"] = 2;
G2L["74"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Trigger
G2L["75"] = Instance.new("TextButton", G2L["74"]);
G2L["75"]["TextWrapped"] = true;
G2L["75"]["BorderSizePixel"] = 0;
G2L["75"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["75"]["TextSize"] = 14;
G2L["75"]["TextScaled"] = true;
G2L["75"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["75"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["75"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["75"]["BackgroundTransparency"] = 1;
G2L["75"]["Name"] = [[Trigger]];
G2L["75"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["75"]["Text"] = [[ALWAYS ON TOP]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Trigger.UITextSizeConstraint
G2L["76"] = Instance.new("UITextSizeConstraint", G2L["75"]);
G2L["76"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Trigger.UIAspectRatioConstraint
G2L["77"] = Instance.new("UIAspectRatioConstraint", G2L["75"]);
G2L["77"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Toggle
G2L["78"] = Instance.new("TextLabel", G2L["74"]);
G2L["78"]["BorderSizePixel"] = 0;
G2L["78"]["TextSize"] = 14;
G2L["78"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["78"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["78"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["78"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["78"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["78"]["Text"] = [[]];
G2L["78"]["Name"] = [[Toggle]];
G2L["78"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Toggle.UICorner
G2L["79"] = Instance.new("UICorner", G2L["78"]);
G2L["79"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Toggle.UIAspectRatioConstraint
G2L["7a"] = Instance.new("UIAspectRatioConstraint", G2L["78"]);
G2L["7a"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.UIAspectRatioConstraint
G2L["7b"] = Instance.new("UIAspectRatioConstraint", G2L["74"]);
G2L["7b"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX
G2L["7c"] = Instance.new("Frame", G2L["66"]);
G2L["7c"]["BorderSizePixel"] = 0;
G2L["7c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7c"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["7c"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["7c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7c"]["Name"] = [[BOX]];
G2L["7c"]["LayoutOrder"] = 3;
G2L["7c"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Trigger
G2L["7d"] = Instance.new("TextButton", G2L["7c"]);
G2L["7d"]["TextWrapped"] = true;
G2L["7d"]["BorderSizePixel"] = 0;
G2L["7d"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["7d"]["TextSize"] = 14;
G2L["7d"]["TextScaled"] = true;
G2L["7d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7d"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["7d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["7d"]["BackgroundTransparency"] = 1;
G2L["7d"]["Name"] = [[Trigger]];
G2L["7d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7d"]["Text"] = [[BOX]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Trigger.UITextSizeConstraint
G2L["7e"] = Instance.new("UITextSizeConstraint", G2L["7d"]);
G2L["7e"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Trigger.UIAspectRatioConstraint
G2L["7f"] = Instance.new("UIAspectRatioConstraint", G2L["7d"]);
G2L["7f"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Toggle
G2L["80"] = Instance.new("TextLabel", G2L["7c"]);
G2L["80"]["BorderSizePixel"] = 0;
G2L["80"]["TextSize"] = 14;
G2L["80"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["80"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["80"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["80"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["80"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["80"]["Text"] = [[]];
G2L["80"]["Name"] = [[Toggle]];
G2L["80"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Toggle.UICorner
G2L["81"] = Instance.new("UICorner", G2L["80"]);
G2L["81"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Toggle.UIAspectRatioConstraint
G2L["82"] = Instance.new("UIAspectRatioConstraint", G2L["80"]);
G2L["82"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.UIAspectRatioConstraint
G2L["83"] = Instance.new("UIAspectRatioConstraint", G2L["7c"]);
G2L["83"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP
G2L["84"] = Instance.new("LocalScript", G2L["66"]);
G2L["84"]["Name"] = [[ESP]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESPGUI
G2L["85"] = Instance.new("BillboardGui", G2L["66"]);
G2L["85"]["Active"] = true;
G2L["85"]["AlwaysOnTop"] = true;
G2L["85"]["Size"] = UDim2.new(7, 0, 9, 0);
G2L["85"]["Enabled"] = false;
G2L["85"]["ResetOnSpawn"] = false;
G2L["85"]["Name"] = [[ESPGUI]];
G2L["85"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESPGUI.PLAYERNAME
G2L["86"] = Instance.new("TextLabel", G2L["85"]);
G2L["86"]["TextWrapped"] = true;
G2L["86"]["BorderSizePixel"] = 0;
G2L["86"]["TextSize"] = 14;
G2L["86"]["TextScaled"] = true;
G2L["86"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["86"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["86"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["86"]["BackgroundTransparency"] = 1;
G2L["86"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["86"]["Size"] = UDim2.new(0, 100, 0, 16);
G2L["86"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["86"]["Text"] = [[scafrysnanty]];
G2L["86"]["Name"] = [[PLAYERNAME]];
G2L["86"]["Position"] = UDim2.new(0.5, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESPGUI.BOX
G2L["87"] = Instance.new("ImageLabel", G2L["85"]);
G2L["87"]["BorderSizePixel"] = 0;
G2L["87"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["87"]["Image"] = [[rbxassetid://130107238038303]];
G2L["87"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["87"]["Visible"] = false;
G2L["87"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["87"]["BackgroundTransparency"] = 1;
G2L["87"]["Name"] = [[BOX]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.UIPadding
G2L["88"] = Instance.new("UIPadding", G2L["63"]);
G2L["88"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View
G2L["89"] = Instance.new("Frame", G2L["63"]);
G2L["89"]["BorderSizePixel"] = 0;
G2L["89"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["89"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["89"]["Size"] = UDim2.new(0.90639, 0, 0.67436, 0);
G2L["89"]["Position"] = UDim2.new(0.0468, 0, 0.03093, 0);
G2L["89"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["89"]["Name"] = [[View]];
G2L["89"]["LayoutOrder"] = 2;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.UICorner
G2L["8a"] = Instance.new("UICorner", G2L["89"]);
G2L["8a"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.Title
G2L["8b"] = Instance.new("TextLabel", G2L["89"]);
G2L["8b"]["TextWrapped"] = true;
G2L["8b"]["BorderSizePixel"] = 0;
G2L["8b"]["TextSize"] = 14;
G2L["8b"]["TextScaled"] = true;
G2L["8b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8b"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["8b"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["8b"]["BackgroundTransparency"] = 1;
G2L["8b"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["8b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8b"]["Text"] = [[VIEW]];
G2L["8b"]["Name"] = [[Title]];
G2L["8b"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.Title.UIAspectRatioConstraint
G2L["8c"] = Instance.new("UIAspectRatioConstraint", G2L["8b"]);
G2L["8c"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.UIGradient
G2L["8d"] = Instance.new("UIGradient", G2L["89"]);
G2L["8d"]["Rotation"] = 90;
G2L["8d"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.UIListLayout
G2L["8e"] = Instance.new("UIListLayout", G2L["89"]);
G2L["8e"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW
G2L["8f"] = Instance.new("Frame", G2L["89"]);
G2L["8f"]["BorderSizePixel"] = 0;
G2L["8f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8f"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["8f"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["8f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8f"]["Name"] = [[VIEW]];
G2L["8f"]["LayoutOrder"] = 1;
G2L["8f"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Trigger
G2L["90"] = Instance.new("TextButton", G2L["8f"]);
G2L["90"]["TextWrapped"] = true;
G2L["90"]["BorderSizePixel"] = 0;
G2L["90"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["90"]["TextSize"] = 14;
G2L["90"]["TextScaled"] = true;
G2L["90"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["90"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["90"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["90"]["BackgroundTransparency"] = 1;
G2L["90"]["Name"] = [[Trigger]];
G2L["90"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["90"]["Text"] = [[SPECTATE]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Trigger.UITextSizeConstraint
G2L["91"] = Instance.new("UITextSizeConstraint", G2L["90"]);
G2L["91"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Trigger.UIAspectRatioConstraint
G2L["92"] = Instance.new("UIAspectRatioConstraint", G2L["90"]);
G2L["92"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Toggle
G2L["93"] = Instance.new("TextLabel", G2L["8f"]);
G2L["93"]["BorderSizePixel"] = 0;
G2L["93"]["TextSize"] = 14;
G2L["93"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["93"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["93"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["93"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["93"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["93"]["Text"] = [[]];
G2L["93"]["Name"] = [[Toggle]];
G2L["93"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Toggle.UICorner
G2L["94"] = Instance.new("UICorner", G2L["93"]);
G2L["94"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Toggle.UIAspectRatioConstraint
G2L["95"] = Instance.new("UIAspectRatioConstraint", G2L["93"]);
G2L["95"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.UIAspectRatioConstraint
G2L["96"] = Instance.new("UIAspectRatioConstraint", G2L["8f"]);
G2L["96"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.UIAspectRatioConstraint
G2L["97"] = Instance.new("UIAspectRatioConstraint", G2L["89"]);
G2L["97"]["AspectRatio"] = 2.17121;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TARGETNAME
G2L["98"] = Instance.new("Frame", G2L["89"]);
G2L["98"]["BorderSizePixel"] = 0;
G2L["98"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["98"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["98"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["98"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["98"]["Name"] = [[TARGETNAME]];
G2L["98"]["LayoutOrder"] = 2;
G2L["98"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TARGETNAME.UIAspectRatioConstraint
G2L["99"] = Instance.new("UIAspectRatioConstraint", G2L["98"]);
G2L["99"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TARGETNAME.TARGET
G2L["9a"] = Instance.new("TextBox", G2L["98"]);
G2L["9a"]["Name"] = [[TARGET]];
G2L["9a"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["9a"]["BorderSizePixel"] = 0;
G2L["9a"]["TextWrapped"] = true;
G2L["9a"]["TextSize"] = 14;
G2L["9a"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["9a"]["TextScaled"] = true;
G2L["9a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9a"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["9a"]["PlaceholderText"] = [[TARGET NAME OR DISPLAY]];
G2L["9a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["9a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9a"]["Text"] = [[]];
G2L["9a"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TARGETNAME.TARGET.UITextSizeConstraint
G2L["9b"] = Instance.new("UITextSizeConstraint", G2L["9a"]);
G2L["9b"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TARGETNAME.TARGET.UIAspectRatioConstraint
G2L["9c"] = Instance.new("UIAspectRatioConstraint", G2L["9a"]);
G2L["9c"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.Spectate
G2L["9d"] = Instance.new("LocalScript", G2L["89"]);
G2L["9d"]["Name"] = [[Spectate]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TargetNameHandler
G2L["9e"] = Instance.new("LocalScript", G2L["89"]);
G2L["9e"]["Name"] = [[TargetNameHandler]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim
G2L["9f"] = Instance.new("Frame", G2L["63"]);
G2L["9f"]["BorderSizePixel"] = 0;
G2L["9f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9f"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["9f"]["Size"] = UDim2.new(0.90639, 0, 0.67436, 0);
G2L["9f"]["Position"] = UDim2.new(0.0468, 0, 0.03093, 0);
G2L["9f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9f"]["Name"] = [[RageAim]];
G2L["9f"]["LayoutOrder"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.UICorner
G2L["a0"] = Instance.new("UICorner", G2L["9f"]);
G2L["a0"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Title
G2L["a1"] = Instance.new("TextLabel", G2L["9f"]);
G2L["a1"]["TextWrapped"] = true;
G2L["a1"]["BorderSizePixel"] = 0;
G2L["a1"]["TextSize"] = 14;
G2L["a1"]["TextScaled"] = true;
G2L["a1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a1"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a1"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["a1"]["BackgroundTransparency"] = 1;
G2L["a1"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["a1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a1"]["Text"] = [[RAGEAIM]];
G2L["a1"]["Name"] = [[Title]];
G2L["a1"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Title.UIAspectRatioConstraint
G2L["a2"] = Instance.new("UIAspectRatioConstraint", G2L["a1"]);
G2L["a2"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.UIGradient
G2L["a3"] = Instance.new("UIGradient", G2L["9f"]);
G2L["a3"]["Rotation"] = 90;
G2L["a3"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.UIListLayout
G2L["a4"] = Instance.new("UIListLayout", G2L["9f"]);
G2L["a4"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA
G2L["a5"] = Instance.new("Frame", G2L["9f"]);
G2L["a5"]["BorderSizePixel"] = 0;
G2L["a5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a5"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["a5"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["a5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a5"]["Name"] = [[KILLAURA]];
G2L["a5"]["LayoutOrder"] = 2;
G2L["a5"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Trigger
G2L["a6"] = Instance.new("TextButton", G2L["a5"]);
G2L["a6"]["TextWrapped"] = true;
G2L["a6"]["BorderSizePixel"] = 0;
G2L["a6"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["a6"]["TextSize"] = 14;
G2L["a6"]["TextScaled"] = true;
G2L["a6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a6"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a6"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["a6"]["BackgroundTransparency"] = 1;
G2L["a6"]["Name"] = [[Trigger]];
G2L["a6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a6"]["Text"] = [[KILL AURA]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Trigger.UITextSizeConstraint
G2L["a7"] = Instance.new("UITextSizeConstraint", G2L["a6"]);
G2L["a7"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Trigger.UIAspectRatioConstraint
G2L["a8"] = Instance.new("UIAspectRatioConstraint", G2L["a6"]);
G2L["a8"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Toggle
G2L["a9"] = Instance.new("TextLabel", G2L["a5"]);
G2L["a9"]["BorderSizePixel"] = 0;
G2L["a9"]["TextSize"] = 14;
G2L["a9"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["a9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a9"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a9"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["a9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a9"]["Text"] = [[]];
G2L["a9"]["Name"] = [[Toggle]];
G2L["a9"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Toggle.UICorner
G2L["aa"] = Instance.new("UICorner", G2L["a9"]);
G2L["aa"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Toggle.UIAspectRatioConstraint
G2L["ab"] = Instance.new("UIAspectRatioConstraint", G2L["a9"]);
G2L["ab"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.UIAspectRatioConstraint
G2L["ac"] = Instance.new("UIAspectRatioConstraint", G2L["a5"]);
G2L["ac"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Togglers
G2L["ad"] = Instance.new("LocalScript", G2L["9f"]);
G2L["ad"]["Name"] = [[Togglers]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.UIAspectRatioConstraint
G2L["ae"] = Instance.new("UIAspectRatioConstraint", G2L["9f"]);
G2L["ae"]["AspectRatio"] = 2.17121;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KillAura
G2L["af"] = Instance.new("LocalScript", G2L["9f"]);
G2L["af"]["Name"] = [[KillAura]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings
G2L["b0"] = Instance.new("ScrollingFrame", G2L["c"]);
G2L["b0"]["Visible"] = false;
G2L["b0"]["Active"] = true;
G2L["b0"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["b0"]["BorderSizePixel"] = 0;
G2L["b0"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["b0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b0"]["Name"] = [[Settings]];
G2L["b0"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["b0"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["b0"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b0"]["ScrollBarThickness"] = 0;
G2L["b0"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.UIListLayout
G2L["b1"] = Instance.new("UIListLayout", G2L["b0"]);
G2L["b1"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["b1"]["Padding"] = UDim.new(0.05, 0);
G2L["b1"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.UIAspectRatioConstraint
G2L["b2"] = Instance.new("UIAspectRatioConstraint", G2L["b0"]);
G2L["b2"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings
G2L["b3"] = Instance.new("Frame", G2L["b0"]);
G2L["b3"]["BorderSizePixel"] = 0;
G2L["b3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b3"]["Size"] = UDim2.new(0.90639, 0, 0.67601, 0);
G2L["b3"]["Position"] = UDim2.new(0.0566, 0, -0, 0);
G2L["b3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b3"]["Name"] = [[MainSettings]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UICorner
G2L["b4"] = Instance.new("UICorner", G2L["b3"]);
G2L["b4"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.Title
G2L["b5"] = Instance.new("TextLabel", G2L["b3"]);
G2L["b5"]["TextWrapped"] = true;
G2L["b5"]["BorderSizePixel"] = 0;
G2L["b5"]["TextSize"] = 14;
G2L["b5"]["TextScaled"] = true;
G2L["b5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b5"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["b5"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["b5"]["BackgroundTransparency"] = 1;
G2L["b5"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["b5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b5"]["Text"] = [[MAIN SETTINGS]];
G2L["b5"]["Name"] = [[Title]];
G2L["b5"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.Title.UIAspectRatioConstraint
G2L["b6"] = Instance.new("UIAspectRatioConstraint", G2L["b5"]);
G2L["b6"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIGradient
G2L["b7"] = Instance.new("UIGradient", G2L["b3"]);
G2L["b7"]["Rotation"] = 90;
G2L["b7"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY
G2L["b8"] = Instance.new("Frame", G2L["b3"]);
G2L["b8"]["BorderSizePixel"] = 0;
G2L["b8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b8"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["b8"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["b8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b8"]["Name"] = [[UIVISIBILITY]];
G2L["b8"]["LayoutOrder"] = 1;
G2L["b8"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.Trigger
G2L["b9"] = Instance.new("TextButton", G2L["b8"]);
G2L["b9"]["TextWrapped"] = true;
G2L["b9"]["BorderSizePixel"] = 0;
G2L["b9"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["b9"]["TextSize"] = 14;
G2L["b9"]["TextScaled"] = true;
G2L["b9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b9"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["b9"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["b9"]["BackgroundTransparency"] = 1;
G2L["b9"]["Name"] = [[Trigger]];
G2L["b9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b9"]["Text"] = [[UI VISIBILITY]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.Trigger.UITextSizeConstraint
G2L["ba"] = Instance.new("UITextSizeConstraint", G2L["b9"]);
G2L["ba"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.Trigger.UIAspectRatioConstraint
G2L["bb"] = Instance.new("UIAspectRatioConstraint", G2L["b9"]);
G2L["bb"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.Handle
G2L["bc"] = Instance.new("LocalScript", G2L["b8"]);
G2L["bc"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.UIAspectRatioConstraint
G2L["bd"] = Instance.new("UIAspectRatioConstraint", G2L["b8"]);
G2L["bd"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.KeyBind
G2L["be"] = Instance.new("TextButton", G2L["b8"]);
G2L["be"]["TextWrapped"] = true;
G2L["be"]["BorderSizePixel"] = 0;
G2L["be"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["be"]["TextSize"] = 14;
G2L["be"]["TextScaled"] = true;
G2L["be"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["be"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["be"]["Size"] = UDim2.new(0.30638, 0, 1, 0);
G2L["be"]["BackgroundTransparency"] = 1;
G2L["be"]["Name"] = [[KeyBind]];
G2L["be"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["be"]["Text"] = [[LeftControl]];
G2L["be"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.KeyBind.UITextSizeConstraint
G2L["bf"] = Instance.new("UITextSizeConstraint", G2L["be"]);
G2L["bf"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIListLayout
G2L["c0"] = Instance.new("UIListLayout", G2L["b3"]);
G2L["c0"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI
G2L["c1"] = Instance.new("Frame", G2L["b3"]);
G2L["c1"]["BorderSizePixel"] = 0;
G2L["c1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c1"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["c1"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["c1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c1"]["Name"] = [[JOIN_LEAVENOTI]];
G2L["c1"]["LayoutOrder"] = 1;
G2L["c1"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Trigger
G2L["c2"] = Instance.new("TextButton", G2L["c1"]);
G2L["c2"]["TextWrapped"] = true;
G2L["c2"]["BorderSizePixel"] = 0;
G2L["c2"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["c2"]["TextSize"] = 14;
G2L["c2"]["TextScaled"] = true;
G2L["c2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c2"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["c2"]["BackgroundTransparency"] = 1;
G2L["c2"]["Name"] = [[Trigger]];
G2L["c2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c2"]["Text"] = [[JOIN/LEAVE NOTIFY]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Trigger.UITextSizeConstraint
G2L["c3"] = Instance.new("UITextSizeConstraint", G2L["c2"]);
G2L["c3"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Trigger.UIAspectRatioConstraint
G2L["c4"] = Instance.new("UIAspectRatioConstraint", G2L["c2"]);
G2L["c4"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Toggle
G2L["c5"] = Instance.new("TextLabel", G2L["c1"]);
G2L["c5"]["BorderSizePixel"] = 0;
G2L["c5"]["TextSize"] = 14;
G2L["c5"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["c5"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c5"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c5"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["c5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c5"]["Text"] = [[]];
G2L["c5"]["Name"] = [[Toggle]];
G2L["c5"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Toggle.UICorner
G2L["c6"] = Instance.new("UICorner", G2L["c5"]);
G2L["c6"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Toggle.UIAspectRatioConstraint
G2L["c7"] = Instance.new("UIAspectRatioConstraint", G2L["c5"]);
G2L["c7"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.UIAspectRatioConstraint
G2L["c8"] = Instance.new("UIAspectRatioConstraint", G2L["c1"]);
G2L["c8"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.Handle
G2L["c9"] = Instance.new("LocalScript", G2L["b3"]);
G2L["c9"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW
G2L["ca"] = Instance.new("Frame", G2L["b3"]);
G2L["ca"]["BorderSizePixel"] = 0;
G2L["ca"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ca"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["ca"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["ca"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ca"]["Name"] = [[REMOVESNOW]];
G2L["ca"]["LayoutOrder"] = 2;
G2L["ca"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Trigger
G2L["cb"] = Instance.new("TextButton", G2L["ca"]);
G2L["cb"]["TextWrapped"] = true;
G2L["cb"]["BorderSizePixel"] = 0;
G2L["cb"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["cb"]["TextSize"] = 14;
G2L["cb"]["TextScaled"] = true;
G2L["cb"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cb"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["cb"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["cb"]["BackgroundTransparency"] = 1;
G2L["cb"]["Name"] = [[Trigger]];
G2L["cb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["cb"]["Text"] = [[REMOVE SNOW]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Trigger.UITextSizeConstraint
G2L["cc"] = Instance.new("UITextSizeConstraint", G2L["cb"]);
G2L["cc"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Trigger.UIAspectRatioConstraint
G2L["cd"] = Instance.new("UIAspectRatioConstraint", G2L["cb"]);
G2L["cd"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Toggle
G2L["ce"] = Instance.new("TextLabel", G2L["ca"]);
G2L["ce"]["BorderSizePixel"] = 0;
G2L["ce"]["TextSize"] = 14;
G2L["ce"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["ce"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ce"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ce"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["ce"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ce"]["Text"] = [[]];
G2L["ce"]["Name"] = [[Toggle]];
G2L["ce"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Toggle.UICorner
G2L["cf"] = Instance.new("UICorner", G2L["ce"]);
G2L["cf"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Toggle.UIAspectRatioConstraint
G2L["d0"] = Instance.new("UIAspectRatioConstraint", G2L["ce"]);
G2L["d0"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Handle
G2L["d1"] = Instance.new("LocalScript", G2L["ca"]);
G2L["d1"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.UIAspectRatioConstraint
G2L["d2"] = Instance.new("UIAspectRatioConstraint", G2L["ca"]);
G2L["d2"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.UIPadding
G2L["d3"] = Instance.new("UIPadding", G2L["b0"]);
G2L["d3"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings
G2L["d4"] = Instance.new("ScrollingFrame", G2L["c"]);
G2L["d4"]["Visible"] = false;
G2L["d4"]["Active"] = true;
G2L["d4"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["d4"]["BorderSizePixel"] = 0;
G2L["d4"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["d4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d4"]["Name"] = [[AutoSettings]];
G2L["d4"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["d4"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["d4"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d4"]["ScrollBarThickness"] = 0;
G2L["d4"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.UIListLayout
G2L["d5"] = Instance.new("UIListLayout", G2L["d4"]);
G2L["d5"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["d5"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration
G2L["d6"] = Instance.new("Frame", G2L["d4"]);
G2L["d6"]["BorderSizePixel"] = 0;
G2L["d6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d6"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["d6"]["Size"] = UDim2.new(0.90639, 0, 0.77882, 0);
G2L["d6"]["Position"] = UDim2.new(0.0468, 0, 0, 0);
G2L["d6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d6"]["Name"] = [[Configuration]];
G2L["d6"]["LayoutOrder"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.UICorner
G2L["d7"] = Instance.new("UICorner", G2L["d6"]);
G2L["d7"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.UIGradient
G2L["d8"] = Instance.new("UIGradient", G2L["d6"]);
G2L["d8"]["Rotation"] = 90;
G2L["d8"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.UIListLayout
G2L["d9"] = Instance.new("UIListLayout", G2L["d6"]);
G2L["d9"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.Title
G2L["da"] = Instance.new("TextLabel", G2L["d6"]);
G2L["da"]["TextWrapped"] = true;
G2L["da"]["BorderSizePixel"] = 0;
G2L["da"]["TextSize"] = 14;
G2L["da"]["TextScaled"] = true;
G2L["da"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["da"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["da"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["da"]["BackgroundTransparency"] = 1;
G2L["da"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["da"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["da"]["Text"] = [[CONFIGURATION]];
G2L["da"]["Name"] = [[Title]];
G2L["da"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.Title.UIAspectRatioConstraint
G2L["db"] = Instance.new("UIAspectRatioConstraint", G2L["da"]);
G2L["db"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.UIAspectRatioConstraint
G2L["dc"] = Instance.new("UIAspectRatioConstraint", G2L["d6"]);
G2L["dc"]["AspectRatio"] = 1.88;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP
G2L["dd"] = Instance.new("Frame", G2L["d6"]);
G2L["dd"]["BorderSizePixel"] = 0;
G2L["dd"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["dd"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["dd"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["dd"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["dd"]["Name"] = [[AUTOSTOMP]];
G2L["dd"]["LayoutOrder"] = 1;
G2L["dd"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Trigger
G2L["de"] = Instance.new("TextButton", G2L["dd"]);
G2L["de"]["TextWrapped"] = true;
G2L["de"]["BorderSizePixel"] = 0;
G2L["de"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["de"]["TextSize"] = 14;
G2L["de"]["TextScaled"] = true;
G2L["de"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["de"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["de"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["de"]["BackgroundTransparency"] = 1;
G2L["de"]["Name"] = [[Trigger]];
G2L["de"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["de"]["Text"] = [[AUTO STOMP]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Trigger.UITextSizeConstraint
G2L["df"] = Instance.new("UITextSizeConstraint", G2L["de"]);
G2L["df"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Trigger.UIAspectRatioConstraint
G2L["e0"] = Instance.new("UIAspectRatioConstraint", G2L["de"]);
G2L["e0"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Toggle
G2L["e1"] = Instance.new("TextLabel", G2L["dd"]);
G2L["e1"]["BorderSizePixel"] = 0;
G2L["e1"]["TextSize"] = 14;
G2L["e1"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["e1"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["e1"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e1"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["e1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e1"]["Text"] = [[]];
G2L["e1"]["Name"] = [[Toggle]];
G2L["e1"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Toggle.UICorner
G2L["e2"] = Instance.new("UICorner", G2L["e1"]);
G2L["e2"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Toggle.UIAspectRatioConstraint
G2L["e3"] = Instance.new("UIAspectRatioConstraint", G2L["e1"]);
G2L["e3"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.UIAspectRatioConstraint
G2L["e4"] = Instance.new("UIAspectRatioConstraint", G2L["dd"]);
G2L["e4"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Handle
G2L["e5"] = Instance.new("LocalScript", G2L["dd"]);
G2L["e5"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD
G2L["e6"] = Instance.new("Frame", G2L["d6"]);
G2L["e6"]["BorderSizePixel"] = 0;
G2L["e6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e6"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["e6"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["e6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e6"]["Name"] = [[AUTORELOAD]];
G2L["e6"]["LayoutOrder"] = 2;
G2L["e6"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Trigger
G2L["e7"] = Instance.new("TextButton", G2L["e6"]);
G2L["e7"]["TextWrapped"] = true;
G2L["e7"]["BorderSizePixel"] = 0;
G2L["e7"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["e7"]["TextSize"] = 14;
G2L["e7"]["TextScaled"] = true;
G2L["e7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e7"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["e7"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["e7"]["BackgroundTransparency"] = 1;
G2L["e7"]["Name"] = [[Trigger]];
G2L["e7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e7"]["Text"] = [[AUTO RELOAD]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Trigger.UITextSizeConstraint
G2L["e8"] = Instance.new("UITextSizeConstraint", G2L["e7"]);
G2L["e8"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Trigger.UIAspectRatioConstraint
G2L["e9"] = Instance.new("UIAspectRatioConstraint", G2L["e7"]);
G2L["e9"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Toggle
G2L["ea"] = Instance.new("TextLabel", G2L["e6"]);
G2L["ea"]["BorderSizePixel"] = 0;
G2L["ea"]["TextSize"] = 14;
G2L["ea"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["ea"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ea"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ea"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["ea"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ea"]["Text"] = [[]];
G2L["ea"]["Name"] = [[Toggle]];
G2L["ea"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Toggle.UICorner
G2L["eb"] = Instance.new("UICorner", G2L["ea"]);
G2L["eb"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Toggle.UIAspectRatioConstraint
G2L["ec"] = Instance.new("UIAspectRatioConstraint", G2L["ea"]);
G2L["ec"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.UIAspectRatioConstraint
G2L["ed"] = Instance.new("UIAspectRatioConstraint", G2L["e6"]);
G2L["ed"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Handle
G2L["ee"] = Instance.new("LocalScript", G2L["e6"]);
G2L["ee"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT
G2L["ef"] = Instance.new("Frame", G2L["d6"]);
G2L["ef"]["BorderSizePixel"] = 0;
G2L["ef"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ef"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["ef"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["ef"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ef"]["Name"] = [[AUTOSHOOT]];
G2L["ef"]["LayoutOrder"] = 3;
G2L["ef"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Trigger
G2L["f0"] = Instance.new("TextButton", G2L["ef"]);
G2L["f0"]["TextWrapped"] = true;
G2L["f0"]["BorderSizePixel"] = 0;
G2L["f0"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["f0"]["TextSize"] = 14;
G2L["f0"]["TextScaled"] = true;
G2L["f0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f0"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["f0"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["f0"]["BackgroundTransparency"] = 1;
G2L["f0"]["Name"] = [[Trigger]];
G2L["f0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f0"]["Text"] = [[AUTO SHOOT]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Trigger.UITextSizeConstraint
G2L["f1"] = Instance.new("UITextSizeConstraint", G2L["f0"]);
G2L["f1"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Trigger.UIAspectRatioConstraint
G2L["f2"] = Instance.new("UIAspectRatioConstraint", G2L["f0"]);
G2L["f2"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Toggle
G2L["f3"] = Instance.new("TextLabel", G2L["ef"]);
G2L["f3"]["BorderSizePixel"] = 0;
G2L["f3"]["TextSize"] = 14;
G2L["f3"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["f3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["f3"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f3"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["f3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f3"]["Text"] = [[]];
G2L["f3"]["Name"] = [[Toggle]];
G2L["f3"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Toggle.UICorner
G2L["f4"] = Instance.new("UICorner", G2L["f3"]);
G2L["f4"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Toggle.UIAspectRatioConstraint
G2L["f5"] = Instance.new("UIAspectRatioConstraint", G2L["f3"]);
G2L["f5"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.UIAspectRatioConstraint
G2L["f6"] = Instance.new("UIAspectRatioConstraint", G2L["ef"]);
G2L["f6"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Handle
G2L["f7"] = Instance.new("LocalScript", G2L["ef"]);
G2L["f7"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.UIPadding
G2L["f8"] = Instance.new("UIPadding", G2L["d4"]);
G2L["f8"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport
G2L["f9"] = Instance.new("ScrollingFrame", G2L["c"]);
G2L["f9"]["Visible"] = false;
G2L["f9"]["Active"] = true;
G2L["f9"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["f9"]["BorderSizePixel"] = 0;
G2L["f9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f9"]["Name"] = [[Teleport]];
G2L["f9"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["f9"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["f9"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f9"]["ScrollBarThickness"] = 0;
G2L["f9"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.UIListLayout
G2L["fa"] = Instance.new("UIListLayout", G2L["f9"]);
G2L["fa"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["fa"]["Padding"] = UDim.new(0.05, 0);
G2L["fa"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.UIAspectRatioConstraint
G2L["fb"] = Instance.new("UIAspectRatioConstraint", G2L["f9"]);
G2L["fb"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places
G2L["fc"] = Instance.new("Frame", G2L["f9"]);
G2L["fc"]["BorderSizePixel"] = 0;
G2L["fc"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fc"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["fc"]["Size"] = UDim2.new(0.90639, 0, 0.84494, 0);
G2L["fc"]["Position"] = UDim2.new(0.0468, 0, 0, 0);
G2L["fc"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["fc"]["Name"] = [[Places]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UICorner
G2L["fd"] = Instance.new("UICorner", G2L["fc"]);
G2L["fd"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.Title
G2L["fe"] = Instance.new("TextLabel", G2L["fc"]);
G2L["fe"]["TextWrapped"] = true;
G2L["fe"]["BorderSizePixel"] = 0;
G2L["fe"]["TextSize"] = 14;
G2L["fe"]["TextScaled"] = true;
G2L["fe"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fe"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["fe"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["fe"]["BackgroundTransparency"] = 1;
G2L["fe"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["fe"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["fe"]["Text"] = [[WORLD]];
G2L["fe"]["Name"] = [[Title]];
G2L["fe"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.Title.UIAspectRatioConstraint
G2L["ff"] = Instance.new("UIAspectRatioConstraint", G2L["fe"]);
G2L["ff"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UIGradient
G2L["100"] = Instance.new("UIGradient", G2L["fc"]);
G2L["100"]["Rotation"] = 90;
G2L["100"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.REVOLVER
G2L["101"] = Instance.new("Frame", G2L["fc"]);
G2L["101"]["BorderSizePixel"] = 0;
G2L["101"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["101"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["101"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["101"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["101"]["Name"] = [[REVOLVER]];
G2L["101"]["LayoutOrder"] = 2;
G2L["101"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.REVOLVER.Trigger
G2L["102"] = Instance.new("TextButton", G2L["101"]);
G2L["102"]["TextWrapped"] = true;
G2L["102"]["BorderSizePixel"] = 0;
G2L["102"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["102"]["TextSize"] = 14;
G2L["102"]["TextScaled"] = true;
G2L["102"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["102"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["102"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["102"]["BackgroundTransparency"] = 1;
G2L["102"]["Name"] = [[Trigger]];
G2L["102"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["102"]["Text"] = [[REVOLVER]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.REVOLVER.Trigger.UITextSizeConstraint
G2L["103"] = Instance.new("UITextSizeConstraint", G2L["102"]);
G2L["103"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.REVOLVER.Trigger.UIAspectRatioConstraint
G2L["104"] = Instance.new("UIAspectRatioConstraint", G2L["102"]);
G2L["104"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.REVOLVER.UIAspectRatioConstraint
G2L["105"] = Instance.new("UIAspectRatioConstraint", G2L["101"]);
G2L["105"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UIListLayout
G2L["106"] = Instance.new("UIListLayout", G2L["fc"]);
G2L["106"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZMILITARY
G2L["107"] = Instance.new("Frame", G2L["fc"]);
G2L["107"]["BorderSizePixel"] = 0;
G2L["107"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["107"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["107"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["107"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["107"]["Name"] = [[UPHILLZMILITARY]];
G2L["107"]["LayoutOrder"] = 2;
G2L["107"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZMILITARY.Trigger
G2L["108"] = Instance.new("TextButton", G2L["107"]);
G2L["108"]["TextWrapped"] = true;
G2L["108"]["BorderSizePixel"] = 0;
G2L["108"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["108"]["TextSize"] = 14;
G2L["108"]["TextScaled"] = true;
G2L["108"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["108"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["108"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["108"]["BackgroundTransparency"] = 1;
G2L["108"]["Name"] = [[Trigger]];
G2L["108"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["108"]["Text"] = [[UPHILLZ MILITARY]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZMILITARY.Trigger.UITextSizeConstraint
G2L["109"] = Instance.new("UITextSizeConstraint", G2L["108"]);
G2L["109"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZMILITARY.Trigger.UIAspectRatioConstraint
G2L["10a"] = Instance.new("UIAspectRatioConstraint", G2L["108"]);
G2L["10a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZMILITARY.UIAspectRatioConstraint
G2L["10b"] = Instance.new("UIAspectRatioConstraint", G2L["107"]);
G2L["10b"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZGUN
G2L["10c"] = Instance.new("Frame", G2L["fc"]);
G2L["10c"]["BorderSizePixel"] = 0;
G2L["10c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10c"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["10c"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["10c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10c"]["Name"] = [[UPHILLZGUN]];
G2L["10c"]["LayoutOrder"] = 2;
G2L["10c"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZGUN.Trigger
G2L["10d"] = Instance.new("TextButton", G2L["10c"]);
G2L["10d"]["TextWrapped"] = true;
G2L["10d"]["BorderSizePixel"] = 0;
G2L["10d"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["10d"]["TextSize"] = 14;
G2L["10d"]["TextScaled"] = true;
G2L["10d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10d"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["10d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["10d"]["BackgroundTransparency"] = 1;
G2L["10d"]["Name"] = [[Trigger]];
G2L["10d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10d"]["Text"] = [[UPHILLZ GUN]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZGUN.Trigger.UITextSizeConstraint
G2L["10e"] = Instance.new("UITextSizeConstraint", G2L["10d"]);
G2L["10e"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZGUN.Trigger.UIAspectRatioConstraint
G2L["10f"] = Instance.new("UIAspectRatioConstraint", G2L["10d"]);
G2L["10f"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZGUN.UIAspectRatioConstraint
G2L["110"] = Instance.new("UIAspectRatioConstraint", G2L["10c"]);
G2L["110"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.MILITARYDB
G2L["111"] = Instance.new("Frame", G2L["fc"]);
G2L["111"]["BorderSizePixel"] = 0;
G2L["111"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["111"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["111"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["111"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["111"]["Name"] = [[MILITARYDB]];
G2L["111"]["LayoutOrder"] = 2;
G2L["111"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.MILITARYDB.Trigger
G2L["112"] = Instance.new("TextButton", G2L["111"]);
G2L["112"]["TextWrapped"] = true;
G2L["112"]["BorderSizePixel"] = 0;
G2L["112"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["112"]["TextSize"] = 14;
G2L["112"]["TextScaled"] = true;
G2L["112"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["112"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["112"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["112"]["BackgroundTransparency"] = 1;
G2L["112"]["Name"] = [[Trigger]];
G2L["112"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["112"]["Text"] = [[MILITARY DB]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.MILITARYDB.Trigger.UITextSizeConstraint
G2L["113"] = Instance.new("UITextSizeConstraint", G2L["112"]);
G2L["113"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.MILITARYDB.Trigger.UIAspectRatioConstraint
G2L["114"] = Instance.new("UIAspectRatioConstraint", G2L["112"]);
G2L["114"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.MILITARYDB.UIAspectRatioConstraint
G2L["115"] = Instance.new("UIAspectRatioConstraint", G2L["111"]);
G2L["115"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DABANK
G2L["116"] = Instance.new("Frame", G2L["fc"]);
G2L["116"]["BorderSizePixel"] = 0;
G2L["116"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["116"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["116"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["116"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["116"]["Name"] = [[DABANK]];
G2L["116"]["LayoutOrder"] = 2;
G2L["116"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DABANK.Trigger
G2L["117"] = Instance.new("TextButton", G2L["116"]);
G2L["117"]["TextWrapped"] = true;
G2L["117"]["BorderSizePixel"] = 0;
G2L["117"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["117"]["TextSize"] = 14;
G2L["117"]["TextScaled"] = true;
G2L["117"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["117"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["117"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["117"]["BackgroundTransparency"] = 1;
G2L["117"]["Name"] = [[Trigger]];
G2L["117"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["117"]["Text"] = [[DA BANK]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DABANK.Trigger.UITextSizeConstraint
G2L["118"] = Instance.new("UITextSizeConstraint", G2L["117"]);
G2L["118"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DABANK.Trigger.UIAspectRatioConstraint
G2L["119"] = Instance.new("UIAspectRatioConstraint", G2L["117"]);
G2L["119"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DABANK.UIAspectRatioConstraint
G2L["11a"] = Instance.new("UIAspectRatioConstraint", G2L["116"]);
G2L["11a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DB
G2L["11b"] = Instance.new("Frame", G2L["fc"]);
G2L["11b"]["BorderSizePixel"] = 0;
G2L["11b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11b"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["11b"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["11b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11b"]["Name"] = [[DB]];
G2L["11b"]["LayoutOrder"] = 2;
G2L["11b"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DB.Trigger
G2L["11c"] = Instance.new("TextButton", G2L["11b"]);
G2L["11c"]["TextWrapped"] = true;
G2L["11c"]["BorderSizePixel"] = 0;
G2L["11c"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["11c"]["TextSize"] = 14;
G2L["11c"]["TextScaled"] = true;
G2L["11c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11c"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["11c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["11c"]["BackgroundTransparency"] = 1;
G2L["11c"]["Name"] = [[Trigger]];
G2L["11c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11c"]["Text"] = [[DB]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DB.Trigger.UITextSizeConstraint
G2L["11d"] = Instance.new("UITextSizeConstraint", G2L["11c"]);
G2L["11d"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DB.Trigger.UIAspectRatioConstraint
G2L["11e"] = Instance.new("UIAspectRatioConstraint", G2L["11c"]);
G2L["11e"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DB.UIAspectRatioConstraint
G2L["11f"] = Instance.new("UIAspectRatioConstraint", G2L["11b"]);
G2L["11f"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DOWNHILLZGUN
G2L["120"] = Instance.new("Frame", G2L["fc"]);
G2L["120"]["BorderSizePixel"] = 0;
G2L["120"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["120"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["120"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["120"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["120"]["Name"] = [[DOWNHILLZGUN]];
G2L["120"]["LayoutOrder"] = 2;
G2L["120"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DOWNHILLZGUN.Trigger
G2L["121"] = Instance.new("TextButton", G2L["120"]);
G2L["121"]["TextWrapped"] = true;
G2L["121"]["BorderSizePixel"] = 0;
G2L["121"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["121"]["TextSize"] = 14;
G2L["121"]["TextScaled"] = true;
G2L["121"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["121"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["121"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["121"]["BackgroundTransparency"] = 1;
G2L["121"]["Name"] = [[Trigger]];
G2L["121"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["121"]["Text"] = [[DOWN HILLZ GUN]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DOWNHILLZGUN.Trigger.UITextSizeConstraint
G2L["122"] = Instance.new("UITextSizeConstraint", G2L["121"]);
G2L["122"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DOWNHILLZGUN.Trigger.UIAspectRatioConstraint
G2L["123"] = Instance.new("UIAspectRatioConstraint", G2L["121"]);
G2L["123"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DOWNHILLZGUN.UIAspectRatioConstraint
G2L["124"] = Instance.new("UIAspectRatioConstraint", G2L["120"]);
G2L["124"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.Handle
G2L["125"] = Instance.new("LocalScript", G2L["fc"]);
G2L["125"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.RIFLE
G2L["126"] = Instance.new("Frame", G2L["fc"]);
G2L["126"]["BorderSizePixel"] = 0;
G2L["126"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["126"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["126"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["126"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["126"]["Name"] = [[RIFLE]];
G2L["126"]["LayoutOrder"] = 2;
G2L["126"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.RIFLE.Trigger
G2L["127"] = Instance.new("TextButton", G2L["126"]);
G2L["127"]["TextWrapped"] = true;
G2L["127"]["BorderSizePixel"] = 0;
G2L["127"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["127"]["TextSize"] = 14;
G2L["127"]["TextScaled"] = true;
G2L["127"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["127"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["127"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["127"]["BackgroundTransparency"] = 1;
G2L["127"]["Name"] = [[Trigger]];
G2L["127"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["127"]["Text"] = [[RIFLE]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.RIFLE.Trigger.UITextSizeConstraint
G2L["128"] = Instance.new("UITextSizeConstraint", G2L["127"]);
G2L["128"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.RIFLE.Trigger.UIAspectRatioConstraint
G2L["129"] = Instance.new("UIAspectRatioConstraint", G2L["127"]);
G2L["129"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.RIFLE.UIAspectRatioConstraint
G2L["12a"] = Instance.new("UIAspectRatioConstraint", G2L["126"]);
G2L["12a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UIAspectRatioConstraint
G2L["12b"] = Instance.new("UIAspectRatioConstraint", G2L["fc"]);
G2L["12b"]["AspectRatio"] = 1.56645;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.UIPadding
G2L["12c"] = Instance.new("UIPadding", G2L["f9"]);
G2L["12c"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport
G2L["12d"] = Instance.new("Frame", G2L["f9"]);
G2L["12d"]["BorderSizePixel"] = 0;
G2L["12d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12d"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["12d"]["Size"] = UDim2.new(0.90639, 0, 0.84494, 0);
G2L["12d"]["Position"] = UDim2.new(0.0468, 0, 0, 0);
G2L["12d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12d"]["Name"] = [[PlayerTeleport]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.UICorner
G2L["12e"] = Instance.new("UICorner", G2L["12d"]);
G2L["12e"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.Title
G2L["12f"] = Instance.new("TextLabel", G2L["12d"]);
G2L["12f"]["TextWrapped"] = true;
G2L["12f"]["BorderSizePixel"] = 0;
G2L["12f"]["TextSize"] = 14;
G2L["12f"]["TextScaled"] = true;
G2L["12f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12f"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["12f"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["12f"]["BackgroundTransparency"] = 1;
G2L["12f"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["12f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12f"]["Text"] = [[PLAYER TELEPORT]];
G2L["12f"]["Name"] = [[Title]];
G2L["12f"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.Title.UIAspectRatioConstraint
G2L["130"] = Instance.new("UIAspectRatioConstraint", G2L["12f"]);
G2L["130"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.UIGradient
G2L["131"] = Instance.new("UIGradient", G2L["12d"]);
G2L["131"]["Rotation"] = 90;
G2L["131"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.UIListLayout
G2L["132"] = Instance.new("UIListLayout", G2L["12d"]);
G2L["132"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.UIAspectRatioConstraint
G2L["133"] = Instance.new("UIAspectRatioConstraint", G2L["12d"]);
G2L["133"]["AspectRatio"] = 1.73288;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TELEPORT
G2L["134"] = Instance.new("Frame", G2L["12d"]);
G2L["134"]["BorderSizePixel"] = 0;
G2L["134"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["134"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["134"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["134"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["134"]["Name"] = [[TELEPORT]];
G2L["134"]["LayoutOrder"] = 1;
G2L["134"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TELEPORT.Trigger
G2L["135"] = Instance.new("TextButton", G2L["134"]);
G2L["135"]["TextWrapped"] = true;
G2L["135"]["BorderSizePixel"] = 0;
G2L["135"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["135"]["TextSize"] = 14;
G2L["135"]["TextScaled"] = true;
G2L["135"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["135"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["135"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["135"]["BackgroundTransparency"] = 1;
G2L["135"]["Name"] = [[Trigger]];
G2L["135"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["135"]["Text"] = [[TELEPORT]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TELEPORT.Trigger.UITextSizeConstraint
G2L["136"] = Instance.new("UITextSizeConstraint", G2L["135"]);
G2L["136"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TELEPORT.Trigger.UIAspectRatioConstraint
G2L["137"] = Instance.new("UIAspectRatioConstraint", G2L["135"]);
G2L["137"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TELEPORT.UIAspectRatioConstraint
G2L["138"] = Instance.new("UIAspectRatioConstraint", G2L["134"]);
G2L["138"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TARGETNAME
G2L["139"] = Instance.new("Frame", G2L["12d"]);
G2L["139"]["BorderSizePixel"] = 0;
G2L["139"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["139"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["139"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["139"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["139"]["Name"] = [[TARGETNAME]];
G2L["139"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TARGETNAME.UIAspectRatioConstraint
G2L["13a"] = Instance.new("UIAspectRatioConstraint", G2L["139"]);
G2L["13a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TARGETNAME.TARGET
G2L["13b"] = Instance.new("TextBox", G2L["139"]);
G2L["13b"]["Name"] = [[TARGET]];
G2L["13b"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["13b"]["BorderSizePixel"] = 0;
G2L["13b"]["TextWrapped"] = true;
G2L["13b"]["TextSize"] = 14;
G2L["13b"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["13b"]["TextScaled"] = true;
G2L["13b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["13b"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["13b"]["PlaceholderText"] = [[TARGET NAME OR DISPLAY]];
G2L["13b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["13b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13b"]["Text"] = [[]];
G2L["13b"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TARGETNAME.TARGET.UITextSizeConstraint
G2L["13c"] = Instance.new("UITextSizeConstraint", G2L["13b"]);
G2L["13c"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TARGETNAME.TARGET.UIAspectRatioConstraint
G2L["13d"] = Instance.new("UIAspectRatioConstraint", G2L["13b"]);
G2L["13d"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.Handle
G2L["13e"] = Instance.new("LocalScript", G2L["12d"]);
G2L["13e"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.UIAspectRatioConstraint
G2L["13f"] = Instance.new("UIAspectRatioConstraint", G2L["c"]);
G2L["13f"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit
G2L["140"] = Instance.new("ScrollingFrame", G2L["c"]);
G2L["140"]["Visible"] = false;
G2L["140"]["Active"] = true;
G2L["140"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["140"]["BorderSizePixel"] = 0;
G2L["140"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["140"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["140"]["Name"] = [[Orbit]];
G2L["140"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["140"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["140"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["140"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["140"]["ScrollBarThickness"] = 0;
G2L["140"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.UIListLayout
G2L["141"] = Instance.new("UIListLayout", G2L["140"]);
G2L["141"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["141"]["Padding"] = UDim.new(0.05, 0);
G2L["141"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.UIAspectRatioConstraint
G2L["142"] = Instance.new("UIAspectRatioConstraint", G2L["140"]);
G2L["142"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target
G2L["143"] = Instance.new("Frame", G2L["140"]);
G2L["143"]["BorderSizePixel"] = 0;
G2L["143"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["143"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["143"]["Size"] = UDim2.new(0.90639, 0, 0.84494, 0);
G2L["143"]["Position"] = UDim2.new(0.0468, 0, 0, 0);
G2L["143"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["143"]["Name"] = [[Target]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.UICorner
G2L["144"] = Instance.new("UICorner", G2L["143"]);
G2L["144"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Title
G2L["145"] = Instance.new("TextLabel", G2L["143"]);
G2L["145"]["TextWrapped"] = true;
G2L["145"]["BorderSizePixel"] = 0;
G2L["145"]["TextSize"] = 14;
G2L["145"]["TextScaled"] = true;
G2L["145"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["145"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["145"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["145"]["BackgroundTransparency"] = 1;
G2L["145"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["145"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["145"]["Text"] = [[TARGET]];
G2L["145"]["Name"] = [[Title]];
G2L["145"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Title.UIAspectRatioConstraint
G2L["146"] = Instance.new("UIAspectRatioConstraint", G2L["145"]);
G2L["146"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.UIGradient
G2L["147"] = Instance.new("UIGradient", G2L["143"]);
G2L["147"]["Rotation"] = 90;
G2L["147"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.UIListLayout
G2L["148"] = Instance.new("UIListLayout", G2L["143"]);
G2L["148"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.UIAspectRatioConstraint
G2L["149"] = Instance.new("UIAspectRatioConstraint", G2L["143"]);
G2L["149"]["AspectRatio"] = 1.73288;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TARGETNAME
G2L["14a"] = Instance.new("Frame", G2L["143"]);
G2L["14a"]["BorderSizePixel"] = 0;
G2L["14a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14a"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["14a"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["14a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14a"]["Name"] = [[TARGETNAME]];
G2L["14a"]["LayoutOrder"] = 4;
G2L["14a"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TARGETNAME.UIAspectRatioConstraint
G2L["14b"] = Instance.new("UIAspectRatioConstraint", G2L["14a"]);
G2L["14b"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TARGETNAME.TARGET
G2L["14c"] = Instance.new("TextBox", G2L["14a"]);
G2L["14c"]["Name"] = [[TARGET]];
G2L["14c"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["14c"]["BorderSizePixel"] = 0;
G2L["14c"]["TextWrapped"] = true;
G2L["14c"]["TextSize"] = 14;
G2L["14c"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["14c"]["TextScaled"] = true;
G2L["14c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14c"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["14c"]["PlaceholderText"] = [[TARGET NAME OR DISPLAY]];
G2L["14c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["14c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14c"]["Text"] = [[]];
G2L["14c"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TARGETNAME.TARGET.UITextSizeConstraint
G2L["14d"] = Instance.new("UITextSizeConstraint", G2L["14c"]);
G2L["14d"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TARGETNAME.TARGET.UIAspectRatioConstraint
G2L["14e"] = Instance.new("UIAspectRatioConstraint", G2L["14c"]);
G2L["14e"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN
G2L["14f"] = Instance.new("Frame", G2L["143"]);
G2L["14f"]["BorderSizePixel"] = 0;
G2L["14f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14f"]["Size"] = UDim2.new(1, 0, 0.155, 0);
G2L["14f"]["Position"] = UDim2.new(0, 0, 0.36072, 0);
G2L["14f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14f"]["Name"] = [[SELECTONSCREEN]];
G2L["14f"]["LayoutOrder"] = 5;
G2L["14f"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.Trigger
G2L["150"] = Instance.new("TextButton", G2L["14f"]);
G2L["150"]["TextWrapped"] = true;
G2L["150"]["BorderSizePixel"] = 0;
G2L["150"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["150"]["TextSize"] = 14;
G2L["150"]["TextScaled"] = true;
G2L["150"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["150"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["150"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["150"]["BackgroundTransparency"] = 1;
G2L["150"]["Name"] = [[Trigger]];
G2L["150"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["150"]["Text"] = [[CLICK ON TARGET TO SELECT]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.Trigger.UITextSizeConstraint
G2L["151"] = Instance.new("UITextSizeConstraint", G2L["150"]);
G2L["151"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.Trigger.UIAspectRatioConstraint
G2L["152"] = Instance.new("UIAspectRatioConstraint", G2L["150"]);
G2L["152"]["AspectRatio"] = 11.17985;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.Handle
G2L["153"] = Instance.new("LocalScript", G2L["14f"]);
G2L["153"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.UIAspectRatioConstraint
G2L["154"] = Instance.new("UIAspectRatioConstraint", G2L["14f"]);
G2L["154"]["AspectRatio"] = 11.17985;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Orbit
G2L["155"] = Instance.new("LocalScript", G2L["143"]);
G2L["155"]["Name"] = [[Orbit]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Togglers
G2L["156"] = Instance.new("LocalScript", G2L["143"]);
G2L["156"]["Name"] = [[Togglers]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TargetNameHandler
G2L["157"] = Instance.new("LocalScript", G2L["143"]);
G2L["157"]["Name"] = [[TargetNameHandler]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT
G2L["158"] = Instance.new("Frame", G2L["143"]);
G2L["158"]["BorderSizePixel"] = 0;
G2L["158"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["158"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["158"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["158"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["158"]["Name"] = [[ORBIT]];
G2L["158"]["LayoutOrder"] = 1;
G2L["158"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Toggle
G2L["159"] = Instance.new("TextLabel", G2L["158"]);
G2L["159"]["BorderSizePixel"] = 0;
G2L["159"]["TextSize"] = 14;
G2L["159"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["159"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["159"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["159"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["159"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["159"]["Text"] = [[]];
G2L["159"]["Name"] = [[Toggle]];
G2L["159"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Toggle.UICorner
G2L["15a"] = Instance.new("UICorner", G2L["159"]);
G2L["15a"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Toggle.UIAspectRatioConstraint
G2L["15b"] = Instance.new("UIAspectRatioConstraint", G2L["159"]);
G2L["15b"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.UIAspectRatioConstraint
G2L["15c"] = Instance.new("UIAspectRatioConstraint", G2L["158"]);
G2L["15c"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.KeyBind
G2L["15d"] = Instance.new("TextButton", G2L["158"]);
G2L["15d"]["TextWrapped"] = true;
G2L["15d"]["BorderSizePixel"] = 0;
G2L["15d"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["15d"]["TextSize"] = 14;
G2L["15d"]["TextScaled"] = true;
G2L["15d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15d"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15d"]["ZIndex"] = 2;
G2L["15d"]["Size"] = UDim2.new(0.30638, 0, 1, 0);
G2L["15d"]["BackgroundTransparency"] = 1;
G2L["15d"]["Name"] = [[KeyBind]];
G2L["15d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15d"]["Text"] = [[LeftAlt]];
G2L["15d"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.KeyBind.UITextSizeConstraint
G2L["15e"] = Instance.new("UITextSizeConstraint", G2L["15d"]);
G2L["15e"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Trigger
G2L["15f"] = Instance.new("TextButton", G2L["158"]);
G2L["15f"]["TextWrapped"] = true;
G2L["15f"]["BorderSizePixel"] = 0;
G2L["15f"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["15f"]["TextSize"] = 14;
G2L["15f"]["TextScaled"] = true;
G2L["15f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15f"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["15f"]["BackgroundTransparency"] = 1;
G2L["15f"]["Name"] = [[Trigger]];
G2L["15f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15f"]["Text"] = [[ORBIT]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Trigger.UITextSizeConstraint
G2L["160"] = Instance.new("UITextSizeConstraint", G2L["15f"]);
G2L["160"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Trigger.UIAspectRatioConstraint
G2L["161"] = Instance.new("UIAspectRatioConstraint", G2L["15f"]);
G2L["161"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Keybind
G2L["162"] = Instance.new("LocalScript", G2L["143"]);
G2L["162"]["Name"] = [[Keybind]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP
G2L["163"] = Instance.new("Frame", G2L["143"]);
G2L["163"]["BorderSizePixel"] = 0;
G2L["163"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["163"]["Size"] = UDim2.new(1, 0, 0.155, 0);
G2L["163"]["Position"] = UDim2.new(0, 0, 0.36072, 0);
G2L["163"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["163"]["Name"] = [[AUTOSTOMP]];
G2L["163"]["LayoutOrder"] = 2;
G2L["163"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Trigger
G2L["164"] = Instance.new("TextButton", G2L["163"]);
G2L["164"]["TextWrapped"] = true;
G2L["164"]["BorderSizePixel"] = 0;
G2L["164"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["164"]["TextSize"] = 14;
G2L["164"]["TextScaled"] = true;
G2L["164"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["164"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["164"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["164"]["BackgroundTransparency"] = 1;
G2L["164"]["Name"] = [[Trigger]];
G2L["164"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["164"]["Text"] = [[AUTO STOMP]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Trigger.UITextSizeConstraint
G2L["165"] = Instance.new("UITextSizeConstraint", G2L["164"]);
G2L["165"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Trigger.UIAspectRatioConstraint
G2L["166"] = Instance.new("UIAspectRatioConstraint", G2L["164"]);
G2L["166"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Toggle
G2L["167"] = Instance.new("TextLabel", G2L["163"]);
G2L["167"]["BorderSizePixel"] = 0;
G2L["167"]["TextSize"] = 14;
G2L["167"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["167"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["167"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["167"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["167"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["167"]["Text"] = [[]];
G2L["167"]["Name"] = [[Toggle]];
G2L["167"]["Position"] = UDim2.new(0.883, 0, 0.158, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Toggle.UICorner
G2L["168"] = Instance.new("UICorner", G2L["167"]);
G2L["168"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Toggle.UIAspectRatioConstraint
G2L["169"] = Instance.new("UIAspectRatioConstraint", G2L["167"]);
G2L["169"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.UIAspectRatioConstraint
G2L["16a"] = Instance.new("UIAspectRatioConstraint", G2L["163"]);
G2L["16a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID
G2L["16b"] = Instance.new("Frame", G2L["143"]);
G2L["16b"]["BorderSizePixel"] = 0;
G2L["16b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16b"]["Size"] = UDim2.new(1, 0, 0.155, 0);
G2L["16b"]["Position"] = UDim2.new(0, 0, 0.36072, 0);
G2L["16b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16b"]["Name"] = [[VOID]];
G2L["16b"]["LayoutOrder"] = 3;
G2L["16b"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Trigger
G2L["16c"] = Instance.new("TextButton", G2L["16b"]);
G2L["16c"]["TextWrapped"] = true;
G2L["16c"]["BorderSizePixel"] = 0;
G2L["16c"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["16c"]["TextSize"] = 14;
G2L["16c"]["TextScaled"] = true;
G2L["16c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16c"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["16c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["16c"]["BackgroundTransparency"] = 1;
G2L["16c"]["Name"] = [[Trigger]];
G2L["16c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16c"]["Text"] = [[VOID]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Trigger.UITextSizeConstraint
G2L["16d"] = Instance.new("UITextSizeConstraint", G2L["16c"]);
G2L["16d"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Trigger.UIAspectRatioConstraint
G2L["16e"] = Instance.new("UIAspectRatioConstraint", G2L["16c"]);
G2L["16e"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Toggle
G2L["16f"] = Instance.new("TextLabel", G2L["16b"]);
G2L["16f"]["BorderSizePixel"] = 0;
G2L["16f"]["TextSize"] = 14;
G2L["16f"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["16f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["16f"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16f"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["16f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16f"]["Text"] = [[]];
G2L["16f"]["Name"] = [[Toggle]];
G2L["16f"]["Position"] = UDim2.new(0.883, 0, 0.158, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Toggle.UICorner
G2L["170"] = Instance.new("UICorner", G2L["16f"]);
G2L["170"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Toggle.UIAspectRatioConstraint
G2L["171"] = Instance.new("UIAspectRatioConstraint", G2L["16f"]);
G2L["171"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.UIAspectRatioConstraint
G2L["172"] = Instance.new("UIAspectRatioConstraint", G2L["16b"]);
G2L["172"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.UIPadding
G2L["173"] = Instance.new("UIPadding", G2L["140"]);
G2L["173"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock
G2L["174"] = Instance.new("ScrollingFrame", G2L["c"]);
G2L["174"]["Visible"] = false;
G2L["174"]["Active"] = true;
G2L["174"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["174"]["BorderSizePixel"] = 0;
G2L["174"]["CanvasSize"] = UDim2.new(0, 0, 2.5, 0);
G2L["174"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["174"]["Name"] = [[AimLock]];
G2L["174"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["174"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["174"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["174"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["174"]["ScrollBarThickness"] = 0;
G2L["174"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock
G2L["175"] = Instance.new("Frame", G2L["174"]);
G2L["175"]["BorderSizePixel"] = 0;
G2L["175"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["175"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["175"]["Size"] = UDim2.new(0.90639, 0, 0.77882, 0);
G2L["175"]["Position"] = UDim2.new(0.0468, 0, 0, 0);
G2L["175"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["175"]["Name"] = [[AimLock]];
G2L["175"]["LayoutOrder"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.UICorner
G2L["176"] = Instance.new("UICorner", G2L["175"]);
G2L["176"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Title
G2L["177"] = Instance.new("TextLabel", G2L["175"]);
G2L["177"]["TextWrapped"] = true;
G2L["177"]["BorderSizePixel"] = 0;
G2L["177"]["TextSize"] = 14;
G2L["177"]["TextScaled"] = true;
G2L["177"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["177"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["177"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["177"]["BackgroundTransparency"] = 1;
G2L["177"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["177"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["177"]["Text"] = [[AIMLOCK]];
G2L["177"]["Name"] = [[Title]];
G2L["177"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Title.UIAspectRatioConstraint
G2L["178"] = Instance.new("UIAspectRatioConstraint", G2L["177"]);
G2L["178"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.UIGradient
G2L["179"] = Instance.new("UIGradient", G2L["175"]);
G2L["179"]["Rotation"] = 90;
G2L["179"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK
G2L["17a"] = Instance.new("Frame", G2L["175"]);
G2L["17a"]["BorderSizePixel"] = 0;
G2L["17a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17a"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["17a"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["17a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17a"]["Name"] = [[AIMLOCK]];
G2L["17a"]["LayoutOrder"] = 1;
G2L["17a"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Toggle
G2L["17b"] = Instance.new("TextLabel", G2L["17a"]);
G2L["17b"]["BorderSizePixel"] = 0;
G2L["17b"]["TextSize"] = 14;
G2L["17b"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["17b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17b"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17b"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["17b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17b"]["Text"] = [[]];
G2L["17b"]["Name"] = [[Toggle]];
G2L["17b"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Toggle.UICorner
G2L["17c"] = Instance.new("UICorner", G2L["17b"]);
G2L["17c"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Toggle.UIAspectRatioConstraint
G2L["17d"] = Instance.new("UIAspectRatioConstraint", G2L["17b"]);
G2L["17d"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.UIAspectRatioConstraint
G2L["17e"] = Instance.new("UIAspectRatioConstraint", G2L["17a"]);
G2L["17e"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.KeyBind
G2L["17f"] = Instance.new("TextButton", G2L["17a"]);
G2L["17f"]["TextWrapped"] = true;
G2L["17f"]["BorderSizePixel"] = 0;
G2L["17f"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["17f"]["TextSize"] = 14;
G2L["17f"]["TextScaled"] = true;
G2L["17f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17f"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17f"]["ZIndex"] = 2;
G2L["17f"]["Size"] = UDim2.new(0.30638, 0, 1, 0);
G2L["17f"]["BackgroundTransparency"] = 1;
G2L["17f"]["Name"] = [[KeyBind]];
G2L["17f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17f"]["Text"] = [[C]];
G2L["17f"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.KeyBind.UITextSizeConstraint
G2L["180"] = Instance.new("UITextSizeConstraint", G2L["17f"]);
G2L["180"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Trigger
G2L["181"] = Instance.new("TextButton", G2L["17a"]);
G2L["181"]["TextWrapped"] = true;
G2L["181"]["BorderSizePixel"] = 0;
G2L["181"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["181"]["TextSize"] = 14;
G2L["181"]["TextScaled"] = true;
G2L["181"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["181"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["181"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["181"]["BackgroundTransparency"] = 1;
G2L["181"]["Name"] = [[Trigger]];
G2L["181"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["181"]["Text"] = [[AIMLOCK]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Trigger.UITextSizeConstraint
G2L["182"] = Instance.new("UITextSizeConstraint", G2L["181"]);
G2L["182"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Trigger.UIAspectRatioConstraint
G2L["183"] = Instance.new("UIAspectRatioConstraint", G2L["181"]);
G2L["183"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.UIListLayout
G2L["184"] = Instance.new("UIListLayout", G2L["175"]);
G2L["184"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK
G2L["185"] = Instance.new("Frame", G2L["175"]);
G2L["185"]["BorderSizePixel"] = 0;
G2L["185"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["185"]["Size"] = UDim2.new(1, 0, 0.36872, 0);
G2L["185"]["Position"] = UDim2.new(0, 0, 0.38763, 0);
G2L["185"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["185"]["Name"] = [[CAMERALOCK]];
G2L["185"]["LayoutOrder"] = 5;
G2L["185"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Trigger
G2L["186"] = Instance.new("TextButton", G2L["185"]);
G2L["186"]["TextWrapped"] = true;
G2L["186"]["BorderSizePixel"] = 0;
G2L["186"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["186"]["TextSize"] = 14;
G2L["186"]["TextScaled"] = true;
G2L["186"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["186"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["186"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["186"]["BackgroundTransparency"] = 1;
G2L["186"]["Name"] = [[Trigger]];
G2L["186"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["186"]["Text"] = [[CAMERA LOCK]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Trigger.UITextSizeConstraint
G2L["187"] = Instance.new("UITextSizeConstraint", G2L["186"]);
G2L["187"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Trigger.UIAspectRatioConstraint
G2L["188"] = Instance.new("UIAspectRatioConstraint", G2L["186"]);
G2L["188"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame
G2L["189"] = Instance.new("Frame", G2L["185"]);
G2L["189"]["Visible"] = false;
G2L["189"]["ZIndex"] = 2;
G2L["189"]["BorderSizePixel"] = 0;
G2L["189"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 0);
G2L["189"]["Size"] = UDim2.new(1, 0, 2.57035, 0);
G2L["189"]["Position"] = UDim2.new(0, 0, 0.4, 0);
G2L["189"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["189"]["Name"] = [[DropDownFrame]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling
G2L["18a"] = Instance.new("ScrollingFrame", G2L["189"]);
G2L["18a"]["Active"] = true;
G2L["18a"]["ZIndex"] = 2;
G2L["18a"]["BorderSizePixel"] = 0;
G2L["18a"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 0);
G2L["18a"]["Name"] = [[DropDownScrolling]];
G2L["18a"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["18a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["18a"]["ScrollBarImageColor3"] = Color3.fromRGB(255, 0, 0);
G2L["18a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18a"]["ScrollBarThickness"] = 4;
G2L["18a"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.UIListLayout
G2L["18b"] = Instance.new("UIListLayout", G2L["18a"]);
G2L["18b"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.HumanoidRootPart
G2L["18c"] = Instance.new("TextButton", G2L["18a"]);
G2L["18c"]["TextWrapped"] = true;
G2L["18c"]["BorderSizePixel"] = 0;
G2L["18c"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["18c"]["TextSize"] = 14;
G2L["18c"]["TextScaled"] = true;
G2L["18c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18c"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18c"]["ZIndex"] = 2;
G2L["18c"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["18c"]["BackgroundTransparency"] = 1;
G2L["18c"]["LayoutOrder"] = 1;
G2L["18c"]["Name"] = [[HumanoidRootPart]];
G2L["18c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18c"]["Text"] = [[HumanoidRootPart]];
G2L["18c"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.HumanoidRootPart.UIAspectRatioConstraint
G2L["18d"] = Instance.new("UIAspectRatioConstraint", G2L["18c"]);
G2L["18d"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.UpperTorso
G2L["18e"] = Instance.new("TextButton", G2L["18a"]);
G2L["18e"]["TextWrapped"] = true;
G2L["18e"]["BorderSizePixel"] = 0;
G2L["18e"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["18e"]["TextSize"] = 14;
G2L["18e"]["TextScaled"] = true;
G2L["18e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18e"]["ZIndex"] = 2;
G2L["18e"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["18e"]["BackgroundTransparency"] = 1;
G2L["18e"]["LayoutOrder"] = 2;
G2L["18e"]["Name"] = [[UpperTorso]];
G2L["18e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18e"]["Text"] = [[UpperTorso]];
G2L["18e"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.UpperTorso.UIAspectRatioConstraint
G2L["18f"] = Instance.new("UIAspectRatioConstraint", G2L["18e"]);
G2L["18f"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.LowerTorso
G2L["190"] = Instance.new("TextButton", G2L["18a"]);
G2L["190"]["TextWrapped"] = true;
G2L["190"]["BorderSizePixel"] = 0;
G2L["190"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["190"]["TextSize"] = 14;
G2L["190"]["TextScaled"] = true;
G2L["190"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["190"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["190"]["ZIndex"] = 2;
G2L["190"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["190"]["BackgroundTransparency"] = 1;
G2L["190"]["LayoutOrder"] = 3;
G2L["190"]["Name"] = [[LowerTorso]];
G2L["190"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["190"]["Text"] = [[LowerTorso]];
G2L["190"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.LowerTorso.UIAspectRatioConstraint
G2L["191"] = Instance.new("UIAspectRatioConstraint", G2L["190"]);
G2L["191"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.Head
G2L["192"] = Instance.new("TextButton", G2L["18a"]);
G2L["192"]["TextWrapped"] = true;
G2L["192"]["BorderSizePixel"] = 0;
G2L["192"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["192"]["TextSize"] = 14;
G2L["192"]["TextScaled"] = true;
G2L["192"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["192"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["192"]["ZIndex"] = 2;
G2L["192"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["192"]["BackgroundTransparency"] = 1;
G2L["192"]["Name"] = [[Head]];
G2L["192"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["192"]["Text"] = [[Head]];
G2L["192"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.Head.UIAspectRatioConstraint
G2L["193"] = Instance.new("UIAspectRatioConstraint", G2L["192"]);
G2L["193"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.UIAspectRatioConstraint
G2L["194"] = Instance.new("UIAspectRatioConstraint", G2L["18a"]);
G2L["194"]["AspectRatio"] = 5.42583;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.UICorner
G2L["195"] = Instance.new("UICorner", G2L["189"]);
G2L["195"]["CornerRadius"] = UDim.new(0.1, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.UIAspectRatioConstraint
G2L["196"] = Instance.new("UIAspectRatioConstraint", G2L["189"]);
G2L["196"]["AspectRatio"] = 5.42583;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.LOCKON
G2L["197"] = Instance.new("TextLabel", G2L["185"]);
G2L["197"]["TextWrapped"] = true;
G2L["197"]["BorderSizePixel"] = 0;
G2L["197"]["TextSize"] = 14;
G2L["197"]["TextScaled"] = true;
G2L["197"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["197"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["197"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["197"]["BackgroundTransparency"] = 1;
G2L["197"]["Size"] = UDim2.new(1.00022, 0, 0.93111, 0);
G2L["197"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["197"]["Text"] = [[Head]];
G2L["197"]["Name"] = [[LOCKON]];
G2L["197"]["Position"] = UDim2.new(-0.00365, 0, 0.46407, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.LOCKON.UIAspectRatioConstraint
G2L["198"] = Instance.new("UIAspectRatioConstraint", G2L["197"]);
G2L["198"]["AspectRatio"] = 14.98145;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Arrow
G2L["199"] = Instance.new("TextLabel", G2L["185"]);
G2L["199"]["TextWrapped"] = true;
G2L["199"]["BorderSizePixel"] = 0;
G2L["199"]["TextSize"] = 14;
G2L["199"]["TextScaled"] = true;
G2L["199"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["199"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["199"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["199"]["BackgroundTransparency"] = 1;
G2L["199"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["199"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["199"]["Text"] = [[<]];
G2L["199"]["Name"] = [[Arrow]];
G2L["199"]["Position"] = UDim2.new(0.88346, 0, 0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Arrow.UICorner
G2L["19a"] = Instance.new("UICorner", G2L["199"]);
G2L["19a"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Arrow.UIAspectRatioConstraint
G2L["19b"] = Instance.new("UIAspectRatioConstraint", G2L["199"]);
G2L["19b"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.UIAspectRatioConstraint
G2L["19c"] = Instance.new("UIAspectRatioConstraint", G2L["185"]);
G2L["19c"]["AspectRatio"] = 5.87411;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE
G2L["19d"] = Instance.new("Frame", G2L["175"]);
G2L["19d"]["BorderSizePixel"] = 0;
G2L["19d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19d"]["Size"] = UDim2.new(1, 0, 0.36872, 0);
G2L["19d"]["Position"] = UDim2.new(0, 0, 0.38763, 0);
G2L["19d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["19d"]["Name"] = [[AIMLOCKTOGGLE]];
G2L["19d"]["LayoutOrder"] = 6;
G2L["19d"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Trigger
G2L["19e"] = Instance.new("TextButton", G2L["19d"]);
G2L["19e"]["TextWrapped"] = true;
G2L["19e"]["BorderSizePixel"] = 0;
G2L["19e"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["19e"]["TextSize"] = 14;
G2L["19e"]["TextScaled"] = true;
G2L["19e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["19e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["19e"]["BackgroundTransparency"] = 1;
G2L["19e"]["Name"] = [[Trigger]];
G2L["19e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["19e"]["Text"] = [[AIMLOCK TRIGGER MODE]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Trigger.UITextSizeConstraint
G2L["19f"] = Instance.new("UITextSizeConstraint", G2L["19e"]);
G2L["19f"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Trigger.UIAspectRatioConstraint
G2L["1a0"] = Instance.new("UIAspectRatioConstraint", G2L["19e"]);
G2L["1a0"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame
G2L["1a1"] = Instance.new("Frame", G2L["19d"]);
G2L["1a1"]["Visible"] = false;
G2L["1a1"]["ZIndex"] = 2;
G2L["1a1"]["BorderSizePixel"] = 0;
G2L["1a1"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 0);
G2L["1a1"]["Size"] = UDim2.new(1, 0, 2.57035, 0);
G2L["1a1"]["Position"] = UDim2.new(0.00022, 0, 0.4, 0);
G2L["1a1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a1"]["Name"] = [[DropDownFrame]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling
G2L["1a2"] = Instance.new("ScrollingFrame", G2L["1a1"]);
G2L["1a2"]["Active"] = true;
G2L["1a2"]["ZIndex"] = 2;
G2L["1a2"]["BorderSizePixel"] = 0;
G2L["1a2"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 0);
G2L["1a2"]["Name"] = [[DropDownScrolling]];
G2L["1a2"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["1a2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1a2"]["ScrollBarImageColor3"] = Color3.fromRGB(255, 0, 0);
G2L["1a2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a2"]["ScrollBarThickness"] = 4;
G2L["1a2"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.UIListLayout
G2L["1a3"] = Instance.new("UIListLayout", G2L["1a2"]);
G2L["1a3"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.Toggle
G2L["1a4"] = Instance.new("TextButton", G2L["1a2"]);
G2L["1a4"]["TextWrapped"] = true;
G2L["1a4"]["BorderSizePixel"] = 0;
G2L["1a4"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["1a4"]["TextSize"] = 14;
G2L["1a4"]["TextScaled"] = true;
G2L["1a4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a4"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a4"]["ZIndex"] = 2;
G2L["1a4"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["1a4"]["BackgroundTransparency"] = 1;
G2L["1a4"]["LayoutOrder"] = 1;
G2L["1a4"]["Name"] = [[Toggle]];
G2L["1a4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a4"]["Text"] = [[TOGGLE]];
G2L["1a4"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.Toggle.UIAspectRatioConstraint
G2L["1a5"] = Instance.new("UIAspectRatioConstraint", G2L["1a4"]);
G2L["1a5"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.Hold
G2L["1a6"] = Instance.new("TextButton", G2L["1a2"]);
G2L["1a6"]["TextWrapped"] = true;
G2L["1a6"]["BorderSizePixel"] = 0;
G2L["1a6"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["1a6"]["TextSize"] = 14;
G2L["1a6"]["TextScaled"] = true;
G2L["1a6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a6"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a6"]["ZIndex"] = 2;
G2L["1a6"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["1a6"]["BackgroundTransparency"] = 1;
G2L["1a6"]["Name"] = [[Hold]];
G2L["1a6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a6"]["Text"] = [[HOLD]];
G2L["1a6"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.Hold.UIAspectRatioConstraint
G2L["1a7"] = Instance.new("UIAspectRatioConstraint", G2L["1a6"]);
G2L["1a7"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.UIAspectRatioConstraint
G2L["1a8"] = Instance.new("UIAspectRatioConstraint", G2L["1a2"]);
G2L["1a8"]["AspectRatio"] = 5.42583;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.UICorner
G2L["1a9"] = Instance.new("UICorner", G2L["1a1"]);
G2L["1a9"]["CornerRadius"] = UDim.new(0.1, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.UIAspectRatioConstraint
G2L["1aa"] = Instance.new("UIAspectRatioConstraint", G2L["1a1"]);
G2L["1aa"]["AspectRatio"] = 5.42583;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.MODE
G2L["1ab"] = Instance.new("TextLabel", G2L["19d"]);
G2L["1ab"]["TextWrapped"] = true;
G2L["1ab"]["BorderSizePixel"] = 0;
G2L["1ab"]["TextSize"] = 14;
G2L["1ab"]["TextScaled"] = true;
G2L["1ab"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ab"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1ab"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["1ab"]["BackgroundTransparency"] = 1;
G2L["1ab"]["Size"] = UDim2.new(1.00022, 0, 0.93111, 0);
G2L["1ab"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ab"]["Text"] = [[HOLD]];
G2L["1ab"]["Name"] = [[MODE]];
G2L["1ab"]["Position"] = UDim2.new(-0.00365, 0, 0.46407, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.MODE.UIAspectRatioConstraint
G2L["1ac"] = Instance.new("UIAspectRatioConstraint", G2L["1ab"]);
G2L["1ac"]["AspectRatio"] = 14.98145;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Arrow
G2L["1ad"] = Instance.new("TextLabel", G2L["19d"]);
G2L["1ad"]["TextWrapped"] = true;
G2L["1ad"]["BorderSizePixel"] = 0;
G2L["1ad"]["TextSize"] = 14;
G2L["1ad"]["TextScaled"] = true;
G2L["1ad"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1ad"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1ad"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1ad"]["BackgroundTransparency"] = 1;
G2L["1ad"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1ad"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ad"]["Text"] = [[<]];
G2L["1ad"]["Name"] = [[Arrow]];
G2L["1ad"]["Position"] = UDim2.new(0.88346, 0, 0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Arrow.UICorner
G2L["1ae"] = Instance.new("UICorner", G2L["1ad"]);
G2L["1ae"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Arrow.UIAspectRatioConstraint
G2L["1af"] = Instance.new("UIAspectRatioConstraint", G2L["1ad"]);
G2L["1af"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.UIAspectRatioConstraint
G2L["1b0"] = Instance.new("UIAspectRatioConstraint", G2L["19d"]);
G2L["1b0"]["AspectRatio"] = 5.87411;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT
G2L["1b1"] = Instance.new("Frame", G2L["175"]);
G2L["1b1"]["BorderSizePixel"] = 0;
G2L["1b1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b1"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["1b1"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["1b1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b1"]["Name"] = [[ANTIGROUNDSHOOT]];
G2L["1b1"]["LayoutOrder"] = 4;
G2L["1b1"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Trigger
G2L["1b2"] = Instance.new("TextButton", G2L["1b1"]);
G2L["1b2"]["TextWrapped"] = true;
G2L["1b2"]["BorderSizePixel"] = 0;
G2L["1b2"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1b2"]["TextSize"] = 14;
G2L["1b2"]["TextScaled"] = true;
G2L["1b2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b2"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1b2"]["BackgroundTransparency"] = 1;
G2L["1b2"]["Name"] = [[Trigger]];
G2L["1b2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b2"]["Text"] = [[ANTI SHOOT DOWNED]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Trigger.UITextSizeConstraint
G2L["1b3"] = Instance.new("UITextSizeConstraint", G2L["1b2"]);
G2L["1b3"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Trigger.UIAspectRatioConstraint
G2L["1b4"] = Instance.new("UIAspectRatioConstraint", G2L["1b2"]);
G2L["1b4"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Toggle
G2L["1b5"] = Instance.new("TextLabel", G2L["1b1"]);
G2L["1b5"]["BorderSizePixel"] = 0;
G2L["1b5"]["TextSize"] = 14;
G2L["1b5"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1b5"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b5"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b5"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1b5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b5"]["Text"] = [[]];
G2L["1b5"]["Name"] = [[Toggle]];
G2L["1b5"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Toggle.UICorner
G2L["1b6"] = Instance.new("UICorner", G2L["1b5"]);
G2L["1b6"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Toggle.UIAspectRatioConstraint
G2L["1b7"] = Instance.new("UIAspectRatioConstraint", G2L["1b5"]);
G2L["1b7"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.UIAspectRatioConstraint
G2L["1b8"] = Instance.new("UIAspectRatioConstraint", G2L["1b1"]);
G2L["1b8"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.UIAspectRatioConstraint
G2L["1b9"] = Instance.new("UIAspectRatioConstraint", G2L["175"]);
G2L["1b9"]["AspectRatio"] = 1.88;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK
G2L["1ba"] = Instance.new("Frame", G2L["175"]);
G2L["1ba"]["BorderSizePixel"] = 0;
G2L["1ba"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ba"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["1ba"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["1ba"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ba"]["Name"] = [[CREWCHECK]];
G2L["1ba"]["LayoutOrder"] = 2;
G2L["1ba"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Trigger
G2L["1bb"] = Instance.new("TextButton", G2L["1ba"]);
G2L["1bb"]["TextWrapped"] = true;
G2L["1bb"]["BorderSizePixel"] = 0;
G2L["1bb"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1bb"]["TextSize"] = 14;
G2L["1bb"]["TextScaled"] = true;
G2L["1bb"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1bb"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1bb"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1bb"]["BackgroundTransparency"] = 1;
G2L["1bb"]["Name"] = [[Trigger]];
G2L["1bb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1bb"]["Text"] = [[CREW CHECK]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Trigger.UITextSizeConstraint
G2L["1bc"] = Instance.new("UITextSizeConstraint", G2L["1bb"]);
G2L["1bc"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Trigger.UIAspectRatioConstraint
G2L["1bd"] = Instance.new("UIAspectRatioConstraint", G2L["1bb"]);
G2L["1bd"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Toggle
G2L["1be"] = Instance.new("TextLabel", G2L["1ba"]);
G2L["1be"]["BorderSizePixel"] = 0;
G2L["1be"]["TextSize"] = 14;
G2L["1be"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1be"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1be"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1be"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1be"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1be"]["Text"] = [[]];
G2L["1be"]["Name"] = [[Toggle]];
G2L["1be"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Toggle.UICorner
G2L["1bf"] = Instance.new("UICorner", G2L["1be"]);
G2L["1bf"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Toggle.UIAspectRatioConstraint
G2L["1c0"] = Instance.new("UIAspectRatioConstraint", G2L["1be"]);
G2L["1c0"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.UIAspectRatioConstraint
G2L["1c1"] = Instance.new("UIAspectRatioConstraint", G2L["1ba"]);
G2L["1c1"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK
G2L["1c2"] = Instance.new("Frame", G2L["175"]);
G2L["1c2"]["BorderSizePixel"] = 0;
G2L["1c2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c2"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["1c2"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["1c2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c2"]["Name"] = [[FRIENDCHECK]];
G2L["1c2"]["LayoutOrder"] = 3;
G2L["1c2"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Trigger
G2L["1c3"] = Instance.new("TextButton", G2L["1c2"]);
G2L["1c3"]["TextWrapped"] = true;
G2L["1c3"]["BorderSizePixel"] = 0;
G2L["1c3"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1c3"]["TextSize"] = 14;
G2L["1c3"]["TextScaled"] = true;
G2L["1c3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c3"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c3"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1c3"]["BackgroundTransparency"] = 1;
G2L["1c3"]["Name"] = [[Trigger]];
G2L["1c3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c3"]["Text"] = [[FRIEND CHECK]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Trigger.UITextSizeConstraint
G2L["1c4"] = Instance.new("UITextSizeConstraint", G2L["1c3"]);
G2L["1c4"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Trigger.UIAspectRatioConstraint
G2L["1c5"] = Instance.new("UIAspectRatioConstraint", G2L["1c3"]);
G2L["1c5"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Toggle
G2L["1c6"] = Instance.new("TextLabel", G2L["1c2"]);
G2L["1c6"]["BorderSizePixel"] = 0;
G2L["1c6"]["TextSize"] = 14;
G2L["1c6"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1c6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c6"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c6"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1c6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c6"]["Text"] = [[]];
G2L["1c6"]["Name"] = [[Toggle]];
G2L["1c6"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Toggle.UICorner
G2L["1c7"] = Instance.new("UICorner", G2L["1c6"]);
G2L["1c7"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Toggle.UIAspectRatioConstraint
G2L["1c8"] = Instance.new("UIAspectRatioConstraint", G2L["1c6"]);
G2L["1c8"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.UIAspectRatioConstraint
G2L["1c9"] = Instance.new("UIAspectRatioConstraint", G2L["1c2"]);
G2L["1c9"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Togglers
G2L["1ca"] = Instance.new("LocalScript", G2L["175"]);
G2L["1ca"]["Name"] = [[Togglers]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Aimlock
G2L["1cb"] = Instance.new("LocalScript", G2L["175"]);
G2L["1cb"]["Name"] = [[Aimlock]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Keybind
G2L["1cc"] = Instance.new("LocalScript", G2L["175"]);
G2L["1cc"]["Name"] = [[Keybind]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Dropdown
G2L["1cd"] = Instance.new("LocalScript", G2L["175"]);
G2L["1cd"]["Name"] = [[Dropdown]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.UIListLayout
G2L["1ce"] = Instance.new("UIListLayout", G2L["174"]);
G2L["1ce"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["1ce"]["Padding"] = UDim.new(0.05, 0);
G2L["1ce"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.UIAspectRatioConstraint
G2L["1cf"] = Instance.new("UIAspectRatioConstraint", G2L["174"]);
G2L["1cf"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.UIPadding
G2L["1d0"] = Instance.new("UIPadding", G2L["174"]);
G2L["1d0"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.SideFrame
G2L["1d1"] = Instance.new("Frame", G2L["3"]);
G2L["1d1"]["BorderSizePixel"] = 0;
G2L["1d1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d1"]["Size"] = UDim2.new(0.20659, 0, 0.8892, 0);
G2L["1d1"]["Position"] = UDim2.new(0, 0, 0.1108, 0);
G2L["1d1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d1"]["Name"] = [[SideFrame]];
G2L["1d1"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.SideFrame.LocalPlayer
G2L["1d2"] = Instance.new("TextButton", G2L["1d1"]);
G2L["1d2"]["TextWrapped"] = true;
G2L["1d2"]["BorderSizePixel"] = 0;
G2L["1d2"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["1d2"]["TextSize"] = 1;
G2L["1d2"]["TextScaled"] = true;
G2L["1d2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d2"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1d2"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["1d2"]["BackgroundTransparency"] = 1;
G2L["1d2"]["Name"] = [[LocalPlayer]];
G2L["1d2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d2"]["Text"] = [[LOCAL PLAYER]];
G2L["1d2"]["Position"] = UDim2.new(0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.SideFrame.LocalPlayer.UITextSizeConstraint
G2L["1d3"] = Instance.new("UITextSizeConstraint", G2L["1d2"]);
G2L["1d3"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.LocalPlayer.UIAspectRatioConstraint
G2L["1d4"] = Instance.new("UIAspectRatioConstraint", G2L["1d2"]);
G2L["1d4"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.UIListLayout
G2L["1d5"] = Instance.new("UIListLayout", G2L["1d1"]);
G2L["1d5"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.SideFrame.Player
G2L["1d6"] = Instance.new("TextButton", G2L["1d1"]);
G2L["1d6"]["TextWrapped"] = true;
G2L["1d6"]["BorderSizePixel"] = 0;
G2L["1d6"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["1d6"]["TextSize"] = 1;
G2L["1d6"]["TextScaled"] = true;
G2L["1d6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d6"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1d6"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["1d6"]["BackgroundTransparency"] = 1;
G2L["1d6"]["LayoutOrder"] = 1;
G2L["1d6"]["Name"] = [[Player]];
G2L["1d6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d6"]["Text"] = [[PLAYER]];
G2L["1d6"]["Position"] = UDim2.new(0, 0, 0.28565, 0);


-- StarterGui.havoc.MainFrame.SideFrame.Player.UITextSizeConstraint
G2L["1d7"] = Instance.new("UITextSizeConstraint", G2L["1d6"]);
G2L["1d7"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.Player.UIAspectRatioConstraint
G2L["1d8"] = Instance.new("UIAspectRatioConstraint", G2L["1d6"]);
G2L["1d8"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.AutoSettings
G2L["1d9"] = Instance.new("TextButton", G2L["1d1"]);
G2L["1d9"]["TextWrapped"] = true;
G2L["1d9"]["BorderSizePixel"] = 0;
G2L["1d9"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["1d9"]["TextSize"] = 1;
G2L["1d9"]["TextScaled"] = true;
G2L["1d9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d9"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1d9"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["1d9"]["BackgroundTransparency"] = 1;
G2L["1d9"]["LayoutOrder"] = 2;
G2L["1d9"]["Name"] = [[AutoSettings]];
G2L["1d9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d9"]["Text"] = [[AutoSettings]];
G2L["1d9"]["Position"] = UDim2.new(0, 0, 0.5713, 0);


-- StarterGui.havoc.MainFrame.SideFrame.AutoSettings.UITextSizeConstraint
G2L["1da"] = Instance.new("UITextSizeConstraint", G2L["1d9"]);
G2L["1da"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.AutoSettings.UIAspectRatioConstraint
G2L["1db"] = Instance.new("UIAspectRatioConstraint", G2L["1d9"]);
G2L["1db"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.Teleport
G2L["1dc"] = Instance.new("TextButton", G2L["1d1"]);
G2L["1dc"]["TextWrapped"] = true;
G2L["1dc"]["BorderSizePixel"] = 0;
G2L["1dc"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["1dc"]["TextSize"] = 1;
G2L["1dc"]["TextScaled"] = true;
G2L["1dc"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1dc"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1dc"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["1dc"]["BackgroundTransparency"] = 1;
G2L["1dc"]["LayoutOrder"] = 3;
G2L["1dc"]["Name"] = [[Teleport]];
G2L["1dc"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1dc"]["Text"] = [[TELEPORT]];
G2L["1dc"]["Position"] = UDim2.new(0, 0, 0.71413, 0);


-- StarterGui.havoc.MainFrame.SideFrame.Teleport.UITextSizeConstraint
G2L["1dd"] = Instance.new("UITextSizeConstraint", G2L["1dc"]);
G2L["1dd"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.Teleport.UIAspectRatioConstraint
G2L["1de"] = Instance.new("UIAspectRatioConstraint", G2L["1dc"]);
G2L["1de"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.Settings
G2L["1df"] = Instance.new("TextButton", G2L["1d1"]);
G2L["1df"]["TextWrapped"] = true;
G2L["1df"]["BorderSizePixel"] = 0;
G2L["1df"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["1df"]["TextSize"] = 1;
G2L["1df"]["TextScaled"] = true;
G2L["1df"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1df"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1df"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["1df"]["BackgroundTransparency"] = 1;
G2L["1df"]["LayoutOrder"] = 5;
G2L["1df"]["Name"] = [[Settings]];
G2L["1df"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1df"]["Text"] = [[SETTINGS]];
G2L["1df"]["Position"] = UDim2.new(0, 0, 0.85695, 0);


-- StarterGui.havoc.MainFrame.SideFrame.Settings.UITextSizeConstraint
G2L["1e0"] = Instance.new("UITextSizeConstraint", G2L["1df"]);
G2L["1e0"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.Settings.UIAspectRatioConstraint
G2L["1e1"] = Instance.new("UIAspectRatioConstraint", G2L["1df"]);
G2L["1e1"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.LocalScript
G2L["1e2"] = Instance.new("LocalScript", G2L["1d1"]);



-- StarterGui.havoc.MainFrame.SideFrame.UIAspectRatioConstraint
G2L["1e3"] = Instance.new("UIAspectRatioConstraint", G2L["1d1"]);
G2L["1e3"]["AspectRatio"] = 0.42061;


-- StarterGui.havoc.MainFrame.SideFrame.Orbit
G2L["1e4"] = Instance.new("TextButton", G2L["1d1"]);
G2L["1e4"]["TextWrapped"] = true;
G2L["1e4"]["BorderSizePixel"] = 0;
G2L["1e4"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["1e4"]["TextSize"] = 1;
G2L["1e4"]["TextScaled"] = true;
G2L["1e4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e4"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1e4"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["1e4"]["BackgroundTransparency"] = 1;
G2L["1e4"]["LayoutOrder"] = 1;
G2L["1e4"]["Name"] = [[Orbit]];
G2L["1e4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e4"]["Text"] = [[ORBIT]];
G2L["1e4"]["Position"] = UDim2.new(0, 0, 0.42848, 0);


-- StarterGui.havoc.MainFrame.SideFrame.Orbit.UITextSizeConstraint
G2L["1e5"] = Instance.new("UITextSizeConstraint", G2L["1e4"]);
G2L["1e5"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.Orbit.UIAspectRatioConstraint
G2L["1e6"] = Instance.new("UIAspectRatioConstraint", G2L["1e4"]);
G2L["1e6"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.AimLock
G2L["1e7"] = Instance.new("TextButton", G2L["1d1"]);
G2L["1e7"]["TextWrapped"] = true;
G2L["1e7"]["BorderSizePixel"] = 0;
G2L["1e7"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["1e7"]["TextSize"] = 1;
G2L["1e7"]["TextScaled"] = true;
G2L["1e7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e7"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1e7"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["1e7"]["BackgroundTransparency"] = 1;
G2L["1e7"]["LayoutOrder"] = 4;
G2L["1e7"]["Name"] = [[AimLock]];
G2L["1e7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e7"]["Text"] = [[AIMLOCK]];
G2L["1e7"]["Position"] = UDim2.new(0, 0, 0.14283, 0);


-- StarterGui.havoc.MainFrame.SideFrame.AimLock.UITextSizeConstraint
G2L["1e8"] = Instance.new("UITextSizeConstraint", G2L["1e7"]);
G2L["1e8"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.AimLock.UIAspectRatioConstraint
G2L["1e9"] = Instance.new("UIAspectRatioConstraint", G2L["1e7"]);
G2L["1e9"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.Accent
G2L["1ea"] = Instance.new("Frame", G2L["3"]);
G2L["1ea"]["BorderSizePixel"] = 0;
G2L["1ea"]["BackgroundColor3"] = Color3.fromRGB(69, 0, 0);
G2L["1ea"]["Size"] = UDim2.new(0.002, 0, 0.889, 0);
G2L["1ea"]["Position"] = UDim2.new(0.20659, 0, 0.1108, 0);
G2L["1ea"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ea"]["Name"] = [[Accent]];


-- StarterGui.havoc.MainFrame.Accent.UIAspectRatioConstraint
G2L["1eb"] = Instance.new("UIAspectRatioConstraint", G2L["1ea"]);
G2L["1eb"]["AspectRatio"] = 0.00407;


-- StarterGui.havoc.MainFrame.Accent
G2L["1ec"] = Instance.new("Frame", G2L["3"]);
G2L["1ec"]["BorderSizePixel"] = 0;
G2L["1ec"]["BackgroundColor3"] = Color3.fromRGB(69, 0, 0);
G2L["1ec"]["Size"] = UDim2.new(1, 0, 0.002, 0);
G2L["1ec"]["Position"] = UDim2.new(0, 0, 0.108, 0);
G2L["1ec"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ec"]["Name"] = [[Accent]];


-- StarterGui.havoc.MainFrame.Accent.UIAspectRatioConstraint
G2L["1ed"] = Instance.new("UIAspectRatioConstraint", G2L["1ec"]);
G2L["1ed"]["AspectRatio"] = 905.19946;


-- StarterGui.havoc.MainFrame.Title
G2L["1ee"] = Instance.new("TextLabel", G2L["3"]);
G2L["1ee"]["TextWrapped"] = true;
G2L["1ee"]["BorderSizePixel"] = 0;
G2L["1ee"]["TextSize"] = 14;
G2L["1ee"]["TextScaled"] = true;
G2L["1ee"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ee"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1ee"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["1ee"]["BackgroundTransparency"] = 1;
G2L["1ee"]["Size"] = UDim2.new(0.9985, 0, 0.10803, 0);
G2L["1ee"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ee"]["Text"] = [[HAVOC]];
G2L["1ee"]["Name"] = [[Title]];


-- StarterGui.havoc.MainFrame.Title.UIAspectRatioConstraint
G2L["1ef"] = Instance.new("UIAspectRatioConstraint", G2L["1ee"]);
G2L["1ef"]["AspectRatio"] = 16.73271;


-- StarterGui.havoc.MainFrame.UIAspectRatioConstraint
G2L["1f0"] = Instance.new("UIAspectRatioConstraint", G2L["3"]);
G2L["1f0"]["AspectRatio"] = 1.8104;


-- StarterGui.havoc.MainFrame.Title
G2L["1f1"] = Instance.new("TextLabel", G2L["3"]);
G2L["1f1"]["TextWrapped"] = true;
G2L["1f1"]["BorderSizePixel"] = 0;
G2L["1f1"]["TextSize"] = 14;
G2L["1f1"]["TextScaled"] = true;
G2L["1f1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f1"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1f1"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["1f1"]["BackgroundTransparency"] = 1;
G2L["1f1"]["Size"] = UDim2.new(0.12326, 0, 0.06534, 0);
G2L["1f1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f1"]["Text"] = [[(beta)]];
G2L["1f1"]["Name"] = [[Title]];
G2L["1f1"]["Position"] = UDim2.new(0.59223, 0, 0.0427, 0);


-- StarterGui.havoc.MainFrame.Title.UIAspectRatioConstraint
G2L["1f2"] = Instance.new("UIAspectRatioConstraint", G2L["1f1"]);
G2L["1f2"]["AspectRatio"] = 3.4155;


-- StarterGui.havoc.Lighting
G2L["1f3"] = Instance.new("LocalScript", G2L["1"]);
G2L["1f3"]["Name"] = [[Lighting]];


-- StarterGui.havoc.LoadGlobalTable
G2L["1f4"] = Instance.new("LocalScript", G2L["1"]);
G2L["1f4"]["Name"] = [[LoadGlobalTable]];


-- StarterGui.havoc.MainFrame.Glow.GLOW
local function C_7()
	local script = G2L["7"];
	local imageLabel = script.Parent -- Make sure this script is inside your ImageLabel
	local uiGradient = imageLabel:FindFirstChild("UIGradient")

	-- Define the gradient with alternating red and dark red sections
	uiGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),  -- Bright Red
		ColorSequenceKeypoint.new(0.2, Color3.fromRGB(139, 0, 0)), -- Dark Red
		ColorSequenceKeypoint.new(0.4, Color3.fromRGB(255, 0, 0)), -- Bright Red
		ColorSequenceKeypoint.new(0.6, Color3.fromRGB(139, 0, 0)), -- Dark Red
		ColorSequenceKeypoint.new(0.8, Color3.fromRGB(255, 0, 0)), -- Bright Red
		ColorSequenceKeypoint.new(1, Color3.fromRGB(139, 0, 0))   -- Dark Red
	})

	-- Gradient rotation speed
	local speed = 4

	local function rotateGradient()
		while true do
			uiGradient.Rotation = (uiGradient.Rotation + speed) % 360
			wait(0.03)
		end
	end

	rotateGradient()

end;
task.spawn(C_7);
-- StarterGui.havoc.MainFrame.Drag.DragScript
local function C_a()
	local script = G2L["a"];
	local UIS = game:GetService('UserInputService')
	local frame = script.Parent.Parent
	local dragToggle = nil
	local dragSpeed = 0.05
	local dragStart = nil
	local startPos = nil

	local function updateInput(input)
		local delta = input.Position - dragStart
		local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		game:GetService('TweenService'):Create(frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
	end

	frame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
			dragToggle = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)

	UIS.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			if dragToggle then
				updateInput(input)
			end
		end
	end)
end;
task.spawn(C_a);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Handle
local function C_1d()
	local script = G2L["1d"];
	local TweenService = game:GetService("TweenService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")
	local KeyBindBTN = script.Parent:WaitForChild("KeyBind")

	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
	local userInputService = game:GetService("UserInputService")
	local runService = game:GetService("RunService")

	local activeKeys = {} -- Track currently pressed keys
	local cframeMovementEnabled = false
	local currentKeyBind = Enum.KeyCode.F
	local awaitingKeyBind = false

	-- Function to update the character and humanoidRootPart reference
	local function updateCharacter()
		character = player.Character or player.CharacterAdded:Wait()
		humanoidRootPart = character:WaitForChild("HumanoidRootPart")
	end

	-- Listen for character respawn and update references
	player.CharacterAdded:Connect(function()
		updateCharacter()
	end)

	-- Toggle CFrame movement
	function toggleCFrameMovement(enable)
		if Toggle.BackgroundColor3 == Color3.fromRGB(255,0,0) then
			cframeMovementEnabled = enable
			if not enable then
				activeKeys = {} -- Reset active keys when disabled
			end
		end
	end

	-- Update CFrame movement
	runService.RenderStepped:Connect(function()
		if not cframeMovementEnabled then return end

		local moveDirection = Vector3.new(0, 0, 0)

		-- Update moveDirection based on active keys
		if activeKeys.W then
			moveDirection = moveDirection + Vector3.new(0, 0, 1)
		end
		if activeKeys.S then
			moveDirection = moveDirection + Vector3.new(0, 0, -1)
		end
		if activeKeys.A then
			moveDirection = moveDirection + Vector3.new(-1, 0, 0)
		end
		if activeKeys.D then
			moveDirection = moveDirection + Vector3.new(1, 0, 0)
		end

		-- Normalize and apply camera-relative direction
		if moveDirection.Magnitude > 0 then
			moveDirection = moveDirection.Unit

			local camera = workspace.CurrentCamera
			local cameraCFrame = camera.CFrame
			local lookVector = Vector3.new(cameraCFrame.LookVector.X, 0, cameraCFrame.LookVector.Z).Unit
			local rightVector = Vector3.new(cameraCFrame.RightVector.X, 0, cameraCFrame.RightVector.Z).Unit

			local finalDirection = (lookVector * moveDirection.Z + rightVector * moveDirection.X) * tonumber(script.Parent.Parent:WaitForChild("CFRAMESPEED").SPEED.Text) / 60
			humanoidRootPart.CFrame = humanoidRootPart.CFrame + finalDirection
		end
	end)

	-- Handle key presses
	userInputService.InputBegan:Connect(function(input, processed)
		if awaitingKeyBind then
			currentKeyBind = input.KeyCode
			KeyBindBTN.Text = tostring(currentKeyBind):gsub("Enum.KeyCode.", "")
			awaitingKeyBind = false
			return
		end

		if processed then return end -- Ignore input if processed by chat or GUI

		if input.KeyCode == Enum.KeyCode.W then
			activeKeys.W = true
		elseif input.KeyCode == Enum.KeyCode.S then
			activeKeys.S = true
		elseif input.KeyCode == Enum.KeyCode.A then
			activeKeys.A = true
		elseif input.KeyCode == Enum.KeyCode.D then
			activeKeys.D = true
		elseif input.KeyCode == currentKeyBind then
			toggleCFrameMovement(not cframeMovementEnabled)
		end
	end)

	-- Handle key releases
	userInputService.InputEnded:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.W then
			activeKeys.W = false
		elseif input.KeyCode == Enum.KeyCode.S then
			activeKeys.S = false
		elseif input.KeyCode == Enum.KeyCode.A then
			activeKeys.A = false
		elseif input.KeyCode == Enum.KeyCode.D then
			activeKeys.D = false
		end
	end)

	-- Handle UI toggle button
	TriggerBTN.MouseButton1Up:Connect(function()
		if Toggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			toggleCFrameMovement(false)
		else
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			toggleCFrameMovement(true)
		end
	end)

	-- Handle keybind button
	KeyBindBTN.MouseButton1Click:Connect(function()
		KeyBindBTN.Text = "Press Any Key"
		awaitingKeyBind = true
	end)

end;
task.spawn(C_1d);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Handle
local function C_30()
	local script = G2L["30"];
	local TweenService = game:GetService("TweenService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local HAVOC = getgenv().HAVOC
	local Fly = HAVOC.LocalPlayer.Fly

	local UserInputService = game:GetService("UserInputService")
	local RunService = game:GetService("RunService")

	local Player = game.Players.LocalPlayer
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
	local Humanoid = Character:WaitForChild("Humanoid")
	local Camera = workspace.CurrentCamera

	local FlyTrigger = script.Parent:WaitForChild("Trigger")
	local FlyToggle = script.Parent:WaitForChild("Toggle")
	local KeyBindBTN = script.Parent:WaitForChild("KeyBind")

	local activeKeys = {}
	local flyEnabled = false
	local currentKeyBind = Fly.KeyBind or Enum.KeyCode.H
	local awaitingKeyBind = false

	local function updateCharacter()
		Character = Player.Character or Player.CharacterAdded:Wait()
		HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
		Humanoid = Character:WaitForChild("Humanoid")
	end

	Player.CharacterAdded:Connect(updateCharacter)

	local function toggleFlying(enable)
		if FlyToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			flyEnabled = enable
			if not enable then
				activeKeys = {} 
			end
		end
	end

	RunService.RenderStepped:Connect(function()
		if not flyEnabled then return end

		HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
		HumanoidRootPart.AssemblyAngularVelocity = Vector3.zero

		local moveDirection = Vector3.new(0, 0, 0)

		if activeKeys.W then moveDirection = moveDirection + Vector3.new(0, 0, 1) end
		if activeKeys.S then moveDirection = moveDirection + Vector3.new(0, 0, -1) end
		if activeKeys.A then moveDirection = moveDirection + Vector3.new(-1, 0, 0) end
		if activeKeys.D then moveDirection = moveDirection + Vector3.new(1, 0, 0) end
		if activeKeys.Space then moveDirection = moveDirection + Vector3.new(0, 1, 0) end
		if activeKeys.LeftShift then moveDirection = moveDirection + Vector3.new(0, -1, 0) end

		if moveDirection.Magnitude > 0 then
			moveDirection = moveDirection.Unit * (script.Parent.Parent.FLYSPEED.SPEED.Text / 60)
			local cameraCFrame = Camera.CFrame
			local finalDirection = (cameraCFrame.LookVector * moveDirection.Z + cameraCFrame.RightVector * moveDirection.X) + Vector3.new(0, moveDirection.Y, 0)
			HumanoidRootPart.AssemblyLinearVelocity = finalDirection * 60
		else
			local currentVelocity = HumanoidRootPart.AssemblyLinearVelocity
			HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, currentVelocity.Y, 0)
		end
	end)

	UserInputService.InputBegan:Connect(function(input, processed)
		if awaitingKeyBind then
			currentKeyBind = input.KeyCode
			KeyBindBTN.Text = tostring(currentKeyBind):gsub("Enum.KeyCode.", "")
			awaitingKeyBind = false
			return
		end

		if processed then return end

		if input.KeyCode == Enum.KeyCode.W then activeKeys.W = true end
		if input.KeyCode == Enum.KeyCode.S then activeKeys.S = true end
		if input.KeyCode == Enum.KeyCode.A then activeKeys.A = true end
		if input.KeyCode == Enum.KeyCode.D then activeKeys.D = true end
		if input.KeyCode == Enum.KeyCode.Space then activeKeys.Space = true end
		if input.KeyCode == Enum.KeyCode.LeftShift then activeKeys.LeftShift = true end
		if input.KeyCode == currentKeyBind then toggleFlying(not flyEnabled) end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.W then activeKeys.W = false end
		if input.KeyCode == Enum.KeyCode.S then activeKeys.S = false end
		if input.KeyCode == Enum.KeyCode.A then activeKeys.A = false end
		if input.KeyCode == Enum.KeyCode.D then activeKeys.D = false end
		if input.KeyCode == Enum.KeyCode.Space then activeKeys.Space = false end
		if input.KeyCode == Enum.KeyCode.LeftShift then activeKeys.LeftShift = false end
	end)

	FlyTrigger.MouseButton1Up:Connect(function()
		if FlyToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(FlyToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			toggleFlying(false)
		else
			local tween = TweenService:Create(FlyToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			toggleFlying(true)
		end
	end)

	KeyBindBTN.MouseButton1Click:Connect(function()
		KeyBindBTN.Text = "Press Any Key"
		awaitingKeyBind = true
	end) 
end;
task.spawn(C_30);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Handle
local function C_46()
	local script = G2L["46"];
	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	local infstaminaEnabled = false

	TriggerBTN.MouseButton1Up:Connect(function()
		if infstaminaEnabled then
			infstaminaEnabled = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			infstaminaEnabled =  true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	runservice.RenderStepped:Connect(function()
		if infstaminaEnabled then
			local character = Player.Character or Player.CharacterAdded:Wait()
			if character then
				local humanoid = character:WaitForChild("Humanoid")
				humanoid.JumpPower = 50
			end
		end
	end)
end;
task.spawn(C_46);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Handle
local function C_4f()
	local script = G2L["4f"];
	local globaltable = getgenv().HAVOC.LocalPlayer.CharacterSettings

	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	local MainEvent = game.ReplicatedStorage:WaitForChild("MainEvent")

	TriggerBTN.MouseButton1Up:Connect(function()
		if globaltable.NoShootingRecoil then
			globaltable.NoShootingRecoil = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			globaltable.NoShootingRecoil =  true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	MainEvent.OnClientEvent:Connect(function(arg1)
		if arg1 == "ShootingRecoil" then

		end
	end)
	runservice.RenderStepped:Connect(function()
		if globaltable.NoShootingRecoil then
			local character = Player.Character or Player.CharacterAdded:Wait()
			if character then
				local humanoid = character:WaitForChild("Humanoid")
				humanoid.JumpPower = 50
			end
		end
	end)
end;
task.spawn(C_4f);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Handle
local function C_58()
	local script = G2L["58"];
	local globaltable = getgenv().HAVOC.LocalPlayer.CharacterSettings

	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	TriggerBTN.MouseButton1Up:Connect(function()
		if globaltable.AntiStomp then
			globaltable.AntiStomp = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			globaltable.AntiStomp = true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	runservice.RenderStepped:Connect(function()
		if globaltable.AntiStomp then
			if Player.Character:WaitForChild("BodyEffects")['K.O'].Value == true then 
				if Player.Character:FindFirstChild("Head") then
					Player.Character.Head:Destroy()
				end
			end
		end
	end)
end;
task.spawn(C_58);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Handle
local function C_61()
	local script = G2L["61"];
	local globaltable = getgenv().HAVOC.LocalPlayer.CharacterSettings

	local Lighting = game:GetService("Lighting")
	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	local seats = {}
	local cooldown = false

	TriggerBTN.MouseButton1Up:Connect(function()
		if globaltable.NoSeats then
			globaltable.NoSeats = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			globaltable.NoSeats = true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	runservice.RenderStepped:Connect(function()
		if globaltable.NoSeats and cooldown == false then
			cooldown = true
			for _,v in ipairs(workspace:GetDescendants()) do
				if v:IsA("Seat") then
					v.Parent = Lighting
					table.insert(seats,v)
				end
			end
		elseif not globaltable.NoSeats then
			cooldown = false
			for _,v in ipairs(seats) do
				v.Parent = workspace
			end
		end
	end)
end;
task.spawn(C_61);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP
local function C_84()
	local script = G2L["84"];
	local TweenService = game:GetService("TweenService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Players = game:GetService("Players")
	local Player = game.Players.LocalPlayer

	local ESPSFolder = script.Parent.Parent.Parent.Parent.Parent:WaitForChild("ESPSFolder")

	local espBTN = script.Parent:WaitForChild("ESP"):WaitForChild("Trigger")
	local espToggle = espBTN.Parent:WaitForChild("Toggle")

	local boxBTN = script.Parent:WaitForChild("BOX"):WaitForChild("Trigger")
	local boxToggle = boxBTN.Parent:WaitForChild("Toggle")

	local aotBTN = script.Parent:WaitForChild("ALWAYSONTOP"):WaitForChild("Trigger")
	local aotToggle = aotBTN.Parent:WaitForChild("Toggle")

	local ESPEnabled = false
	local BOXEnabled = false
	local AOTEnabled = true

	local connections = {}

	function createESP(plr)
		local existingESP = ESPSFolder:FindFirstChild(plr.Name)
		if existingESP then
			existingESP:Destroy()
		end
		local ESPGUI = script.Parent.ESPGUI:Clone()
		ESPGUI.Parent = ESPSFolder
		ESPGUI.PLAYERNAME.Text = plr.Name
		ESPGUI.Enabled = true
		ESPGUI.Adornee = plr.Character.HumanoidRootPart
		ESPGUI.Name = plr.Name
		ESPGUI.BOX.Visible = BOXEnabled
		ESPGUI.AlwaysOnTop = AOTEnabled
		plr.CharacterAdded:Connect(function(character)
			wait(6)
			local hrp = character:FindFirstChild("HumanoidRootPart")
			if not hrp then
				character.ChildAdded:Connect(function(child)
					if child.Name == "HumanoidRootPart" then
						ESPGUI.Adornee = child
					end
				end)
			else
				ESPGUI.Adornee = hrp
			end
		end)

	end

	function ESPTOGGLES(action, enabled)
		for _, gui in pairs(ESPSFolder:GetChildren()) do
			if gui:IsA("BillboardGui") then
				if enabled then
					if action == "BOX" then
						gui.BOX.Visible = true
					elseif action == "ALWAYSONTOP" then
						gui.AlwaysOnTop = true
					end
				else
					if action == "BOX" then
						gui.BOX.Visible = false
					elseif action == "ALWAYSONTOP" then
						gui.AlwaysOnTop = false
					end
				end
			end
		end
	end

	function ESPTOGGLE(action)
		if action == "EnableESP" then
			ESPEnabled = true
			for _, plr in pairs(Players:GetPlayers()) do
				if plr ~= Player then
					createESP(plr)
				end
			end
		elseif action == "DisableESP" then
			ESPEnabled = false
			for _, gui in pairs(ESPSFolder:GetChildren()) do
				if gui:IsA("BillboardGui") then
					gui:Destroy()
				end
			end
		elseif action == "EnableBOX" then
			ESPTOGGLES("BOX", true)
			script.Parent.ESPGUI.BOX.Visible = true
		elseif action == "DisableBOX" then
			ESPTOGGLES("BOX", false)
			script.Parent.ESPGUI.BOX.Visible = false
		elseif action == "EnableAOT" then
			ESPTOGGLES("ALWAYSONTOP", true)
		elseif action == "DisableAOT" then
			ESPTOGGLES("ALWAYSONTOP", false)
		end
	end

	espBTN.MouseButton1Up:Connect(function()
		if ESPEnabled then
			ESPEnabled = false
			espToggle.BackgroundColor3 = Color3.fromRGB(134, 0, 0)
			ESPTOGGLE("DisableESP")
		else
			ESPEnabled = true
			espToggle.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
			ESPTOGGLE("EnableESP")
		end
	end)

	boxBTN.MouseButton1Up:Connect(function()
		if BOXEnabled then
			BOXEnabled = false
			boxToggle.BackgroundColor3 = Color3.fromRGB(134, 0, 0)
			ESPTOGGLE("DisableBOX")
		else
			BOXEnabled = true
			boxToggle.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
			ESPTOGGLE("EnableBOX")
		end
	end)

	aotBTN.MouseButton1Up:Connect(function()
		if AOTEnabled then
			AOTEnabled = false
			aotToggle.BackgroundColor3 = Color3.fromRGB(134, 0, 0)
			ESPTOGGLE("DisableAOT")
		else
			AOTEnabled = true
			aotToggle.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
			ESPTOGGLE("EnableAOT")
		end
	end)

	Players.ChildAdded:Connect(function(plr)
		if plr:IsA("Player") then
			wait(6)
			local charAddedConn = plr.CharacterAdded:Connect(function(character)
				if ESPEnabled then
					createESP(plr)
				end
			end)
			connections[plr] = charAddedConn
			if plr.Character and ESPEnabled then
				createESP(plr)
			end
		end
	end)

	Players.ChildRemoved:Connect(function(plr)
		if plr:IsA("Player") then
			if connections[plr] then
				connections[plr]:Disconnect()
				connections[plr] = nil
			end
			local ESPGUI = ESPSFolder:FindFirstChild(plr.Name)
			if ESPGUI then
				ESPGUI:Destroy()
			end
		end
	end)
end;
task.spawn(C_84);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.Spectate
local function C_9d()
	local script = G2L["9d"];
	local TweenService = game:GetService("TweenService")

	local Player = game.Players.LocalPlayer
	local Camera = workspace.CurrentCamera

	local HAVOC = getgenv().HAVOC
	local View = HAVOC.Player.View

	local SpectateTrigger = script.Parent:WaitForChild("VIEW"):WaitForChild("Trigger")
	local SpectateToggle = SpectateTrigger.Parent:WaitForChild("Toggle")

	local function toggleSpectate()
		if View.Enabled then
			local targetPlayer
			for _, plr in ipairs(game.Players:GetPlayers()) do
				if plr.Name == View.Target or plr.DisplayName == View.Target then
					targetPlayer = plr
				end
			end
			if targetPlayer then
				Camera.CameraSubject = targetPlayer.Character.HumanoidRootPart
			end
		else
			Camera.CameraSubject = Player.Character
		end
	end

	SpectateTrigger.MouseButton1Up:Connect(function()
		if View.Enabled then
			View.Enabled = false
			local tween = TweenService:Create(SpectateToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			toggleSpectate()
		else
			View.Enabled = true
			local tween = TweenService:Create(SpectateToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			toggleSpectate()
		end
	end)
end;
task.spawn(C_9d);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TargetNameHandler
local function C_9e()
	local script = G2L["9e"];
	local HAVOC = getgenv().HAVOC
	local ViewGLOBAL = HAVOC.Player.View

	local TARGETNAME = script.Parent:WaitForChild("TARGETNAME")
	local TargetNameTextBox = TARGETNAME:WaitForChild("TARGET")

	TargetNameTextBox.FocusLost:Connect(function(enterPressed)
		if enterPressed then
			ViewGLOBAL.Target = TargetNameTextBox.Text
		end
	end)
end;
task.spawn(C_9e);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Togglers
local function C_ad()
	local script = G2L["ad"];
	local HAVOC = getgenv().HAVOC
	local RageAimGLOBAL = HAVOC.Player.RageAim

	local TweenService = game:GetService("TweenService")

	local TweenInfoON = TweenInfo.new(0.1)
	local TweenInfoOFF = TweenInfo.new(0.1)

	local KillAuraTrigger = script.Parent:WaitForChild("KILLAURA"):WaitForChild("Trigger")
	local KillAuraToggle = KillAuraTrigger.Parent:WaitForChild("Toggle")

	KillAuraTrigger.MouseButton1Up:Connect(function()
		if KillAuraToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(KillAuraToggle, TweenInfoOFF, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			RageAimGLOBAL.KillAura = false
		else
			local tween = TweenService:Create(KillAuraToggle, TweenInfoON, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			RageAimGLOBAL.KillAura = true
		end
	end)
end;
task.spawn(C_ad);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KillAura
local function C_af()
	local script = G2L["af"];
	local RunService = game:GetService("RunService")
	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local Player = Players.LocalPlayer
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")

	local HAVOC = getgenv().HAVOC
	local RageAimGLOBAL = HAVOC.Player.RageAim

	local function UpdateCharacter(newCharacter)
		Character = newCharacter
		HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
	end

	Player.CharacterAdded:Connect(UpdateCharacter)

	local function checkCrew(targetPlayer)
		local OurInformation = Player:WaitForChild("DataFolder"):FindFirstChild("Information")
		local TheirInformation = targetPlayer:WaitForChild("DataFolder"):FindFirstChild("Information")
		if not (OurInformation and TheirInformation) then
			return false
		end

		local ourCrew = OurInformation:FindFirstChild("Crew")
		local theirCrew = TheirInformation:FindFirstChild("Crew")

		if not ourCrew then 
			return true
		end

		if not theirCrew then
			return true
		end

		return ourCrew.Value ~= theirCrew.Value
	end

	local function GetTool()
		local Tool = Player:FindFirstChildWhichIsA("Tool")
		for _, v in pairs(Character:GetChildren()) do
			if v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo') then
				return v
			end
		end
		return nil
	end

	local function GetClosestPlayer()
		local closestPlayer = nil
		local shortestDistance = math.huge

		for _, target in pairs(Players:GetPlayers()) do
			if target ~= Player and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
				local targetRoot = target.Character:FindFirstChild("HumanoidRootPart")
				if HumanoidRootPart then
					local distance = (HumanoidRootPart.Position - targetRoot.Position).Magnitude

					if distance < shortestDistance and target.Character:FindFirstChild("BodyEffects") and not target.Character.BodyEffects["K.O"].Value and checkCrew(target) then
						shortestDistance = distance
						closestPlayer = target
					end
				end
			end
		end

		return closestPlayer
	end

	local function ShootGun(targetPlayer)
		local targetHead = targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head")
		local gun = GetTool()

		if targetHead and gun and HumanoidRootPart then
			if not targetPlayer.Character:FindFirstChild("BodyEffects")["K.O"].Value then
				local args = {
					[1] = "ShootGun",
					[2] = gun:WaitForChild("Handle"),
					[3] = HumanoidRootPart.Position,
					[4] = targetHead.Position,
					[5] = targetHead,
					[6] = Vector3.zAxis
				}
				ReplicatedStorage:WaitForChild("MainEvent"):FireServer(unpack(args))
			end
		end
	end

	RunService.RenderStepped:Connect(function()
		if RageAimGLOBAL.KillAura then
			local targetPlayer = GetClosestPlayer()
			if targetPlayer then
				ShootGun(targetPlayer)
			end
		end
	end)
end;
task.spawn(C_af);
-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.Handle
local function C_bc()
	local script = G2L["bc"];
	local userInputService = game:GetService("UserInputService")

	local HAVOC = script.Parent.Parent.Parent.Parent.Parent

	local KeyBindBTN = script.Parent:WaitForChild("KeyBind")
	local currentKeyBind = Enum.KeyCode.LeftControl

	KeyBindBTN.MouseButton1Click:Connect(function()
		KeyBindBTN.Text = "Press Any Key"
		awaitingKeyBind = true
	end)

	userInputService.InputBegan:Connect(function(input,processed)
		if not processed then
			if awaitingKeyBind then
				currentKeyBind = input.KeyCode
				KeyBindBTN.Text = tostring(currentKeyBind):gsub("Enum.KeyCode.", "")
				awaitingKeyBind = false
				return
			end

			if input.KeyCode == currentKeyBind then
				HAVOC.Visible = not HAVOC.Visible
			end
		end
	end)
end;
task.spawn(C_bc);
-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.Handle
local function C_c9()
	local script = G2L["c9"];
	local TweenService = game:GetService("TweenService")
	local Players = game:GetService("Players")
	local StarterGui = game:GetService("StarterGui")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local player = game.Players.LocalPlayer

	local joinleaveBTN = script.Parent:WaitForChild("JOIN_LEAVENOTI"):WaitForChild("Trigger")
	local joinleaveToggle = joinleaveBTN.Parent:WaitForChild("Toggle")

	local joinleaveEnabled = false

	function sendNotification(title, text, duration)
		StarterGui:SetCore("SendNotification", {
			Title = title;
			Text = text;
			Duration = duration;
		})
	end

	joinleaveBTN.MouseButton1Up:Connect(function()
		if joinleaveEnabled then
			joinleaveEnabled = false
			local tween = TweenService:Create(joinleaveToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			joinleaveEnabled = true
			local tween = TweenService:Create(joinleaveToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	Players.ChildAdded:Connect(function(plr)
		if plr:IsA("Player") and joinleaveEnabled then
			sendNotification("JOINED", "DISPLAY: " .. plr.DisplayName .. " USER: " .. plr.Name, 4)
		end
	end)

	Players.ChildRemoved:Connect(function(plr)
		if plr:IsA("Player") and joinleaveEnabled then
			sendNotification("LEFT", "DISPLAY: " .. plr.DisplayName .. " USER: " .. plr.Name, 4)
		end
	end)
end;
task.spawn(C_c9);
-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Handle
local function C_d1()
	local script = G2L["d1"];
	local TweenService = game:GetService("TweenService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	local removesnowEnabled = false

	TriggerBTN.MouseButton1Up:Connect(function()
		if removesnowEnabled then
			removesnowEnabled = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			for _, snow in pairs(game.Lighting:GetDescendants()) do
				if snow.Name == "Snow" then
					snow.Parent = workspace
				end
			end
		else
			removesnowEnabled = true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			for _, snow in pairs(workspace:GetDescendants()) do
				if snow.Name == "Snow" then
					snow.Parent = game.Lighting
				end
			end
		end
	end)
end;
task.spawn(C_d1);
-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Handle
local function C_e5()
	local script = G2L["e5"];
	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	local autostompEnabled = false

	TriggerBTN.MouseButton1Up:Connect(function()
		if autostompEnabled then
			autostompEnabled = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			autostompEnabled =  true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	runservice.RenderStepped:Connect(function()
		if autostompEnabled then
			game:GetService("ReplicatedStorage"):FindFirstChild("MainEvent"):FireServer("Stomp")
		end
	end)
end;
task.spawn(C_e5);
-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Handle
local function C_ee()
	local script = G2L["ee"];
	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	local autoreloadEnabled = false

	TriggerBTN.MouseButton1Up:Connect(function()
		if autoreloadEnabled then
			autoreloadEnabled = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			autoreloadEnabled =  true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	function GetTool2()
		local Tool = Player:FindFirstChildWhichIsA("Tool")
		for _, v in pairs(Player.Character:GetChildren()) do 
			if (v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo')) then 
				Tool = v 
				return Tool
			end
		end

	end

	runservice.RenderStepped:Connect(function()
		if autoreloadEnabled then
			local Gun = GetTool2()
			local KOValue = Player.Character:WaitForChild('BodyEffects')['K.O'].Value
			if Gun and KOValue ~= true and Gun.Ammo.Value < 1 then
				game:GetService("ReplicatedStorage"):FindFirstChild("MainEvent"):FireServer("Reload",Gun)
			end
		end
	end)
end;
task.spawn(C_ee);
-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Handle
local function C_f7()
	local script = G2L["f7"];
	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	local autoshootEnabled = false

	TriggerBTN.MouseButton1Up:Connect(function()
		if autoshootEnabled then
			autoshootEnabled = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			autoshootEnabled =  true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	function GetTool()
		local Tool = Player:FindFirstChildWhichIsA("Tool")
		for _, v in pairs(Player.Character:GetChildren()) do 
			if (v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo')) then 
				Tool = v 
				return Tool
			end
		end
	end

	runservice.RenderStepped:Connect(function()
		if autoshootEnabled then
			local Gun = GetTool()
			if Gun and Gun.Parent == Player.Character then
				Gun:Activate()
			end
		end
	end)
end;
task.spawn(C_f7);
-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.Handle
local function C_125()
	local script = G2L["125"];
	local player = game.Players.LocalPlayer
	local Character = player.Character or player.CharacterAdded:Wait()
	local Humanoid = Character:WaitForChild("Humanoid")
	local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

	local function updateCharacter()
		Character = player.Character or player.CharacterAdded:Wait()
		HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
	end

	player.CharacterAdded:Connect(function()
		updateCharacter()
	end)

	for _,TriggerBTN in pairs(script.Parent:GetDescendants()) do
		if TriggerBTN:IsA("TextButton") then
			TriggerBTN.MouseButton1Up:Connect(function()
				if HumanoidRootPart and Humanoid.Health > 0 then
					if TriggerBTN.Parent.Name == "DABANK" then
						HumanoidRootPart.CFrame = CFrame.new(-385.50,21.42,-282.75,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "DB" then
						HumanoidRootPart.CFrame = CFrame.new(-1024.69, 21.97, -274,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "DOWNHILLZGUN" then
						HumanoidRootPart.CFrame = CFrame.new(-557.99,8.22,-736.59,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "MILITARYDB" then
						HumanoidRootPart.CFrame = CFrame.new(9.52,26.47,-869.6,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "REVOLVER" then
						HumanoidRootPart.CFrame = CFrame.new(-628.08,21.97,-129.13,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "UPHILLZGUN" then
						HumanoidRootPart.CFrame = CFrame.new(481.9,48.2,-607.5,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "UPHILLZMILITARY" then
						HumanoidRootPart.CFrame = CFrame.new(481.9,48,2,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "RIFLE" then
						for _,v in ipairs(workspace:GetDescendants()) do
							if v.Name == "[Rifle] - $1694" then
								HumanoidRootPart.CFrame = v.Head.CFrame
							end
						end
					end
				end
			end)
		end
	end
end;
task.spawn(C_125);
-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.Handle
local function C_13e()
	local script = G2L["13e"];
	local Client = game.Players.LocalPlayer
	local Character = Client.Character or Client.CharacterAdded:Wait()
	local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

	local TeleportTrigger = script.Parent:WaitForChild("TELEPORT"):WaitForChild("Trigger")

	local function updateCharacter()
		Character = Client.Character or Client.CharacterAdded:Wait()
		HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
	end

	Client.CharacterAdded:Connect(function()
		updateCharacter()
	end)

	TeleportTrigger.MouseButton1Up:Connect(function()
		for _,player in ipairs(game.Players:GetPlayers()) do
			if player.Name == script.Parent.TARGETNAME.TARGET.Text or player.DisplayName == script.Parent.TARGETNAME.TARGET.Text then
				HumanoidRootPart.CFrame = player.Character.LowerTorso.CFrame
			end
		end
	end)
end;
task.spawn(C_13e);
-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.Handle
local function C_153()
	local script = G2L["153"];
	local HAVOC = getgenv().HAVOC
	local OrbitGLOBAL = HAVOC.Orbit

	local Player = game.Players.LocalPlayer
	local Mouse = Player:GetMouse()

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local playerText = script.Parent.Parent:WaitForChild("TARGETNAME"):WaitForChild("TARGET")
	local defaultText = TriggerBTN.Text

	-- Function to find the character model
	local function getCharacterFromTarget(target)
		while target do
			if target:FindFirstChild("Humanoid") then
				return target
			end
			target = target.Parent
		end
		return nil
	end

	TriggerBTN.MouseButton1Up:Connect(function()
		TriggerBTN.Text = "Select a player" -- Change button text to indicate selection mode
		local connection
		connection = Mouse.Button1Up:Connect(function()
			local TargetSelect = Mouse.Target
			if TargetSelect then
				local character = getCharacterFromTarget(TargetSelect)
				if character then
					local selectedPlayer = game.Players:GetPlayerFromCharacter(character)
					if selectedPlayer and selectedPlayer ~= Player then
						playerText.Text = selectedPlayer.Name
						OrbitGLOBAL.Target = selectedPlayer.Name
						TriggerBTN.Text = defaultText
						connection:Disconnect() -- Stop listening for mouse clicks
						return
					end
				end
			end
			-- If no valid character or player is found, reset
			connection:Disconnect()
			TriggerBTN.Text = defaultText
		end)
	end)

end;
task.spawn(C_153);
-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Orbit
local function C_155()
	local script = G2L["155"];
	local vim = game:GetService("VirtualInputManager")
	local HAVOC = getgenv().HAVOC
	local OrbitGLOBAL = HAVOC.Orbit

	local Players = game:GetService("Players")
	local UserInputService = game:GetService("UserInputService")
	local RunService = game:GetService("RunService")
	local camera = workspace.CurrentCamera

	local localPlayer = Players.LocalPlayer
	local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
	local rootPart = character:WaitForChild("HumanoidRootPart")

	local targetPlayer

	local ESPS = script.Parent.Parent.Parent.Parent.Parent:WaitForChild("ESPSFolder")

	local OrbitEnabled = false
	local minY = 100000
	local moveDistance = 500

	local rifleModel
	for _,v in ipairs(workspace:GetDescendants()) do
		if v.Name == "[Rifle] - $1694" then
			rifleModel = v
		end
	end

	local function updateCharacterReferences()
		character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
		rootPart = character:WaitForChild("HumanoidRootPart")
	end

	localPlayer.CharacterAdded:Connect(function()
		updateCharacterReferences()
	end)

	local function getTargetCFrame()
		for _, player in ipairs(Players:GetPlayers()) do
			if player.Name == OrbitGLOBAL.Target or player.DisplayName == OrbitGLOBAL.Target then
				targetPlayer = player
			end
		end
		if targetPlayer and targetPlayer.Character then
			local targetRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
			if targetRoot then
				return targetRoot.CFrame
			end
		end
		return nil
	end

	function GetTool()
		local Tool
		for _, v in pairs(localPlayer.Character:GetChildren()) do 
			if string.find(v.Name,"Rifle") or string.find(v.Name, "LMG") or string.find(v.Name,"Silencer") then
				if v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo') then 
					Tool = v 
					return Tool
				end
			end
		end
		for _,v in pairs(localPlayer.Backpack:GetChildren()) do
			if string.find(v.Name,"Rifle") or string.find(v.Name, "LMG") or string.find(v.Name,"Silencer") then
				if v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo') then 
					Tool = v 
					localPlayer.Character.Humanoid:EquipTool(v)
					return Tool
				end
			end 
		end
		local rifleForward = rifleModel.Head.CFrame.LookVector
		local offsetDistance = 3
		local newCFrame = rifleModel.Head.CFrame + (-rifleForward * offsetDistance)

		rootPart.CFrame = newCFrame

		local screenPoint = camera:WorldToViewportPoint(rifleModel.Head.Position)
		vim:SendMouseMoveEvent(screenPoint.X, screenPoint.Y, game)
		vim:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, true, game, 0)
		task.wait(0.15)
		vim:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, false, game, 0)
	end

	local function orbitAround()
		local targetCFrame = getTargetCFrame()
		if targetCFrame then
			local orbitRadius = 12
			local orbitSpeed = 30
			local angle = tick() * orbitSpeed
			local x = math.cos(angle) * orbitRadius
			local z = math.sin(angle) * orbitRadius
			local orbitOffset = Vector3.new(x, 10, z)
			rootPart.CFrame = targetCFrame * CFrame.new(orbitOffset)
		end
	end

	local function lockCamera()
		local targetHead = targetPlayer.Character:FindFirstChild("Head")
		if targetHead then
			camera.CFrame = CFrame.new(camera.CFrame.Position, targetHead.Position)
		end
	end

	local function shootGun()
		local targetHead = targetPlayer.Character:FindFirstChild("Head")
		local gun = GetTool()
		if targetHead then
			if gun then
				if not targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value then
					local args = {
						[1] = "ShootGun",
						[2] = gun:WaitForChild("Handle"),
						[3] = rootPart.Position,
						[4] = targetHead.Position,
						[5] = targetHead,
						[6] = Vector3.xAxis
					}
					game:GetService("ReplicatedStorage"):WaitForChild("MainEvent"):FireServer(unpack(args))
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(function(input,processed)
		if not processed then
			if input.KeyCode == OrbitGLOBAL.Settings.KeyBind and OrbitGLOBAL.Enabled then
				if not OrbitEnabled then
					OrbitEnabled = true
				else
					OrbitEnabled = false
				end
			end
		end
	end)

	RunService.RenderStepped:Connect(function()
		if not OrbitGLOBAL.Enabled and OrbitEnabled then
			OrbitEnabled = false
		end

		if OrbitEnabled then
			local gun = GetTool()
			if gun then
				getTargetCFrame()
				if targetPlayer and targetPlayer.Character then
					if not targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value then
						orbitAround()
						lockCamera()
						shootGun()
					end
					if ESPS:FindFirstChild(targetPlayer.Name) then
						ESPS[targetPlayer.Name].BOX.ImageColor3 = Color3.fromRGB(255, 0, 0)
					end

					if targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value then
						if OrbitGLOBAL.Settings.AutoStomp then
							if targetPlayer.Character:WaitForChild("BodyEffects")['Dead'].Value then
								if OrbitGLOBAL.Settings.Void then
									while targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value == true do
										wait()
										local randomX = math.random(-moveDistance, moveDistance)
										local randomZ = math.random(-moveDistance, moveDistance)
										local randomY = math.random(-moveDistance, moveDistance) 

										local newY = math.max(rootPart.Position.Y + randomY, minY)

										rootPart.CFrame = CFrame.new(rootPart.Position.X + randomX, newY, rootPart.Position.Z + randomZ)
									end
								end
							else
								local upperTorsoPosition = targetPlayer.Character.UpperTorso.Position
								local targetPosition = upperTorsoPosition + Vector3.new(0, 2, 0)
								rootPart.CFrame = CFrame.new(targetPosition, targetPosition + Vector3.new(0, 0, -1))
								game:GetService("ReplicatedStorage").MainEvent:FireServer("Stomp")
							end
						else
							if OrbitGLOBAL.Settings.Void then
								while targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value == true do
									wait()
									local randomX = math.random(-moveDistance, moveDistance)
									local randomZ = math.random(-moveDistance, moveDistance)
									local randomY = math.random(-moveDistance, moveDistance) 

									local newY = math.max(rootPart.Position.Y + randomY, minY)

									rootPart.CFrame = CFrame.new(rootPart.Position.X + randomX, newY, rootPart.Position.Z + randomZ)
								end
							end
						end
					end
				end
			end
		end
	end)

end;
task.spawn(C_155);
-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Togglers
local function C_156()
	local script = G2L["156"];
	local HAVOC = getgenv().HAVOC
	local OrbitGLOBAL = HAVOC.Orbit

	local TweenService = game:GetService("TweenService")

	local TweenInfoON = TweenInfo.new(0.1)
	local TweenInfoOFF = TweenInfo.new(0.1)

	local OrbitTrigger = script.Parent:WaitForChild("ORBIT"):WaitForChild("Trigger")
	local OrbitToggle = OrbitTrigger.Parent:WaitForChild("Toggle")

	local AutoStompTrigger = script.Parent:WaitForChild("AUTOSTOMP"):WaitForChild("Trigger")
	local AutoStompToggle = AutoStompTrigger.Parent:WaitForChild("Toggle")

	local VoidTrigger = script.Parent:WaitForChild("VOID"):WaitForChild("Trigger")
	local VoidToggle = VoidTrigger.Parent:WaitForChild("Toggle")

	OrbitTrigger.MouseButton1Up:Connect(function()
		if OrbitToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(OrbitToggle, TweenInfoOFF, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Enabled = false
		else
			local tween = TweenService:Create(OrbitToggle, TweenInfoON, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Enabled = true
		end
	end)

	AutoStompTrigger.MouseButton1Up:Connect(function()
		if AutoStompToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(AutoStompToggle, TweenInfoOFF, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Settings.AutoStomp = false
		else
			local tween = TweenService:Create(AutoStompToggle, TweenInfoON, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Settings.AutoStomp = true
		end
	end)

	VoidTrigger.MouseButton1Up:Connect(function()
		if VoidToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(VoidToggle, TweenInfoOFF, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Settings.Void = false
		else
			local tween = TweenService:Create(VoidToggle, TweenInfoON, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Settings.Void = true
		end
	end)
end;
task.spawn(C_156);
-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TargetNameHandler
local function C_157()
	local script = G2L["157"];
	local HAVOC = getgenv().HAVOC
	local OrbitGLOBAL = HAVOC.Orbit

	local TARGETNAME = script.Parent:WaitForChild("TARGETNAME")
	local TargetNameTextBox = TARGETNAME:WaitForChild("TARGET")

	TargetNameTextBox.FocusLost:Connect(function(enterPressed)
		if enterPressed then
			OrbitGLOBAL.Target = TargetNameTextBox.Text
		end
	end)
end;
task.spawn(C_157);
-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Keybind
local function C_162()
	local script = G2L["162"];
	local HAVOC = getgenv().HAVOC
	local OrbitGLOBAL = HAVOC.Orbit

	local UserInputService = game:GetService("UserInputService")
	local KeyBindBTN = script.Parent:WaitForChild("ORBIT"):WaitForChild("KeyBind")
	local awaitingKeyBind = false

	UserInputService.InputBegan:Connect(function(input)
		if awaitingKeyBind then
			OrbitGLOBAL.Settings.KeyBind = input.KeyCode
			KeyBindBTN.Text = tostring(input.KeyCode):gsub("Enum.KeyCode.", "")
			awaitingKeyBind = false
			return
		end
	end)

	KeyBindBTN.MouseButton1Click:Connect(function()
		KeyBindBTN.Text = "Press Any Key"
		awaitingKeyBind = true
	end)
end;
task.spawn(C_162);
-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Togglers
local function C_1ca()
	local script = G2L["1ca"];
	local TweenService = game:GetService("TweenService")

	local HAVOC = getgenv().HAVOC
	local AimLockGLOBAL = HAVOC.AimLock

	local aimlockBTN = script.Parent:WaitForChild("AIMLOCK"):WaitForChild("Trigger")
	local aimlockToggle = aimlockBTN.Parent:WaitForChild("Toggle")
	local antidownBTN = script.Parent:WaitForChild("ANTIGROUNDSHOOT"):WaitForChild("Trigger")
	local antidownToggle = antidownBTN.Parent:WaitForChild("Toggle")
	local friendcheckBTN = script.Parent:WaitForChild("FRIENDCHECK").Trigger
	local friendcheckToggle = friendcheckBTN.Parent:WaitForChild("Toggle")
	local crewcheckBTN = script.Parent:WaitForChild("CREWCHECK").Trigger
	local crewcheckToggle = crewcheckBTN.Parent:WaitForChild("Toggle")

	aimlockBTN.MouseButton1Up:Connect(function()
		if AimLockGLOBAL.Enabled then
			local tween = TweenService:Create(aimlockToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			AimLockGLOBAL.Enabled = false
		else
			local tween = TweenService:Create(aimlockToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			AimLockGLOBAL.Enabled = true
		end
	end)

	crewcheckBTN.MouseButton1Up:Connect(function()
		if AimLockGLOBAL.Settings.CrewCheck then
			AimLockGLOBAL.Settings.CrewCheck = false
			local tween = TweenService:Create(crewcheckToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AimLockGLOBAL.Settings.CrewCheck = true
			local tween = TweenService:Create(crewcheckToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	friendcheckBTN.MouseButton1Up:Connect(function()
		if AimLockGLOBAL.Settings.FriendCheck then
			AimLockGLOBAL.Settings.FriendCheck = false
			local tween = TweenService:Create(friendcheckToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AimLockGLOBAL.Settings.FriendCheck = true
			local tween = TweenService:Create(friendcheckToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	antidownBTN.MouseButton1Up:Connect(function()
		if AimLockGLOBAL.Settings.AntiGroundShoot then
			AimLockGLOBAL.Settings.AntiGroundShoot = false
			local tween = TweenService:Create(antidownToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AimLockGLOBAL.Settings.AntiGroundShoot = true
			local tween = TweenService:Create(antidownToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)
end;
task.spawn(C_1ca);
-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Aimlock
local function C_1cb()
	local script = G2L["1cb"];
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local UserInputService = game:GetService("UserInputService")
	local camera = workspace.CurrentCamera
	local player = Players.LocalPlayer
	local mouse = player:GetMouse()

	local HAVOC = getgenv().HAVOC
	local AimLockGLOBAL = HAVOC.AimLock

	local ESPSFolder = script.Parent.Parent.Parent.Parent.Parent:WaitForChild("ESPSFolder")

	local aimTarget = nil
	local isHoldingKeybind = false

	local toggleMode = false

	function checkCrew(targetPlayer)
		local OurInformation = player:WaitForChild("DataFolder"):FindFirstChild("Information")
		local TheirInformation = targetPlayer:WaitForChild("DataFolder"):FindFirstChild("Information")
		if not (OurInformation and TheirInformation) then
			return false
		end

		local ourCrew = OurInformation:FindFirstChild("Crew")
		local theirCrew = TheirInformation:FindFirstChild("Crew")

		if not ourCrew then 
			return true
		end

		if not theirCrew then
			return true
		end

		return ourCrew.Value ~= theirCrew.Value
	end

	local friendStatusCache = {}

	local function isFriend(targetPlayerID)
		return player:IsFriendsWith(targetPlayerID)
	end

	local function getClosestPlayer()
		local Camera = workspace.CurrentCamera
		local MousePosition = UserInputService:GetMouseLocation()
		local Closest
		local Distance = 1/0

		for _, otherPlayer in ipairs(Players:GetPlayers()) do
			local Character = otherPlayer.Character
			if otherPlayer ~= player and Character and Character:FindFirstChild("Head") then
				local Position, OnScreen = Camera:WorldToViewportPoint(Character.Head.Position)
				if OnScreen then
					local screenPosition = Vector2.new(Position.X, Position.Y)
					local distance = (screenPosition - MousePosition).Magnitude
					if distance < Distance then
						Closest = otherPlayer
						Distance = distance
					end
				end
			end
		end

		return Closest
	end

	function updateESPColors()
		for _, guiElement in ipairs(ESPSFolder:GetChildren()) do
			if aimTarget and guiElement.Name == aimTarget.Name then
				guiElement.BOX.ImageColor3 = Color3.fromRGB(255, 0, 0)
				guiElement.PLAYERNAME.TextColor3 = Color3.fromRGB(255, 0, 0)
			else
				guiElement.BOX.ImageColor3 = Color3.fromRGB(255, 255, 255)
				guiElement.PLAYERNAME.TextColor3 = Color3.fromRGB(255, 255, 255)
			end
		end
	end

	function toggleAimlock()
		if AimLockGLOBAL.Enabled then
			aimTarget = nil
		end
		updateESPColors()
	end

	local lastCheckedTarget = nil
	local isLastTargetFriend = false
	local isLastTargetCrewValid = false

	function aimlockUpdate()
		if AimLockGLOBAL.Enabled and isHoldingKeybind then
			if not aimTarget or not aimTarget.Character or not aimTarget.Character:FindFirstChild("Head") then
				aimTarget = getClosestPlayer()
				lastCheckedTarget = nil
			end

			if aimTarget and aimTarget.Character then
				if aimTarget ~= lastCheckedTarget then
					lastCheckedTarget = aimTarget

					if AimLockGLOBAL.Settings.CrewCheck then
						isLastTargetCrewValid = checkCrew(aimTarget)
					else
						isLastTargetCrewValid = true
					end

					if AimLockGLOBAL.Settings.FriendCheck then
						isLastTargetFriend = isFriend(aimTarget.UserId)
					else
						isLastTargetFriend = false
					end
				end

				if AimLockGLOBAL.Settings.AntiGroundShoot and aimTarget.Character:WaitForChild("BodyEffects")['K.O'].Value then
					aimTarget = getClosestPlayer()
					lastCheckedTarget = nil
				elseif AimLockGLOBAL.Settings.CrewCheck and not isLastTargetCrewValid then
					aimTarget = getClosestPlayer()
					lastCheckedTarget = nil
				elseif AimLockGLOBAL.Settings.FriendCheck and isLastTargetFriend then
					aimTarget = getClosestPlayer()
					lastCheckedTarget = nil
				else
					if aimTarget and aimTarget.Character then
						camera.CFrame = CFrame.new(camera.CFrame.Position, aimTarget.Character:FindFirstChild(AimLockGLOBAL.Settings.AimPart).Position)
					end
				end
			end
		end
		updateESPColors()
	end

	UserInputService.InputBegan:Connect(function(input)
		if AimLockGLOBAL.Enabled and input.KeyCode == AimLockGLOBAL.Settings.KeyBind and toggleMode == false then
			isHoldingKeybind = true
		end
		if AimLockGLOBAL.Enabled and input.KeyCode == AimLockGLOBAL.Settings.KeyBind and toggleMode == true then
			aimTarget = nil
			if isHoldingKeybind then
				isHoldingKeybind = false
			else
				isHoldingKeybind = true
			end
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.KeyCode == AimLockGLOBAL.Settings.KeyBind and not toggleMode then
			isHoldingKeybind = false
			aimTarget = nil
			updateESPColors()
		end
	end)

	RunService.Heartbeat:Connect(function()
		if AimLockGLOBAL.Enabled then
			aimlockUpdate()
		end
		if AimLockGLOBAL.Settings.Mode == "HOLD" then
			toggleMode = false
		else
			toggleMode = true
		end
	end)
end;
task.spawn(C_1cb);
-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Keybind
local function C_1cc()
	local script = G2L["1cc"];
	local HAVOC = getgenv().HAVOC
	local AimLockGLOBAL = HAVOC.AimLock

	local UserInputService = game:GetService("UserInputService")
	local KeyBindBTN = script.Parent:WaitForChild("AIMLOCK"):WaitForChild("KeyBind")
	local awaitingKeyBind = false

	UserInputService.InputBegan:Connect(function(input)
		if awaitingKeyBind then
			AimLockGLOBAL.Settings.KeyBind = input.KeyCode
			KeyBindBTN.Text = tostring(input.KeyCode):gsub("Enum.KeyCode.", "")
			awaitingKeyBind = false
			return
		end
	end)

	KeyBindBTN.MouseButton1Click:Connect(function()
		KeyBindBTN.Text = "Press Any Key"
		awaitingKeyBind = true
	end)

end;
task.spawn(C_1cc);
-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Dropdown
local function C_1cd()
	local script = G2L["1cd"];
	local TweenService = game:GetService("TweenService")

	local HAVOC = getgenv().HAVOC
	local AimLockGLOBAL = HAVOC.AimLock

	local cameralockBTN = script.Parent:WaitForChild("CAMERALOCK"):WaitForChild("Trigger")
	local cameralockDropDownFrame = cameralockBTN.Parent:WaitForChild("DropDownFrame")
	local cameralockLockOnText = cameralockBTN.Parent:WaitForChild("LOCKON")
	local aimlockmodeBTN = script.Parent:WaitForChild("AIMLOCKTOGGLE"):WaitForChild("Trigger")
	local aimlockmodeDropDownFrame = aimlockmodeBTN.Parent:WaitForChild("DropDownFrame")
	local aimlockmodeLockOnText = aimlockmodeBTN.Parent:WaitForChild("MODE")

	local cameralockDropDownScrolling = cameralockDropDownFrame:WaitForChild("DropDownScrolling")
	local cameralockArrow = cameralockBTN.Parent:WaitForChild("Arrow")
	local aimlockmodeArrow = aimlockmodeBTN.Parent:WaitForChild("Arrow")
	local aimlockmodeDropDownScrolling = aimlockmodeDropDownFrame:WaitForChild("DropDownScrolling")

	function tweenArrow(targetRotation)
		local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local tween = TweenService:Create(cameralockArrow, tweenInfo, {Rotation = targetRotation})
		tween:Play()
	end

	function tweenArrow2(targetRotation)
		local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local tween = TweenService:Create(aimlockmodeArrow, tweenInfo, {Rotation = targetRotation})
		tween:Play()
	end

	for _, button in ipairs(cameralockDropDownScrolling:GetChildren()) do
		if button:IsA("TextButton") then
			button.MouseButton1Up:Connect(function()
				cameralockLockOnText.Text = button.Text
				AimLockGLOBAL.Settings.AimPart = button.Text
				cameralockDropDownFrame.Visible = false
				tweenArrow(0)
			end)
		end
	end

	for _, button in ipairs(aimlockmodeDropDownScrolling:GetChildren()) do
		if button:IsA("TextButton") then
			button.MouseButton1Up:Connect(function()
				aimlockmodeLockOnText.Text = button.Text
				AimLockGLOBAL.Settings.Mode = button.Text
				aimlockmodeDropDownFrame.Visible = false
				tweenArrow2(0)
			end)
		end
	end

	cameralockBTN.MouseButton1Up:Connect(function()
		cameralockDropDownFrame.Visible = not cameralockDropDownFrame.Visible
		local targetRotation = cameralockDropDownFrame.Visible and -90 or 0
		tweenArrow(targetRotation)
	end)

	aimlockmodeBTN.MouseButton1Up:Connect(function()
		aimlockmodeDropDownFrame.Visible = not aimlockmodeDropDownFrame.Visible
		local targetRotation = aimlockmodeDropDownFrame.Visible and -90 or 0
		tweenArrow2(targetRotation)
	end)
end;
task.spawn(C_1cd);
-- StarterGui.havoc.MainFrame.SideFrame.LocalScript
local function C_1e2()
	local script = G2L["1e2"];
	local ViewFrame = script.Parent.Parent:WaitForChild("ViewFrame")

	function disableFrames()
		for i,v in ipairs(ViewFrame:GetChildren()) do
			if v:IsA("ScrollingFrame") then
				v.Visible = false
			end
		end
	end

	for _, button in ipairs(script.Parent:GetChildren()) do
		if button:IsA("TextButton") then
			button.MouseButton1Up:Connect(function()
				disableFrames()
				ViewFrame:FindFirstChild(button.Name).Visible = true
			end)
		end
	end
end;
task.spawn(C_1e2);
-- StarterGui.havoc.Lighting
local function C_1f3()
	local script = G2L["1f3"];
	--[[local Lighting = game:GetService("Lighting")
	
	Lighting.FogColor = Color3.fromRGB(182, 58, 46)--]]
end;
task.spawn(C_1f3);
-- StarterGui.havoc.LoadGlobalTable
local function C_1f4()
	local script = G2L["1f4"];
	local TweenService = game:GetService("TweenService")
	local TweenInfoON = TweenInfo.new(0.1)
	local TweenInfoOFF = TweenInfo.new(0.1)

	local HAVOC = getgenv().HAVOC

	-- Function to find a setting by its name
	local function findSettingByName(name, table)
		for key, v in pairs(table) do
			if typeof(v) == "table" then
				-- Recursively search in sub-tables
				local result = findSettingByName(name, v)
				if result ~= nil then
					return result
				end
			elseif key:upper() == name then
				return v
			end
		end
		return nil
	end

	-- Function to find the KeyBind under the "Settings" sub-table
	local function findKeyBindValue(buttonName, table)
		for key, setting in pairs(table) do
			-- If there's a "Settings" sub-table, check if it contains "KeyBind"
			if setting.Settings and setting.Settings.KeyBind then
				-- Check if the current button name matches a setting name
				if key:upper() == buttonName:upper() then
					return setting.Settings.KeyBind
				end
			end
		end
		return nil
	end

	for _, button in ipairs(script.Parent:GetDescendants()) do
		if button:IsA("Frame") and button.Name ~= "Target" then
			-- Find the setting for the current button
			local settingValue = findSettingByName(button.Name:upper(), HAVOC)

			-- Check for the KeyBind and update the KeyBind label
			if button:FindFirstChild("KeyBind") then
				local keyBindValue = findKeyBindValue(button.Name, HAVOC)
				if keyBindValue and typeof(keyBindValue) == "EnumItem" then
					print("Setting KeyBind for " .. button.Name .. " to " .. keyBindValue.Name)
					button.KeyBind.Text = keyBindValue.Name
				end
			end

			-- Update color if the setting is a boolean
			if settingValue ~= nil then
				local targetColor = (typeof(settingValue) == "boolean" and settingValue) and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(134, 0, 0)
				local tween = TweenService:Create(button.Toggle, TweenInfoON, { BackgroundColor3 = targetColor })
				tween:Play()
			end
		end
	end

end;
task.spawn(C_1f4);

return G2L["1"], require;
