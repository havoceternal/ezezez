getgenv().HAVOC = {
	AimLock = {
		Enabled = false,
		Target = "",
		Settings = {
			Mode = "HOLD",
			AimPart = "Head",
			KeyBind = Enum.KeyCode.C,
			CrewCheck = true,
			FriendCheck = true,
			AntiGroundShoot = true,
			WallCheck = true,
		}
	},
	Orbit = {
		Enabled = false,
		Target = "",
		Settings  = {
			AutoStomp = false,
			Void = false,
			AimPart = "Head",
			KeyBind = Enum.KeyCode.V
		}
	},
	LocalPlayer = {
		CFrameWalk = {
			Enabled = false,
			KeyBind = Enum.KeyCode.F,
			Speed = 100,
		},
		Fly = {
			Enabled = false,
			KeyBind = Enum.KeyCode.H,
			Speed = 200,
		},
		CharacterSettings = {
			InfStamina = false,
			NoShootingRecoil = false,
			AntiStomp = false,
			NoSeats = false,
		},
	},
	Player = {
		ESP = {
			Enabled = false,
			AlwaysOnTop = true,
			Box = false,
		},
		View = {
			Enabled = false,
			Target = "",
		},
		RageAim = {
			KillAura = false,
			Blacklist = {},
			Whitelist = {},
			WallBang = false,
		},
	},
	AutoSettings = {
		AutoReload = false,
		AutoShoot = false,
		AutoStomp = false,
		AutoMask = false,
	}
}

--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88    @uniquadev
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER 
]=]

-- Instances: 539 | Scripts: 35 | Modules: 0 | Tags: 0
local G2L = {};

-- StarterGui.havoc
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["IgnoreGuiInset"] = true;
G2L["1"]["ScreenInsets"] = Enum.ScreenInsets.DeviceSafeInsets;
G2L["1"]["Name"] = [[havoc]];
G2L["1"]["ResetOnSpawn"] = false;


-- StarterGui.havoc.ESPSFolder
G2L["2"] = Instance.new("Folder", G2L["1"]);
G2L["2"]["Name"] = [[ESPSFolder]];


-- StarterGui.havoc.ESPSFolder.Controller
G2L["3"] = Instance.new("LocalScript", G2L["2"]);
G2L["3"]["Name"] = [[Controller]];


-- StarterGui.havoc.MainFrame
G2L["4"] = Instance.new("Frame", G2L["1"]);
G2L["4"]["BorderSizePixel"] = 0;
G2L["4"]["BackgroundColor3"] = Color3.fromRGB(22, 0, 0);
G2L["4"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["4"]["Size"] = UDim2.new(0.29086, 0, 0.3085, 0);
G2L["4"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4"]["Name"] = [[MainFrame]];


-- StarterGui.havoc.MainFrame.UICorner
G2L["5"] = Instance.new("UICorner", G2L["4"]);
G2L["5"]["CornerRadius"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.Glow
G2L["6"] = Instance.new("ImageLabel", G2L["4"]);
G2L["6"]["ZIndex"] = -1;
G2L["6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6"]["Image"] = [[rbxassetid://5028857084]];
G2L["6"]["Size"] = UDim2.new(1.0978, 0, 1.10526, 0);
G2L["6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6"]["BackgroundTransparency"] = 1;
G2L["6"]["Name"] = [[Glow]];
G2L["6"]["Position"] = UDim2.new(-0.0504, 0, -0.0539, 0);


-- StarterGui.havoc.MainFrame.Glow.UIGradient
G2L["7"] = Instance.new("UIGradient", G2L["6"]);



-- StarterGui.havoc.MainFrame.Glow.GLOW
G2L["8"] = Instance.new("LocalScript", G2L["6"]);
G2L["8"]["Name"] = [[GLOW]];


-- StarterGui.havoc.MainFrame.Glow.UIAspectRatioConstraint
G2L["9"] = Instance.new("UIAspectRatioConstraint", G2L["6"]);
G2L["9"]["AspectRatio"] = 1.83793;


-- StarterGui.havoc.MainFrame.Drag
G2L["a"] = Instance.new("Frame", G2L["4"]);
G2L["a"]["ZIndex"] = 2;
G2L["a"]["BorderSizePixel"] = 0;
G2L["a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a"]["Size"] = UDim2.new(1, 0, 0.1108, 0);
G2L["a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a"]["Name"] = [[Drag]];
G2L["a"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.Drag.DragScript
G2L["b"] = Instance.new("LocalScript", G2L["a"]);
G2L["b"]["Name"] = [[DragScript]];


-- StarterGui.havoc.MainFrame.Drag.UIAspectRatioConstraint
G2L["c"] = Instance.new("UIAspectRatioConstraint", G2L["a"]);
G2L["c"]["AspectRatio"] = 16.33885;


-- StarterGui.havoc.MainFrame.ViewFrame
G2L["d"] = Instance.new("Frame", G2L["4"]);
G2L["d"]["BorderSizePixel"] = 0;
G2L["d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d"]["Size"] = UDim2.new(0.79341, 0, 0.8892, 0);
G2L["d"]["Position"] = UDim2.new(0.20659, 0, 0.1108, 0);
G2L["d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d"]["Name"] = [[ViewFrame]];
G2L["d"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer
G2L["e"] = Instance.new("ScrollingFrame", G2L["d"]);
G2L["e"]["Visible"] = false;
G2L["e"]["Active"] = true;
G2L["e"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["e"]["BorderSizePixel"] = 0;
G2L["e"]["CanvasSize"] = UDim2.new(0, 0, 2.5, 0);
G2L["e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e"]["Name"] = [[LocalPlayer]];
G2L["e"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["e"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e"]["ScrollBarThickness"] = 0;
G2L["e"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.UIListLayout
G2L["f"] = Instance.new("UIListLayout", G2L["e"]);
G2L["f"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["f"]["Padding"] = UDim.new(0.05, 0);
G2L["f"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe
G2L["10"] = Instance.new("Frame", G2L["e"]);
G2L["10"]["BorderSizePixel"] = 0;
G2L["10"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["10"]["Size"] = UDim2.new(0.906, 0, 0.676, 0);
G2L["10"]["Position"] = UDim2.new(0.0566, 0, -0, 0);
G2L["10"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10"]["Name"] = [[Cframe]];
G2L["10"]["LayoutOrder"] = 2;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.UICorner
G2L["11"] = Instance.new("UICorner", G2L["10"]);
G2L["11"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.Title
G2L["12"] = Instance.new("TextLabel", G2L["10"]);
G2L["12"]["TextWrapped"] = true;
G2L["12"]["BorderSizePixel"] = 0;
G2L["12"]["TextSize"] = 14;
G2L["12"]["TextScaled"] = true;
G2L["12"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["12"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["12"]["BackgroundTransparency"] = 1;
G2L["12"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["12"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12"]["Text"] = [[CFRAME MOVEMENT]];
G2L["12"]["Name"] = [[Title]];
G2L["12"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.Title.UIAspectRatioConstraint
G2L["13"] = Instance.new("UIAspectRatioConstraint", G2L["12"]);
G2L["13"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.UIGradient
G2L["14"] = Instance.new("UIGradient", G2L["10"]);
G2L["14"]["Rotation"] = 90;
G2L["14"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.UIListLayout
G2L["15"] = Instance.new("UIListLayout", G2L["10"]);
G2L["15"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.UIAspectRatioConstraint
G2L["16"] = Instance.new("UIAspectRatioConstraint", G2L["10"]);
G2L["16"]["AspectRatio"] = 2.1659;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK
G2L["17"] = Instance.new("Frame", G2L["10"]);
G2L["17"]["BorderSizePixel"] = 0;
G2L["17"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["17"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["17"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17"]["Name"] = [[CFRAMEWALK]];
G2L["17"]["LayoutOrder"] = 1;
G2L["17"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Trigger
G2L["18"] = Instance.new("TextButton", G2L["17"]);
G2L["18"]["TextWrapped"] = true;
G2L["18"]["BorderSizePixel"] = 0;
G2L["18"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["18"]["TextSize"] = 14;
G2L["18"]["TextScaled"] = true;
G2L["18"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["18"]["BackgroundTransparency"] = 1;
G2L["18"]["Name"] = [[Trigger]];
G2L["18"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18"]["Text"] = [[CFRAME WALK]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Trigger.UITextSizeConstraint
G2L["19"] = Instance.new("UITextSizeConstraint", G2L["18"]);
G2L["19"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Trigger.UIAspectRatioConstraint
G2L["1a"] = Instance.new("UIAspectRatioConstraint", G2L["18"]);
G2L["1a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Toggle
G2L["1b"] = Instance.new("TextLabel", G2L["17"]);
G2L["1b"]["BorderSizePixel"] = 0;
G2L["1b"]["TextSize"] = 14;
G2L["1b"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b"]["Text"] = [[]];
G2L["1b"]["Name"] = [[Toggle]];
G2L["1b"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Toggle.UICorner
G2L["1c"] = Instance.new("UICorner", G2L["1b"]);
G2L["1c"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Toggle.UIAspectRatioConstraint
G2L["1d"] = Instance.new("UIAspectRatioConstraint", G2L["1b"]);
G2L["1d"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Handle
G2L["1e"] = Instance.new("LocalScript", G2L["17"]);
G2L["1e"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.UIAspectRatioConstraint
G2L["1f"] = Instance.new("UIAspectRatioConstraint", G2L["17"]);
G2L["1f"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.KeyBind
G2L["20"] = Instance.new("TextButton", G2L["17"]);
G2L["20"]["TextWrapped"] = true;
G2L["20"]["BorderSizePixel"] = 0;
G2L["20"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["20"]["TextSize"] = 14;
G2L["20"]["TextScaled"] = true;
G2L["20"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["20"]["Size"] = UDim2.new(0.30638, 0, 1, 0);
G2L["20"]["BackgroundTransparency"] = 1;
G2L["20"]["Name"] = [[KeyBind]];
G2L["20"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20"]["Text"] = [[F]];
G2L["20"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.KeyBind.UITextSizeConstraint
G2L["21"] = Instance.new("UITextSizeConstraint", G2L["20"]);
G2L["21"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMESPEED
G2L["22"] = Instance.new("Frame", G2L["10"]);
G2L["22"]["BorderSizePixel"] = 0;
G2L["22"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["22"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["22"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["22"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["22"]["Name"] = [[CFRAMESPEED]];
G2L["22"]["LayoutOrder"] = 2;
G2L["22"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMESPEED.UIAspectRatioConstraint
G2L["23"] = Instance.new("UIAspectRatioConstraint", G2L["22"]);
G2L["23"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMESPEED.SPEED
G2L["24"] = Instance.new("TextBox", G2L["22"]);
G2L["24"]["Name"] = [[SPEED]];
G2L["24"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["24"]["BorderSizePixel"] = 0;
G2L["24"]["TextWrapped"] = true;
G2L["24"]["TextSize"] = 14;
G2L["24"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["24"]["TextScaled"] = true;
G2L["24"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["24"]["PlaceholderText"] = [[CFRAME SPEED]];
G2L["24"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["24"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24"]["Text"] = [[100]];
G2L["24"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMESPEED.SPEED.UITextSizeConstraint
G2L["25"] = Instance.new("UITextSizeConstraint", G2L["24"]);
G2L["25"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMESPEED.SPEED.UIAspectRatioConstraint
G2L["26"] = Instance.new("UIAspectRatioConstraint", G2L["24"]);
G2L["26"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY
G2L["27"] = Instance.new("Frame", G2L["10"]);
G2L["27"]["BorderSizePixel"] = 0;
G2L["27"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["27"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["27"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["27"]["Name"] = [[FLY]];
G2L["27"]["LayoutOrder"] = 3;
G2L["27"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Trigger
G2L["28"] = Instance.new("TextButton", G2L["27"]);
G2L["28"]["TextWrapped"] = true;
G2L["28"]["BorderSizePixel"] = 0;
G2L["28"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["28"]["TextSize"] = 14;
G2L["28"]["TextScaled"] = true;
G2L["28"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["28"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["28"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["28"]["BackgroundTransparency"] = 1;
G2L["28"]["Name"] = [[Trigger]];
G2L["28"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["28"]["Text"] = [[FLY]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Trigger.UITextSizeConstraint
G2L["29"] = Instance.new("UITextSizeConstraint", G2L["28"]);
G2L["29"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Trigger.UIAspectRatioConstraint
G2L["2a"] = Instance.new("UIAspectRatioConstraint", G2L["28"]);
G2L["2a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Toggle
G2L["2b"] = Instance.new("TextLabel", G2L["27"]);
G2L["2b"]["BorderSizePixel"] = 0;
G2L["2b"]["TextSize"] = 14;
G2L["2b"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["2b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2b"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2b"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["2b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2b"]["Text"] = [[]];
G2L["2b"]["Name"] = [[Toggle]];
G2L["2b"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Toggle.UICorner
G2L["2c"] = Instance.new("UICorner", G2L["2b"]);
G2L["2c"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Toggle.UIAspectRatioConstraint
G2L["2d"] = Instance.new("UIAspectRatioConstraint", G2L["2b"]);
G2L["2d"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.UIAspectRatioConstraint
G2L["2e"] = Instance.new("UIAspectRatioConstraint", G2L["27"]);
G2L["2e"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.KeyBind
G2L["2f"] = Instance.new("TextButton", G2L["27"]);
G2L["2f"]["TextWrapped"] = true;
G2L["2f"]["BorderSizePixel"] = 0;
G2L["2f"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["2f"]["TextSize"] = 14;
G2L["2f"]["TextScaled"] = true;
G2L["2f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2f"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2f"]["Size"] = UDim2.new(0.30638, 0, 1, 0);
G2L["2f"]["BackgroundTransparency"] = 1;
G2L["2f"]["Name"] = [[KeyBind]];
G2L["2f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2f"]["Text"] = [[H]];
G2L["2f"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.KeyBind.UITextSizeConstraint
G2L["30"] = Instance.new("UITextSizeConstraint", G2L["2f"]);
G2L["30"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Handle
G2L["31"] = Instance.new("LocalScript", G2L["27"]);
G2L["31"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLYSPEED
G2L["32"] = Instance.new("Frame", G2L["10"]);
G2L["32"]["BorderSizePixel"] = 0;
G2L["32"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["32"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["32"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["32"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["32"]["Name"] = [[FLYSPEED]];
G2L["32"]["LayoutOrder"] = 4;
G2L["32"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLYSPEED.UIAspectRatioConstraint
G2L["33"] = Instance.new("UIAspectRatioConstraint", G2L["32"]);
G2L["33"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLYSPEED.SPEED
G2L["34"] = Instance.new("TextBox", G2L["32"]);
G2L["34"]["Name"] = [[SPEED]];
G2L["34"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["34"]["BorderSizePixel"] = 0;
G2L["34"]["TextWrapped"] = true;
G2L["34"]["TextSize"] = 14;
G2L["34"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["34"]["TextScaled"] = true;
G2L["34"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["34"]["PlaceholderText"] = [[CFRAME FLY SPEED]];
G2L["34"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["34"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["34"]["Text"] = [[200]];
G2L["34"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLYSPEED.SPEED.UITextSizeConstraint
G2L["35"] = Instance.new("UITextSizeConstraint", G2L["34"]);
G2L["35"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLYSPEED.SPEED.UIAspectRatioConstraint
G2L["36"] = Instance.new("UIAspectRatioConstraint", G2L["34"]);
G2L["36"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.UIAspectRatioConstraint
G2L["37"] = Instance.new("UIAspectRatioConstraint", G2L["e"]);
G2L["37"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings
G2L["38"] = Instance.new("Frame", G2L["e"]);
G2L["38"]["BorderSizePixel"] = 0;
G2L["38"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["38"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["38"]["Size"] = UDim2.new(0.906, 0, 0.676, 0);
G2L["38"]["Position"] = UDim2.new(0.0566, 0, -0, 0);
G2L["38"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["38"]["Name"] = [[Playersettings]];
G2L["38"]["LayoutOrder"] = 3;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.UICorner
G2L["39"] = Instance.new("UICorner", G2L["38"]);
G2L["39"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.Title
G2L["3a"] = Instance.new("TextLabel", G2L["38"]);
G2L["3a"]["TextWrapped"] = true;
G2L["3a"]["BorderSizePixel"] = 0;
G2L["3a"]["TextSize"] = 14;
G2L["3a"]["TextScaled"] = true;
G2L["3a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3a"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["3a"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["3a"]["BackgroundTransparency"] = 1;
G2L["3a"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["3a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3a"]["Text"] = [[CHARACTER SETTINGS]];
G2L["3a"]["Name"] = [[Title]];
G2L["3a"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.Title.UIAspectRatioConstraint
G2L["3b"] = Instance.new("UIAspectRatioConstraint", G2L["3a"]);
G2L["3b"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.UIGradient
G2L["3c"] = Instance.new("UIGradient", G2L["38"]);
G2L["3c"]["Rotation"] = 90;
G2L["3c"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.UIListLayout
G2L["3d"] = Instance.new("UIListLayout", G2L["38"]);
G2L["3d"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.UIAspectRatioConstraint
G2L["3e"] = Instance.new("UIAspectRatioConstraint", G2L["38"]);
G2L["3e"]["AspectRatio"] = 2.1659;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA
G2L["3f"] = Instance.new("Frame", G2L["38"]);
G2L["3f"]["BorderSizePixel"] = 0;
G2L["3f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3f"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["3f"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["3f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3f"]["Name"] = [[INFSTAMINA]];
G2L["3f"]["LayoutOrder"] = 1;
G2L["3f"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Trigger
G2L["40"] = Instance.new("TextButton", G2L["3f"]);
G2L["40"]["TextWrapped"] = true;
G2L["40"]["BorderSizePixel"] = 0;
G2L["40"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["40"]["TextSize"] = 14;
G2L["40"]["TextScaled"] = true;
G2L["40"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["40"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["40"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["40"]["BackgroundTransparency"] = 1;
G2L["40"]["Name"] = [[Trigger]];
G2L["40"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["40"]["Text"] = [[INF STAMINA]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Trigger.UITextSizeConstraint
G2L["41"] = Instance.new("UITextSizeConstraint", G2L["40"]);
G2L["41"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Trigger.UIAspectRatioConstraint
G2L["42"] = Instance.new("UIAspectRatioConstraint", G2L["40"]);
G2L["42"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Toggle
G2L["43"] = Instance.new("TextLabel", G2L["3f"]);
G2L["43"]["BorderSizePixel"] = 0;
G2L["43"]["TextSize"] = 14;
G2L["43"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["43"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["43"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["43"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43"]["Text"] = [[]];
G2L["43"]["Name"] = [[Toggle]];
G2L["43"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Toggle.UICorner
G2L["44"] = Instance.new("UICorner", G2L["43"]);
G2L["44"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Toggle.UIAspectRatioConstraint
G2L["45"] = Instance.new("UIAspectRatioConstraint", G2L["43"]);
G2L["45"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.UIAspectRatioConstraint
G2L["46"] = Instance.new("UIAspectRatioConstraint", G2L["3f"]);
G2L["46"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Handle
G2L["47"] = Instance.new("LocalScript", G2L["3f"]);
G2L["47"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil
G2L["48"] = Instance.new("Frame", G2L["38"]);
G2L["48"]["BorderSizePixel"] = 0;
G2L["48"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["48"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["48"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["48"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["48"]["Name"] = [[NoShootingRecoil]];
G2L["48"]["LayoutOrder"] = 2;
G2L["48"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Trigger
G2L["49"] = Instance.new("TextButton", G2L["48"]);
G2L["49"]["TextWrapped"] = true;
G2L["49"]["BorderSizePixel"] = 0;
G2L["49"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["49"]["TextSize"] = 14;
G2L["49"]["TextScaled"] = true;
G2L["49"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["49"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["49"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["49"]["BackgroundTransparency"] = 1;
G2L["49"]["Name"] = [[Trigger]];
G2L["49"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["49"]["Text"] = [[NO SHOOTING RECOIL]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Trigger.UITextSizeConstraint
G2L["4a"] = Instance.new("UITextSizeConstraint", G2L["49"]);
G2L["4a"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Trigger.UIAspectRatioConstraint
G2L["4b"] = Instance.new("UIAspectRatioConstraint", G2L["49"]);
G2L["4b"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Toggle
G2L["4c"] = Instance.new("TextLabel", G2L["48"]);
G2L["4c"]["BorderSizePixel"] = 0;
G2L["4c"]["TextSize"] = 14;
G2L["4c"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["4c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["4c"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4c"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["4c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4c"]["Text"] = [[]];
G2L["4c"]["Name"] = [[Toggle]];
G2L["4c"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Toggle.UICorner
G2L["4d"] = Instance.new("UICorner", G2L["4c"]);
G2L["4d"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Toggle.UIAspectRatioConstraint
G2L["4e"] = Instance.new("UIAspectRatioConstraint", G2L["4c"]);
G2L["4e"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.UIAspectRatioConstraint
G2L["4f"] = Instance.new("UIAspectRatioConstraint", G2L["48"]);
G2L["4f"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Handle
G2L["50"] = Instance.new("LocalScript", G2L["48"]);
G2L["50"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp
G2L["51"] = Instance.new("Frame", G2L["38"]);
G2L["51"]["BorderSizePixel"] = 0;
G2L["51"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["51"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["51"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["51"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["51"]["Name"] = [[AntiStomp]];
G2L["51"]["LayoutOrder"] = 3;
G2L["51"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Trigger
G2L["52"] = Instance.new("TextButton", G2L["51"]);
G2L["52"]["TextWrapped"] = true;
G2L["52"]["BorderSizePixel"] = 0;
G2L["52"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["52"]["TextSize"] = 14;
G2L["52"]["TextScaled"] = true;
G2L["52"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["52"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["52"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["52"]["BackgroundTransparency"] = 1;
G2L["52"]["Name"] = [[Trigger]];
G2L["52"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["52"]["Text"] = [[ANTI STOMP]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Trigger.UITextSizeConstraint
G2L["53"] = Instance.new("UITextSizeConstraint", G2L["52"]);
G2L["53"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Trigger.UIAspectRatioConstraint
G2L["54"] = Instance.new("UIAspectRatioConstraint", G2L["52"]);
G2L["54"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Toggle
G2L["55"] = Instance.new("TextLabel", G2L["51"]);
G2L["55"]["BorderSizePixel"] = 0;
G2L["55"]["TextSize"] = 14;
G2L["55"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["55"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["55"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["55"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["55"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["55"]["Text"] = [[]];
G2L["55"]["Name"] = [[Toggle]];
G2L["55"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Toggle.UICorner
G2L["56"] = Instance.new("UICorner", G2L["55"]);
G2L["56"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Toggle.UIAspectRatioConstraint
G2L["57"] = Instance.new("UIAspectRatioConstraint", G2L["55"]);
G2L["57"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.UIAspectRatioConstraint
G2L["58"] = Instance.new("UIAspectRatioConstraint", G2L["51"]);
G2L["58"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Handle
G2L["59"] = Instance.new("LocalScript", G2L["51"]);
G2L["59"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats
G2L["5a"] = Instance.new("Frame", G2L["38"]);
G2L["5a"]["BorderSizePixel"] = 0;
G2L["5a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["5a"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["5a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5a"]["Name"] = [[NoSeats]];
G2L["5a"]["LayoutOrder"] = 3;
G2L["5a"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Trigger
G2L["5b"] = Instance.new("TextButton", G2L["5a"]);
G2L["5b"]["TextWrapped"] = true;
G2L["5b"]["BorderSizePixel"] = 0;
G2L["5b"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["5b"]["TextSize"] = 14;
G2L["5b"]["TextScaled"] = true;
G2L["5b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5b"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["5b"]["BackgroundTransparency"] = 1;
G2L["5b"]["Name"] = [[Trigger]];
G2L["5b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5b"]["Text"] = [[NO SEATS]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Trigger.UITextSizeConstraint
G2L["5c"] = Instance.new("UITextSizeConstraint", G2L["5b"]);
G2L["5c"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Trigger.UIAspectRatioConstraint
G2L["5d"] = Instance.new("UIAspectRatioConstraint", G2L["5b"]);
G2L["5d"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Toggle
G2L["5e"] = Instance.new("TextLabel", G2L["5a"]);
G2L["5e"]["BorderSizePixel"] = 0;
G2L["5e"]["TextSize"] = 14;
G2L["5e"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["5e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5e"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5e"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["5e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5e"]["Text"] = [[]];
G2L["5e"]["Name"] = [[Toggle]];
G2L["5e"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Toggle.UICorner
G2L["5f"] = Instance.new("UICorner", G2L["5e"]);
G2L["5f"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Toggle.UIAspectRatioConstraint
G2L["60"] = Instance.new("UIAspectRatioConstraint", G2L["5e"]);
G2L["60"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.UIAspectRatioConstraint
G2L["61"] = Instance.new("UIAspectRatioConstraint", G2L["5a"]);
G2L["61"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Handle
G2L["62"] = Instance.new("LocalScript", G2L["5a"]);
G2L["62"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.UIPadding
G2L["63"] = Instance.new("UIPadding", G2L["e"]);
G2L["63"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player
G2L["64"] = Instance.new("ScrollingFrame", G2L["d"]);
G2L["64"]["Visible"] = false;
G2L["64"]["Active"] = true;
G2L["64"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["64"]["BorderSizePixel"] = 0;
G2L["64"]["CanvasSize"] = UDim2.new(0, 0, 3, 0);
G2L["64"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["64"]["Name"] = [[Player]];
G2L["64"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["64"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["64"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["64"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["64"]["ScrollBarThickness"] = 0;
G2L["64"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.UIListLayout
G2L["65"] = Instance.new("UIListLayout", G2L["64"]);
G2L["65"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["65"]["Padding"] = UDim.new(0.05, 0);
G2L["65"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.UIAspectRatioConstraint
G2L["66"] = Instance.new("UIAspectRatioConstraint", G2L["64"]);
G2L["66"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp
G2L["67"] = Instance.new("Frame", G2L["64"]);
G2L["67"]["BorderSizePixel"] = 0;
G2L["67"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["67"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["67"]["Size"] = UDim2.new(0.90639, 0, 0.67436, 0);
G2L["67"]["Position"] = UDim2.new(0.0468, 0, 0.03093, 0);
G2L["67"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["67"]["Name"] = [[Esp]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.UICorner
G2L["68"] = Instance.new("UICorner", G2L["67"]);
G2L["68"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.Title
G2L["69"] = Instance.new("TextLabel", G2L["67"]);
G2L["69"]["TextWrapped"] = true;
G2L["69"]["BorderSizePixel"] = 0;
G2L["69"]["TextSize"] = 14;
G2L["69"]["TextScaled"] = true;
G2L["69"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["69"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["69"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["69"]["BackgroundTransparency"] = 1;
G2L["69"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["69"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["69"]["Text"] = [[ESP]];
G2L["69"]["Name"] = [[Title]];
G2L["69"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.Title.UIAspectRatioConstraint
G2L["6a"] = Instance.new("UIAspectRatioConstraint", G2L["69"]);
G2L["6a"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.UIGradient
G2L["6b"] = Instance.new("UIGradient", G2L["67"]);
G2L["6b"]["Rotation"] = 90;
G2L["6b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.UIListLayout
G2L["6c"] = Instance.new("UIListLayout", G2L["67"]);
G2L["6c"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP
G2L["6d"] = Instance.new("Frame", G2L["67"]);
G2L["6d"]["BorderSizePixel"] = 0;
G2L["6d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6d"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["6d"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["6d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6d"]["Name"] = [[ESP]];
G2L["6d"]["LayoutOrder"] = 2;
G2L["6d"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Trigger
G2L["6e"] = Instance.new("TextButton", G2L["6d"]);
G2L["6e"]["TextWrapped"] = true;
G2L["6e"]["BorderSizePixel"] = 0;
G2L["6e"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["6e"]["TextSize"] = 14;
G2L["6e"]["TextScaled"] = true;
G2L["6e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["6e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["6e"]["BackgroundTransparency"] = 1;
G2L["6e"]["Name"] = [[Trigger]];
G2L["6e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6e"]["Text"] = [[ESP]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Trigger.UITextSizeConstraint
G2L["6f"] = Instance.new("UITextSizeConstraint", G2L["6e"]);
G2L["6f"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Trigger.UIAspectRatioConstraint
G2L["70"] = Instance.new("UIAspectRatioConstraint", G2L["6e"]);
G2L["70"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Toggle
G2L["71"] = Instance.new("TextLabel", G2L["6d"]);
G2L["71"]["BorderSizePixel"] = 0;
G2L["71"]["TextSize"] = 14;
G2L["71"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["71"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["71"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["71"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["71"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["71"]["Text"] = [[]];
G2L["71"]["Name"] = [[Toggle]];
G2L["71"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Toggle.UICorner
G2L["72"] = Instance.new("UICorner", G2L["71"]);
G2L["72"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.Toggle.UIAspectRatioConstraint
G2L["73"] = Instance.new("UIAspectRatioConstraint", G2L["71"]);
G2L["73"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP.UIAspectRatioConstraint
G2L["74"] = Instance.new("UIAspectRatioConstraint", G2L["6d"]);
G2L["74"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP
G2L["75"] = Instance.new("Frame", G2L["67"]);
G2L["75"]["BorderSizePixel"] = 0;
G2L["75"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["75"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["75"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["75"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["75"]["Name"] = [[ALWAYSONTOP]];
G2L["75"]["LayoutOrder"] = 2;
G2L["75"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Trigger
G2L["76"] = Instance.new("TextButton", G2L["75"]);
G2L["76"]["TextWrapped"] = true;
G2L["76"]["BorderSizePixel"] = 0;
G2L["76"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["76"]["TextSize"] = 14;
G2L["76"]["TextScaled"] = true;
G2L["76"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["76"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["76"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["76"]["BackgroundTransparency"] = 1;
G2L["76"]["Name"] = [[Trigger]];
G2L["76"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["76"]["Text"] = [[ALWAYS ON TOP]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Trigger.UITextSizeConstraint
G2L["77"] = Instance.new("UITextSizeConstraint", G2L["76"]);
G2L["77"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Trigger.UIAspectRatioConstraint
G2L["78"] = Instance.new("UIAspectRatioConstraint", G2L["76"]);
G2L["78"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Toggle
G2L["79"] = Instance.new("TextLabel", G2L["75"]);
G2L["79"]["BorderSizePixel"] = 0;
G2L["79"]["TextSize"] = 14;
G2L["79"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["79"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["79"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["79"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["79"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["79"]["Text"] = [[]];
G2L["79"]["Name"] = [[Toggle]];
G2L["79"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Toggle.UICorner
G2L["7a"] = Instance.new("UICorner", G2L["79"]);
G2L["7a"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.Toggle.UIAspectRatioConstraint
G2L["7b"] = Instance.new("UIAspectRatioConstraint", G2L["79"]);
G2L["7b"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ALWAYSONTOP.UIAspectRatioConstraint
G2L["7c"] = Instance.new("UIAspectRatioConstraint", G2L["75"]);
G2L["7c"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX
G2L["7d"] = Instance.new("Frame", G2L["67"]);
G2L["7d"]["BorderSizePixel"] = 0;
G2L["7d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7d"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["7d"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["7d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7d"]["Name"] = [[BOX]];
G2L["7d"]["LayoutOrder"] = 3;
G2L["7d"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Trigger
G2L["7e"] = Instance.new("TextButton", G2L["7d"]);
G2L["7e"]["TextWrapped"] = true;
G2L["7e"]["BorderSizePixel"] = 0;
G2L["7e"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["7e"]["TextSize"] = 14;
G2L["7e"]["TextScaled"] = true;
G2L["7e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["7e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["7e"]["BackgroundTransparency"] = 1;
G2L["7e"]["Name"] = [[Trigger]];
G2L["7e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7e"]["Text"] = [[BOX]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Trigger.UITextSizeConstraint
G2L["7f"] = Instance.new("UITextSizeConstraint", G2L["7e"]);
G2L["7f"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Trigger.UIAspectRatioConstraint
G2L["80"] = Instance.new("UIAspectRatioConstraint", G2L["7e"]);
G2L["80"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Toggle
G2L["81"] = Instance.new("TextLabel", G2L["7d"]);
G2L["81"]["BorderSizePixel"] = 0;
G2L["81"]["TextSize"] = 14;
G2L["81"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["81"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["81"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["81"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["81"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["81"]["Text"] = [[]];
G2L["81"]["Name"] = [[Toggle]];
G2L["81"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Toggle.UICorner
G2L["82"] = Instance.new("UICorner", G2L["81"]);
G2L["82"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.Toggle.UIAspectRatioConstraint
G2L["83"] = Instance.new("UIAspectRatioConstraint", G2L["81"]);
G2L["83"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.BOX.UIAspectRatioConstraint
G2L["84"] = Instance.new("UIAspectRatioConstraint", G2L["7d"]);
G2L["84"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP
G2L["85"] = Instance.new("LocalScript", G2L["67"]);
G2L["85"]["Name"] = [[ESP]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESPGUI
G2L["86"] = Instance.new("BillboardGui", G2L["67"]);
G2L["86"]["Active"] = true;
G2L["86"]["AlwaysOnTop"] = true;
G2L["86"]["Size"] = UDim2.new(7, 0, 9, 0);
G2L["86"]["Enabled"] = false;
G2L["86"]["ResetOnSpawn"] = false;
G2L["86"]["Name"] = [[ESPGUI]];
G2L["86"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESPGUI.PLAYERNAME
G2L["87"] = Instance.new("TextLabel", G2L["86"]);
G2L["87"]["TextWrapped"] = true;
G2L["87"]["BorderSizePixel"] = 0;
G2L["87"]["TextSize"] = 14;
G2L["87"]["TextScaled"] = true;
G2L["87"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["87"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["87"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["87"]["BackgroundTransparency"] = 1;
G2L["87"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["87"]["Size"] = UDim2.new(0, 100, 0, 16);
G2L["87"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["87"]["Text"] = [[scafrysnanty]];
G2L["87"]["Name"] = [[PLAYERNAME]];
G2L["87"]["Position"] = UDim2.new(0.5, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESPGUI.BOX
G2L["88"] = Instance.new("ImageLabel", G2L["86"]);
G2L["88"]["BorderSizePixel"] = 0;
G2L["88"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["88"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["88"]["Image"] = [[rbxassetid://130107238038303]];
G2L["88"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["88"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["88"]["BackgroundTransparency"] = 1;
G2L["88"]["Name"] = [[BOX]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESPGUI.Health
G2L["89"] = Instance.new("Frame", G2L["86"]);
G2L["89"]["BorderSizePixel"] = 0;
G2L["89"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["89"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["89"]["Size"] = UDim2.new(0.09, 0, 0.75, 0);
G2L["89"]["Position"] = UDim2.new(0.95, 0, 0.5, 0);
G2L["89"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["89"]["Name"] = [[Health]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESPGUI.Health.Bar
G2L["8a"] = Instance.new("Frame", G2L["89"]);
G2L["8a"]["BorderSizePixel"] = 0;
G2L["8a"]["BackgroundColor3"] = Color3.fromRGB(27, 4, 96);
G2L["8a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["8a"]["Size"] = UDim2.new(0.8, 0, 0.975, 0);
G2L["8a"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["8a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8a"]["Name"] = [[Bar]];
G2L["8a"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESPGUI.Health.Bar.Slide
G2L["8b"] = Instance.new("Frame", G2L["8a"]);
G2L["8b"]["BorderSizePixel"] = 0;
G2L["8b"]["BackgroundColor3"] = Color3.fromRGB(27, 4, 96);
G2L["8b"]["AnchorPoint"] = Vector2.new(0.5, 1);
G2L["8b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["8b"]["Position"] = UDim2.new(0.5, 0, 1, 0);
G2L["8b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8b"]["Name"] = [[Slide]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.UIPadding
G2L["8c"] = Instance.new("UIPadding", G2L["64"]);
G2L["8c"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View
G2L["8d"] = Instance.new("Frame", G2L["64"]);
G2L["8d"]["BorderSizePixel"] = 0;
G2L["8d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8d"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["8d"]["Size"] = UDim2.new(0.90639, 0, 0.67436, 0);
G2L["8d"]["Position"] = UDim2.new(0.0468, 0, 0.03093, 0);
G2L["8d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8d"]["Name"] = [[View]];
G2L["8d"]["LayoutOrder"] = 2;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.UICorner
G2L["8e"] = Instance.new("UICorner", G2L["8d"]);
G2L["8e"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.Title
G2L["8f"] = Instance.new("TextLabel", G2L["8d"]);
G2L["8f"]["TextWrapped"] = true;
G2L["8f"]["BorderSizePixel"] = 0;
G2L["8f"]["TextSize"] = 14;
G2L["8f"]["TextScaled"] = true;
G2L["8f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8f"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["8f"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["8f"]["BackgroundTransparency"] = 1;
G2L["8f"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["8f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8f"]["Text"] = [[VIEW]];
G2L["8f"]["Name"] = [[Title]];
G2L["8f"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.Title.UIAspectRatioConstraint
G2L["90"] = Instance.new("UIAspectRatioConstraint", G2L["8f"]);
G2L["90"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.UIGradient
G2L["91"] = Instance.new("UIGradient", G2L["8d"]);
G2L["91"]["Rotation"] = 90;
G2L["91"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.UIListLayout
G2L["92"] = Instance.new("UIListLayout", G2L["8d"]);
G2L["92"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW
G2L["93"] = Instance.new("Frame", G2L["8d"]);
G2L["93"]["BorderSizePixel"] = 0;
G2L["93"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["93"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["93"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["93"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["93"]["Name"] = [[VIEW]];
G2L["93"]["LayoutOrder"] = 1;
G2L["93"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Trigger
G2L["94"] = Instance.new("TextButton", G2L["93"]);
G2L["94"]["TextWrapped"] = true;
G2L["94"]["BorderSizePixel"] = 0;
G2L["94"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["94"]["TextSize"] = 14;
G2L["94"]["TextScaled"] = true;
G2L["94"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["94"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["94"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["94"]["BackgroundTransparency"] = 1;
G2L["94"]["Name"] = [[Trigger]];
G2L["94"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["94"]["Text"] = [[SPECTATE]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Trigger.UITextSizeConstraint
G2L["95"] = Instance.new("UITextSizeConstraint", G2L["94"]);
G2L["95"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Trigger.UIAspectRatioConstraint
G2L["96"] = Instance.new("UIAspectRatioConstraint", G2L["94"]);
G2L["96"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Toggle
G2L["97"] = Instance.new("TextLabel", G2L["93"]);
G2L["97"]["BorderSizePixel"] = 0;
G2L["97"]["TextSize"] = 14;
G2L["97"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["97"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["97"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["97"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["97"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["97"]["Text"] = [[]];
G2L["97"]["Name"] = [[Toggle]];
G2L["97"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Toggle.UICorner
G2L["98"] = Instance.new("UICorner", G2L["97"]);
G2L["98"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.Toggle.UIAspectRatioConstraint
G2L["99"] = Instance.new("UIAspectRatioConstraint", G2L["97"]);
G2L["99"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.VIEW.UIAspectRatioConstraint
G2L["9a"] = Instance.new("UIAspectRatioConstraint", G2L["93"]);
G2L["9a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.UIAspectRatioConstraint
G2L["9b"] = Instance.new("UIAspectRatioConstraint", G2L["8d"]);
G2L["9b"]["AspectRatio"] = 2.17121;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TARGETNAME
G2L["9c"] = Instance.new("Frame", G2L["8d"]);
G2L["9c"]["BorderSizePixel"] = 0;
G2L["9c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9c"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["9c"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["9c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9c"]["Name"] = [[TARGETNAME]];
G2L["9c"]["LayoutOrder"] = 2;
G2L["9c"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TARGETNAME.UIAspectRatioConstraint
G2L["9d"] = Instance.new("UIAspectRatioConstraint", G2L["9c"]);
G2L["9d"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TARGETNAME.TARGET
G2L["9e"] = Instance.new("TextBox", G2L["9c"]);
G2L["9e"]["Name"] = [[TARGET]];
G2L["9e"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["9e"]["BorderSizePixel"] = 0;
G2L["9e"]["TextWrapped"] = true;
G2L["9e"]["TextSize"] = 14;
G2L["9e"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["9e"]["TextScaled"] = true;
G2L["9e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["9e"]["ClearTextOnFocus"] = false;
G2L["9e"]["PlaceholderText"] = [[TARGET NAME OR DISPLAY]];
G2L["9e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["9e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9e"]["Text"] = [[]];
G2L["9e"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TARGETNAME.TARGET.UITextSizeConstraint
G2L["9f"] = Instance.new("UITextSizeConstraint", G2L["9e"]);
G2L["9f"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TARGETNAME.TARGET.UIAspectRatioConstraint
G2L["a0"] = Instance.new("UIAspectRatioConstraint", G2L["9e"]);
G2L["a0"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.Spectate
G2L["a1"] = Instance.new("LocalScript", G2L["8d"]);
G2L["a1"]["Name"] = [[Spectate]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TargetNameHandler
G2L["a2"] = Instance.new("LocalScript", G2L["8d"]);
G2L["a2"]["Name"] = [[TargetNameHandler]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim
G2L["a3"] = Instance.new("Frame", G2L["64"]);
G2L["a3"]["BorderSizePixel"] = 0;
G2L["a3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a3"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["a3"]["Size"] = UDim2.new(0.90639, 0, 0.67436, 0);
G2L["a3"]["Position"] = UDim2.new(0.0468, 0, 0.03093, 0);
G2L["a3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a3"]["Name"] = [[RageAim]];
G2L["a3"]["LayoutOrder"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.UICorner
G2L["a4"] = Instance.new("UICorner", G2L["a3"]);
G2L["a4"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Title
G2L["a5"] = Instance.new("TextLabel", G2L["a3"]);
G2L["a5"]["TextWrapped"] = true;
G2L["a5"]["BorderSizePixel"] = 0;
G2L["a5"]["TextSize"] = 14;
G2L["a5"]["TextScaled"] = true;
G2L["a5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a5"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a5"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["a5"]["BackgroundTransparency"] = 1;
G2L["a5"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["a5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a5"]["Text"] = [[RAGEAIM]];
G2L["a5"]["Name"] = [[Title]];
G2L["a5"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Title.UIAspectRatioConstraint
G2L["a6"] = Instance.new("UIAspectRatioConstraint", G2L["a5"]);
G2L["a6"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.UIGradient
G2L["a7"] = Instance.new("UIGradient", G2L["a3"]);
G2L["a7"]["Rotation"] = 90;
G2L["a7"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.UIListLayout
G2L["a8"] = Instance.new("UIListLayout", G2L["a3"]);
G2L["a8"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA
G2L["a9"] = Instance.new("Frame", G2L["a3"]);
G2L["a9"]["BorderSizePixel"] = 0;
G2L["a9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a9"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["a9"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["a9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a9"]["Name"] = [[KILLAURA]];
G2L["a9"]["LayoutOrder"] = 2;
G2L["a9"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Trigger
G2L["aa"] = Instance.new("TextButton", G2L["a9"]);
G2L["aa"]["TextWrapped"] = true;
G2L["aa"]["BorderSizePixel"] = 0;
G2L["aa"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["aa"]["TextSize"] = 14;
G2L["aa"]["TextScaled"] = true;
G2L["aa"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["aa"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["aa"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["aa"]["BackgroundTransparency"] = 1;
G2L["aa"]["Name"] = [[Trigger]];
G2L["aa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["aa"]["Text"] = [[KILL AURA]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Trigger.UITextSizeConstraint
G2L["ab"] = Instance.new("UITextSizeConstraint", G2L["aa"]);
G2L["ab"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Trigger.UIAspectRatioConstraint
G2L["ac"] = Instance.new("UIAspectRatioConstraint", G2L["aa"]);
G2L["ac"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Toggle
G2L["ad"] = Instance.new("TextLabel", G2L["a9"]);
G2L["ad"]["BorderSizePixel"] = 0;
G2L["ad"]["TextSize"] = 14;
G2L["ad"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["ad"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ad"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ad"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["ad"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ad"]["Text"] = [[]];
G2L["ad"]["Name"] = [[Toggle]];
G2L["ad"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Toggle.UICorner
G2L["ae"] = Instance.new("UICorner", G2L["ad"]);
G2L["ae"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.Toggle.UIAspectRatioConstraint
G2L["af"] = Instance.new("UIAspectRatioConstraint", G2L["ad"]);
G2L["af"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KILLAURA.UIAspectRatioConstraint
G2L["b0"] = Instance.new("UIAspectRatioConstraint", G2L["a9"]);
G2L["b0"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Togglers
G2L["b1"] = Instance.new("LocalScript", G2L["a3"]);
G2L["b1"]["Name"] = [[Togglers]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.UIAspectRatioConstraint
G2L["b2"] = Instance.new("UIAspectRatioConstraint", G2L["a3"]);
G2L["b2"]["AspectRatio"] = 2.17121;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KillAura
G2L["b3"] = Instance.new("LocalScript", G2L["a3"]);
G2L["b3"]["Name"] = [[KillAura]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WHITELIST
G2L["b4"] = Instance.new("Frame", G2L["a3"]);
G2L["b4"]["BorderSizePixel"] = 0;
G2L["b4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b4"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["b4"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["b4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b4"]["Name"] = [[WHITELIST]];
G2L["b4"]["LayoutOrder"] = 2;
G2L["b4"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WHITELIST.UIAspectRatioConstraint
G2L["b5"] = Instance.new("UIAspectRatioConstraint", G2L["b4"]);
G2L["b5"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WHITELIST.TARGET
G2L["b6"] = Instance.new("TextBox", G2L["b4"]);
G2L["b6"]["Name"] = [[TARGET]];
G2L["b6"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["b6"]["BorderSizePixel"] = 0;
G2L["b6"]["TextWrapped"] = true;
G2L["b6"]["TextSize"] = 14;
G2L["b6"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["b6"]["TextScaled"] = true;
G2L["b6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b6"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["b6"]["ClearTextOnFocus"] = false;
G2L["b6"]["PlaceholderText"] = [[WHITELIST (SEPERATE WITH ",")]];
G2L["b6"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["b6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b6"]["Text"] = [[]];
G2L["b6"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WHITELIST.TARGET.UITextSizeConstraint
G2L["b7"] = Instance.new("UITextSizeConstraint", G2L["b6"]);
G2L["b7"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WHITELIST.TARGET.UIAspectRatioConstraint
G2L["b8"] = Instance.new("UIAspectRatioConstraint", G2L["b6"]);
G2L["b8"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.BLACKLIST
G2L["b9"] = Instance.new("Frame", G2L["a3"]);
G2L["b9"]["BorderSizePixel"] = 0;
G2L["b9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b9"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["b9"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["b9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b9"]["Name"] = [[BLACKLIST]];
G2L["b9"]["LayoutOrder"] = 3;
G2L["b9"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.BLACKLIST.UIAspectRatioConstraint
G2L["ba"] = Instance.new("UIAspectRatioConstraint", G2L["b9"]);
G2L["ba"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.BLACKLIST.TARGET
G2L["bb"] = Instance.new("TextBox", G2L["b9"]);
G2L["bb"]["Name"] = [[TARGET]];
G2L["bb"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["bb"]["BorderSizePixel"] = 0;
G2L["bb"]["TextWrapped"] = true;
G2L["bb"]["TextSize"] = 14;
G2L["bb"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["bb"]["TextScaled"] = true;
G2L["bb"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bb"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["bb"]["ClearTextOnFocus"] = false;
G2L["bb"]["PlaceholderText"] = [[BLACKLIST (SEPERATE WITH ",")]];
G2L["bb"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["bb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["bb"]["Text"] = [[]];
G2L["bb"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.BLACKLIST.TARGET.UITextSizeConstraint
G2L["bc"] = Instance.new("UITextSizeConstraint", G2L["bb"]);
G2L["bc"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.BLACKLIST.TARGET.UIAspectRatioConstraint
G2L["bd"] = Instance.new("UIAspectRatioConstraint", G2L["bb"]);
G2L["bd"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Whitelist
G2L["be"] = Instance.new("LocalScript", G2L["a3"]);
G2L["be"]["Name"] = [[Whitelist]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Blacklist
G2L["bf"] = Instance.new("LocalScript", G2L["a3"]);
G2L["bf"]["Name"] = [[Blacklist]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WALLBANG
G2L["c0"] = Instance.new("Frame", G2L["a3"]);
G2L["c0"]["BorderSizePixel"] = 0;
G2L["c0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c0"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["c0"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["c0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c0"]["Name"] = [[WALLBANG]];
G2L["c0"]["LayoutOrder"] = 4;
G2L["c0"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WALLBANG.Trigger
G2L["c1"] = Instance.new("TextButton", G2L["c0"]);
G2L["c1"]["TextWrapped"] = true;
G2L["c1"]["BorderSizePixel"] = 0;
G2L["c1"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["c1"]["TextSize"] = 14;
G2L["c1"]["TextScaled"] = true;
G2L["c1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c1"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c1"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["c1"]["BackgroundTransparency"] = 1;
G2L["c1"]["Name"] = [[Trigger]];
G2L["c1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c1"]["Text"] = [[WALL BANG]];


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WALLBANG.Trigger.UITextSizeConstraint
G2L["c2"] = Instance.new("UITextSizeConstraint", G2L["c1"]);
G2L["c2"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WALLBANG.Trigger.UIAspectRatioConstraint
G2L["c3"] = Instance.new("UIAspectRatioConstraint", G2L["c1"]);
G2L["c3"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WALLBANG.Toggle
G2L["c4"] = Instance.new("TextLabel", G2L["c0"]);
G2L["c4"]["BorderSizePixel"] = 0;
G2L["c4"]["TextSize"] = 14;
G2L["c4"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["c4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c4"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c4"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["c4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c4"]["Text"] = [[]];
G2L["c4"]["Name"] = [[Toggle]];
G2L["c4"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WALLBANG.Toggle.UICorner
G2L["c5"] = Instance.new("UICorner", G2L["c4"]);
G2L["c5"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WALLBANG.Toggle.UIAspectRatioConstraint
G2L["c6"] = Instance.new("UIAspectRatioConstraint", G2L["c4"]);
G2L["c6"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.WALLBANG.UIAspectRatioConstraint
G2L["c7"] = Instance.new("UIAspectRatioConstraint", G2L["c0"]);
G2L["c7"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.RageAim
G2L["c8"] = Instance.new("LocalScript", G2L["a3"]);
G2L["c8"]["Name"] = [[RageAim]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings
G2L["c9"] = Instance.new("ScrollingFrame", G2L["d"]);
G2L["c9"]["Visible"] = false;
G2L["c9"]["Active"] = true;
G2L["c9"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["c9"]["BorderSizePixel"] = 0;
G2L["c9"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["c9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c9"]["Name"] = [[Settings]];
G2L["c9"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["c9"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["c9"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c9"]["ScrollBarThickness"] = 0;
G2L["c9"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.UIListLayout
G2L["ca"] = Instance.new("UIListLayout", G2L["c9"]);
G2L["ca"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["ca"]["Padding"] = UDim.new(0.05, 0);
G2L["ca"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.UIAspectRatioConstraint
G2L["cb"] = Instance.new("UIAspectRatioConstraint", G2L["c9"]);
G2L["cb"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings
G2L["cc"] = Instance.new("Frame", G2L["c9"]);
G2L["cc"]["BorderSizePixel"] = 0;
G2L["cc"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cc"]["Size"] = UDim2.new(0.90639, 0, 0.67601, 0);
G2L["cc"]["Position"] = UDim2.new(0.0566, 0, -0, 0);
G2L["cc"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["cc"]["Name"] = [[MainSettings]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UICorner
G2L["cd"] = Instance.new("UICorner", G2L["cc"]);
G2L["cd"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.Title
G2L["ce"] = Instance.new("TextLabel", G2L["cc"]);
G2L["ce"]["TextWrapped"] = true;
G2L["ce"]["BorderSizePixel"] = 0;
G2L["ce"]["TextSize"] = 14;
G2L["ce"]["TextScaled"] = true;
G2L["ce"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ce"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ce"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["ce"]["BackgroundTransparency"] = 1;
G2L["ce"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["ce"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ce"]["Text"] = [[MAIN SETTINGS]];
G2L["ce"]["Name"] = [[Title]];
G2L["ce"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.Title.UIAspectRatioConstraint
G2L["cf"] = Instance.new("UIAspectRatioConstraint", G2L["ce"]);
G2L["cf"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIGradient
G2L["d0"] = Instance.new("UIGradient", G2L["cc"]);
G2L["d0"]["Rotation"] = 90;
G2L["d0"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY
G2L["d1"] = Instance.new("Frame", G2L["cc"]);
G2L["d1"]["BorderSizePixel"] = 0;
G2L["d1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d1"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["d1"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["d1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d1"]["Name"] = [[UIVISIBILITY]];
G2L["d1"]["LayoutOrder"] = 1;
G2L["d1"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.Trigger
G2L["d2"] = Instance.new("TextButton", G2L["d1"]);
G2L["d2"]["TextWrapped"] = true;
G2L["d2"]["BorderSizePixel"] = 0;
G2L["d2"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["d2"]["TextSize"] = 14;
G2L["d2"]["TextScaled"] = true;
G2L["d2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d2"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["d2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["d2"]["BackgroundTransparency"] = 1;
G2L["d2"]["Name"] = [[Trigger]];
G2L["d2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d2"]["Text"] = [[UI VISIBILITY]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.Trigger.UITextSizeConstraint
G2L["d3"] = Instance.new("UITextSizeConstraint", G2L["d2"]);
G2L["d3"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.Trigger.UIAspectRatioConstraint
G2L["d4"] = Instance.new("UIAspectRatioConstraint", G2L["d2"]);
G2L["d4"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.Handle
G2L["d5"] = Instance.new("LocalScript", G2L["d1"]);
G2L["d5"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.UIAspectRatioConstraint
G2L["d6"] = Instance.new("UIAspectRatioConstraint", G2L["d1"]);
G2L["d6"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.KeyBind
G2L["d7"] = Instance.new("TextButton", G2L["d1"]);
G2L["d7"]["TextWrapped"] = true;
G2L["d7"]["BorderSizePixel"] = 0;
G2L["d7"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["d7"]["TextSize"] = 14;
G2L["d7"]["TextScaled"] = true;
G2L["d7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d7"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["d7"]["Size"] = UDim2.new(0.30638, 0, 1, 0);
G2L["d7"]["BackgroundTransparency"] = 1;
G2L["d7"]["Name"] = [[KeyBind]];
G2L["d7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d7"]["Text"] = [[LeftControl]];
G2L["d7"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.KeyBind.UITextSizeConstraint
G2L["d8"] = Instance.new("UITextSizeConstraint", G2L["d7"]);
G2L["d8"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIListLayout
G2L["d9"] = Instance.new("UIListLayout", G2L["cc"]);
G2L["d9"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI
G2L["da"] = Instance.new("Frame", G2L["cc"]);
G2L["da"]["BorderSizePixel"] = 0;
G2L["da"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["da"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["da"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["da"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["da"]["Name"] = [[JOIN_LEAVENOTI]];
G2L["da"]["LayoutOrder"] = 1;
G2L["da"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Trigger
G2L["db"] = Instance.new("TextButton", G2L["da"]);
G2L["db"]["TextWrapped"] = true;
G2L["db"]["BorderSizePixel"] = 0;
G2L["db"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["db"]["TextSize"] = 14;
G2L["db"]["TextScaled"] = true;
G2L["db"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["db"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["db"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["db"]["BackgroundTransparency"] = 1;
G2L["db"]["Name"] = [[Trigger]];
G2L["db"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["db"]["Text"] = [[JOIN/LEAVE NOTIFY]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Trigger.UITextSizeConstraint
G2L["dc"] = Instance.new("UITextSizeConstraint", G2L["db"]);
G2L["dc"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Trigger.UIAspectRatioConstraint
G2L["dd"] = Instance.new("UIAspectRatioConstraint", G2L["db"]);
G2L["dd"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Toggle
G2L["de"] = Instance.new("TextLabel", G2L["da"]);
G2L["de"]["BorderSizePixel"] = 0;
G2L["de"]["TextSize"] = 14;
G2L["de"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["de"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["de"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["de"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["de"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["de"]["Text"] = [[]];
G2L["de"]["Name"] = [[Toggle]];
G2L["de"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Toggle.UICorner
G2L["df"] = Instance.new("UICorner", G2L["de"]);
G2L["df"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.Toggle.UIAspectRatioConstraint
G2L["e0"] = Instance.new("UIAspectRatioConstraint", G2L["de"]);
G2L["e0"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.JOIN_LEAVENOTI.UIAspectRatioConstraint
G2L["e1"] = Instance.new("UIAspectRatioConstraint", G2L["da"]);
G2L["e1"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.Handle
G2L["e2"] = Instance.new("LocalScript", G2L["cc"]);
G2L["e2"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW
G2L["e3"] = Instance.new("Frame", G2L["cc"]);
G2L["e3"]["BorderSizePixel"] = 0;
G2L["e3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e3"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["e3"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["e3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e3"]["Name"] = [[REMOVESNOW]];
G2L["e3"]["LayoutOrder"] = 2;
G2L["e3"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Trigger
G2L["e4"] = Instance.new("TextButton", G2L["e3"]);
G2L["e4"]["TextWrapped"] = true;
G2L["e4"]["BorderSizePixel"] = 0;
G2L["e4"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["e4"]["TextSize"] = 14;
G2L["e4"]["TextScaled"] = true;
G2L["e4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e4"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["e4"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["e4"]["BackgroundTransparency"] = 1;
G2L["e4"]["Name"] = [[Trigger]];
G2L["e4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e4"]["Text"] = [[REMOVE SNOW]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Trigger.UITextSizeConstraint
G2L["e5"] = Instance.new("UITextSizeConstraint", G2L["e4"]);
G2L["e5"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Trigger.UIAspectRatioConstraint
G2L["e6"] = Instance.new("UIAspectRatioConstraint", G2L["e4"]);
G2L["e6"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Toggle
G2L["e7"] = Instance.new("TextLabel", G2L["e3"]);
G2L["e7"]["BorderSizePixel"] = 0;
G2L["e7"]["TextSize"] = 14;
G2L["e7"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["e7"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["e7"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e7"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["e7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e7"]["Text"] = [[]];
G2L["e7"]["Name"] = [[Toggle]];
G2L["e7"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Toggle.UICorner
G2L["e8"] = Instance.new("UICorner", G2L["e7"]);
G2L["e8"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Toggle.UIAspectRatioConstraint
G2L["e9"] = Instance.new("UIAspectRatioConstraint", G2L["e7"]);
G2L["e9"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Handle
G2L["ea"] = Instance.new("LocalScript", G2L["e3"]);
G2L["ea"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.UIAspectRatioConstraint
G2L["eb"] = Instance.new("UIAspectRatioConstraint", G2L["e3"]);
G2L["eb"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Settings.UIPadding
G2L["ec"] = Instance.new("UIPadding", G2L["c9"]);
G2L["ec"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings
G2L["ed"] = Instance.new("ScrollingFrame", G2L["d"]);
G2L["ed"]["Active"] = true;
G2L["ed"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["ed"]["BorderSizePixel"] = 0;
G2L["ed"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["ed"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ed"]["Name"] = [[AutoSettings]];
G2L["ed"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["ed"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["ed"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ed"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ed"]["ScrollBarThickness"] = 0;
G2L["ed"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.UIListLayout
G2L["ee"] = Instance.new("UIListLayout", G2L["ed"]);
G2L["ee"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["ee"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration
G2L["ef"] = Instance.new("Frame", G2L["ed"]);
G2L["ef"]["BorderSizePixel"] = 0;
G2L["ef"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ef"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["ef"]["Size"] = UDim2.new(0.90639, 0, 0.77882, 0);
G2L["ef"]["Position"] = UDim2.new(0.0468, 0, 0, 0);
G2L["ef"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ef"]["Name"] = [[Configuration]];
G2L["ef"]["LayoutOrder"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.UICorner
G2L["f0"] = Instance.new("UICorner", G2L["ef"]);
G2L["f0"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.UIGradient
G2L["f1"] = Instance.new("UIGradient", G2L["ef"]);
G2L["f1"]["Rotation"] = 90;
G2L["f1"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.UIListLayout
G2L["f2"] = Instance.new("UIListLayout", G2L["ef"]);
G2L["f2"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.Title
G2L["f3"] = Instance.new("TextLabel", G2L["ef"]);
G2L["f3"]["TextWrapped"] = true;
G2L["f3"]["BorderSizePixel"] = 0;
G2L["f3"]["TextSize"] = 14;
G2L["f3"]["TextScaled"] = true;
G2L["f3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f3"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["f3"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["f3"]["BackgroundTransparency"] = 1;
G2L["f3"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["f3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f3"]["Text"] = [[CONFIGURATION]];
G2L["f3"]["Name"] = [[Title]];
G2L["f3"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.Title.UIAspectRatioConstraint
G2L["f4"] = Instance.new("UIAspectRatioConstraint", G2L["f3"]);
G2L["f4"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.UIAspectRatioConstraint
G2L["f5"] = Instance.new("UIAspectRatioConstraint", G2L["ef"]);
G2L["f5"]["AspectRatio"] = 1.88;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP
G2L["f6"] = Instance.new("Frame", G2L["ef"]);
G2L["f6"]["BorderSizePixel"] = 0;
G2L["f6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f6"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["f6"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["f6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f6"]["Name"] = [[AUTOSTOMP]];
G2L["f6"]["LayoutOrder"] = 1;
G2L["f6"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Trigger
G2L["f7"] = Instance.new("TextButton", G2L["f6"]);
G2L["f7"]["TextWrapped"] = true;
G2L["f7"]["BorderSizePixel"] = 0;
G2L["f7"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["f7"]["TextSize"] = 14;
G2L["f7"]["TextScaled"] = true;
G2L["f7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f7"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["f7"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["f7"]["BackgroundTransparency"] = 1;
G2L["f7"]["Name"] = [[Trigger]];
G2L["f7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f7"]["Text"] = [[AUTO STOMP]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Trigger.UITextSizeConstraint
G2L["f8"] = Instance.new("UITextSizeConstraint", G2L["f7"]);
G2L["f8"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Trigger.UIAspectRatioConstraint
G2L["f9"] = Instance.new("UIAspectRatioConstraint", G2L["f7"]);
G2L["f9"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Toggle
G2L["fa"] = Instance.new("TextLabel", G2L["f6"]);
G2L["fa"]["BorderSizePixel"] = 0;
G2L["fa"]["TextSize"] = 14;
G2L["fa"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["fa"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["fa"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["fa"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["fa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["fa"]["Text"] = [[]];
G2L["fa"]["Name"] = [[Toggle]];
G2L["fa"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Toggle.UICorner
G2L["fb"] = Instance.new("UICorner", G2L["fa"]);
G2L["fb"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.Toggle.UIAspectRatioConstraint
G2L["fc"] = Instance.new("UIAspectRatioConstraint", G2L["fa"]);
G2L["fc"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSTOMP.UIAspectRatioConstraint
G2L["fd"] = Instance.new("UIAspectRatioConstraint", G2L["f6"]);
G2L["fd"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD
G2L["fe"] = Instance.new("Frame", G2L["ef"]);
G2L["fe"]["BorderSizePixel"] = 0;
G2L["fe"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fe"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["fe"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["fe"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["fe"]["Name"] = [[AUTORELOAD]];
G2L["fe"]["LayoutOrder"] = 2;
G2L["fe"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Trigger
G2L["ff"] = Instance.new("TextButton", G2L["fe"]);
G2L["ff"]["TextWrapped"] = true;
G2L["ff"]["BorderSizePixel"] = 0;
G2L["ff"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["ff"]["TextSize"] = 14;
G2L["ff"]["TextScaled"] = true;
G2L["ff"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ff"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ff"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["ff"]["BackgroundTransparency"] = 1;
G2L["ff"]["Name"] = [[Trigger]];
G2L["ff"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ff"]["Text"] = [[AUTO RELOAD]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Trigger.UITextSizeConstraint
G2L["100"] = Instance.new("UITextSizeConstraint", G2L["ff"]);
G2L["100"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Trigger.UIAspectRatioConstraint
G2L["101"] = Instance.new("UIAspectRatioConstraint", G2L["ff"]);
G2L["101"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Toggle
G2L["102"] = Instance.new("TextLabel", G2L["fe"]);
G2L["102"]["BorderSizePixel"] = 0;
G2L["102"]["TextSize"] = 14;
G2L["102"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["102"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["102"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["102"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["102"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["102"]["Text"] = [[]];
G2L["102"]["Name"] = [[Toggle]];
G2L["102"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Toggle.UICorner
G2L["103"] = Instance.new("UICorner", G2L["102"]);
G2L["103"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.Toggle.UIAspectRatioConstraint
G2L["104"] = Instance.new("UIAspectRatioConstraint", G2L["102"]);
G2L["104"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTORELOAD.UIAspectRatioConstraint
G2L["105"] = Instance.new("UIAspectRatioConstraint", G2L["fe"]);
G2L["105"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT
G2L["106"] = Instance.new("Frame", G2L["ef"]);
G2L["106"]["BorderSizePixel"] = 0;
G2L["106"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["106"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["106"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["106"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["106"]["Name"] = [[AUTOSHOOT]];
G2L["106"]["LayoutOrder"] = 3;
G2L["106"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Trigger
G2L["107"] = Instance.new("TextButton", G2L["106"]);
G2L["107"]["TextWrapped"] = true;
G2L["107"]["BorderSizePixel"] = 0;
G2L["107"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["107"]["TextSize"] = 14;
G2L["107"]["TextScaled"] = true;
G2L["107"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["107"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["107"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["107"]["BackgroundTransparency"] = 1;
G2L["107"]["Name"] = [[Trigger]];
G2L["107"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["107"]["Text"] = [[AUTO SHOOT]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Trigger.UITextSizeConstraint
G2L["108"] = Instance.new("UITextSizeConstraint", G2L["107"]);
G2L["108"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Trigger.UIAspectRatioConstraint
G2L["109"] = Instance.new("UIAspectRatioConstraint", G2L["107"]);
G2L["109"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Toggle
G2L["10a"] = Instance.new("TextLabel", G2L["106"]);
G2L["10a"]["BorderSizePixel"] = 0;
G2L["10a"]["TextSize"] = 14;
G2L["10a"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["10a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["10a"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10a"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["10a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10a"]["Text"] = [[]];
G2L["10a"]["Name"] = [[Toggle]];
G2L["10a"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Toggle.UICorner
G2L["10b"] = Instance.new("UICorner", G2L["10a"]);
G2L["10b"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.Toggle.UIAspectRatioConstraint
G2L["10c"] = Instance.new("UIAspectRatioConstraint", G2L["10a"]);
G2L["10c"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOSHOOT.UIAspectRatioConstraint
G2L["10d"] = Instance.new("UIAspectRatioConstraint", G2L["106"]);
G2L["10d"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AutoSettings
G2L["10e"] = Instance.new("LocalScript", G2L["ef"]);
G2L["10e"]["Name"] = [[AutoSettings]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOMASK
G2L["10f"] = Instance.new("Frame", G2L["ef"]);
G2L["10f"]["BorderSizePixel"] = 0;
G2L["10f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10f"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["10f"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["10f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10f"]["Name"] = [[AUTOMASK]];
G2L["10f"]["LayoutOrder"] = 4;
G2L["10f"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOMASK.Trigger
G2L["110"] = Instance.new("TextButton", G2L["10f"]);
G2L["110"]["TextWrapped"] = true;
G2L["110"]["BorderSizePixel"] = 0;
G2L["110"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["110"]["TextSize"] = 14;
G2L["110"]["TextScaled"] = true;
G2L["110"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["110"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["110"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["110"]["BackgroundTransparency"] = 1;
G2L["110"]["Name"] = [[Trigger]];
G2L["110"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["110"]["Text"] = [[AUTO MASK]];


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOMASK.Trigger.UITextSizeConstraint
G2L["111"] = Instance.new("UITextSizeConstraint", G2L["110"]);
G2L["111"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOMASK.Trigger.UIAspectRatioConstraint
G2L["112"] = Instance.new("UIAspectRatioConstraint", G2L["110"]);
G2L["112"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOMASK.Toggle
G2L["113"] = Instance.new("TextLabel", G2L["10f"]);
G2L["113"]["BorderSizePixel"] = 0;
G2L["113"]["TextSize"] = 14;
G2L["113"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["113"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["113"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["113"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["113"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["113"]["Text"] = [[]];
G2L["113"]["Name"] = [[Toggle]];
G2L["113"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOMASK.Toggle.UICorner
G2L["114"] = Instance.new("UICorner", G2L["113"]);
G2L["114"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOMASK.Toggle.UIAspectRatioConstraint
G2L["115"] = Instance.new("UIAspectRatioConstraint", G2L["113"]);
G2L["115"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AUTOMASK.UIAspectRatioConstraint
G2L["116"] = Instance.new("UIAspectRatioConstraint", G2L["10f"]);
G2L["116"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.UIPadding
G2L["117"] = Instance.new("UIPadding", G2L["ed"]);
G2L["117"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport
G2L["118"] = Instance.new("ScrollingFrame", G2L["d"]);
G2L["118"]["Visible"] = false;
G2L["118"]["Active"] = true;
G2L["118"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["118"]["BorderSizePixel"] = 0;
G2L["118"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["118"]["Name"] = [[Teleport]];
G2L["118"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["118"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["118"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["118"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["118"]["ScrollBarThickness"] = 0;
G2L["118"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.UIListLayout
G2L["119"] = Instance.new("UIListLayout", G2L["118"]);
G2L["119"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["119"]["Padding"] = UDim.new(0.05, 0);
G2L["119"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.UIAspectRatioConstraint
G2L["11a"] = Instance.new("UIAspectRatioConstraint", G2L["118"]);
G2L["11a"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places
G2L["11b"] = Instance.new("Frame", G2L["118"]);
G2L["11b"]["BorderSizePixel"] = 0;
G2L["11b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11b"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["11b"]["Size"] = UDim2.new(0.90639, 0, 0.84494, 0);
G2L["11b"]["Position"] = UDim2.new(0.0468, 0, 0, 0);
G2L["11b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11b"]["Name"] = [[Places]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UICorner
G2L["11c"] = Instance.new("UICorner", G2L["11b"]);
G2L["11c"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.Title
G2L["11d"] = Instance.new("TextLabel", G2L["11b"]);
G2L["11d"]["TextWrapped"] = true;
G2L["11d"]["BorderSizePixel"] = 0;
G2L["11d"]["TextSize"] = 14;
G2L["11d"]["TextScaled"] = true;
G2L["11d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11d"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["11d"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["11d"]["BackgroundTransparency"] = 1;
G2L["11d"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["11d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11d"]["Text"] = [[WORLD]];
G2L["11d"]["Name"] = [[Title]];
G2L["11d"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.Title.UIAspectRatioConstraint
G2L["11e"] = Instance.new("UIAspectRatioConstraint", G2L["11d"]);
G2L["11e"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UIGradient
G2L["11f"] = Instance.new("UIGradient", G2L["11b"]);
G2L["11f"]["Rotation"] = 90;
G2L["11f"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.REVOLVER
G2L["120"] = Instance.new("Frame", G2L["11b"]);
G2L["120"]["BorderSizePixel"] = 0;
G2L["120"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["120"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["120"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["120"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["120"]["Name"] = [[REVOLVER]];
G2L["120"]["LayoutOrder"] = 2;
G2L["120"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.REVOLVER.Trigger
G2L["121"] = Instance.new("TextButton", G2L["120"]);
G2L["121"]["TextWrapped"] = true;
G2L["121"]["BorderSizePixel"] = 0;
G2L["121"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["121"]["TextSize"] = 14;
G2L["121"]["TextScaled"] = true;
G2L["121"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["121"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["121"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["121"]["BackgroundTransparency"] = 1;
G2L["121"]["Name"] = [[Trigger]];
G2L["121"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["121"]["Text"] = [[REVOLVER]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.REVOLVER.Trigger.UITextSizeConstraint
G2L["122"] = Instance.new("UITextSizeConstraint", G2L["121"]);
G2L["122"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.REVOLVER.Trigger.UIAspectRatioConstraint
G2L["123"] = Instance.new("UIAspectRatioConstraint", G2L["121"]);
G2L["123"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.REVOLVER.UIAspectRatioConstraint
G2L["124"] = Instance.new("UIAspectRatioConstraint", G2L["120"]);
G2L["124"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UIListLayout
G2L["125"] = Instance.new("UIListLayout", G2L["11b"]);
G2L["125"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.WAREHOUSE
G2L["126"] = Instance.new("Frame", G2L["11b"]);
G2L["126"]["BorderSizePixel"] = 0;
G2L["126"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["126"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["126"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["126"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["126"]["Name"] = [[WAREHOUSE]];
G2L["126"]["LayoutOrder"] = 2;
G2L["126"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.WAREHOUSE.Trigger
G2L["127"] = Instance.new("TextButton", G2L["126"]);
G2L["127"]["TextWrapped"] = true;
G2L["127"]["BorderSizePixel"] = 0;
G2L["127"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["127"]["TextSize"] = 14;
G2L["127"]["TextScaled"] = true;
G2L["127"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["127"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["127"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["127"]["BackgroundTransparency"] = 1;
G2L["127"]["Name"] = [[Trigger]];
G2L["127"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["127"]["Text"] = [[WAREHOUSE]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.WAREHOUSE.Trigger.UITextSizeConstraint
G2L["128"] = Instance.new("UITextSizeConstraint", G2L["127"]);
G2L["128"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.WAREHOUSE.Trigger.UIAspectRatioConstraint
G2L["129"] = Instance.new("UIAspectRatioConstraint", G2L["127"]);
G2L["129"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.WAREHOUSE.UIAspectRatioConstraint
G2L["12a"] = Instance.new("UIAspectRatioConstraint", G2L["126"]);
G2L["12a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZGUN
G2L["12b"] = Instance.new("Frame", G2L["11b"]);
G2L["12b"]["BorderSizePixel"] = 0;
G2L["12b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12b"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["12b"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["12b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12b"]["Name"] = [[UPHILLZGUN]];
G2L["12b"]["LayoutOrder"] = 2;
G2L["12b"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZGUN.Trigger
G2L["12c"] = Instance.new("TextButton", G2L["12b"]);
G2L["12c"]["TextWrapped"] = true;
G2L["12c"]["BorderSizePixel"] = 0;
G2L["12c"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["12c"]["TextSize"] = 14;
G2L["12c"]["TextScaled"] = true;
G2L["12c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12c"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["12c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["12c"]["BackgroundTransparency"] = 1;
G2L["12c"]["Name"] = [[Trigger]];
G2L["12c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12c"]["Text"] = [[UPHILLZ GUN]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZGUN.Trigger.UITextSizeConstraint
G2L["12d"] = Instance.new("UITextSizeConstraint", G2L["12c"]);
G2L["12d"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZGUN.Trigger.UIAspectRatioConstraint
G2L["12e"] = Instance.new("UIAspectRatioConstraint", G2L["12c"]);
G2L["12e"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UPHILLZGUN.UIAspectRatioConstraint
G2L["12f"] = Instance.new("UIAspectRatioConstraint", G2L["12b"]);
G2L["12f"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.MILITARY
G2L["130"] = Instance.new("Frame", G2L["11b"]);
G2L["130"]["BorderSizePixel"] = 0;
G2L["130"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["130"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["130"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["130"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["130"]["Name"] = [[MILITARY]];
G2L["130"]["LayoutOrder"] = 2;
G2L["130"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.MILITARY.Trigger
G2L["131"] = Instance.new("TextButton", G2L["130"]);
G2L["131"]["TextWrapped"] = true;
G2L["131"]["BorderSizePixel"] = 0;
G2L["131"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["131"]["TextSize"] = 14;
G2L["131"]["TextScaled"] = true;
G2L["131"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["131"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["131"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["131"]["BackgroundTransparency"] = 1;
G2L["131"]["Name"] = [[Trigger]];
G2L["131"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["131"]["Text"] = [[MILITARY]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.MILITARY.Trigger.UITextSizeConstraint
G2L["132"] = Instance.new("UITextSizeConstraint", G2L["131"]);
G2L["132"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.MILITARY.Trigger.UIAspectRatioConstraint
G2L["133"] = Instance.new("UIAspectRatioConstraint", G2L["131"]);
G2L["133"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.MILITARY.UIAspectRatioConstraint
G2L["134"] = Instance.new("UIAspectRatioConstraint", G2L["130"]);
G2L["134"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DABANK
G2L["135"] = Instance.new("Frame", G2L["11b"]);
G2L["135"]["BorderSizePixel"] = 0;
G2L["135"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["135"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["135"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["135"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["135"]["Name"] = [[DABANK]];
G2L["135"]["LayoutOrder"] = 2;
G2L["135"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DABANK.Trigger
G2L["136"] = Instance.new("TextButton", G2L["135"]);
G2L["136"]["TextWrapped"] = true;
G2L["136"]["BorderSizePixel"] = 0;
G2L["136"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["136"]["TextSize"] = 14;
G2L["136"]["TextScaled"] = true;
G2L["136"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["136"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["136"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["136"]["BackgroundTransparency"] = 1;
G2L["136"]["Name"] = [[Trigger]];
G2L["136"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["136"]["Text"] = [[DA BANK]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DABANK.Trigger.UITextSizeConstraint
G2L["137"] = Instance.new("UITextSizeConstraint", G2L["136"]);
G2L["137"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DABANK.Trigger.UIAspectRatioConstraint
G2L["138"] = Instance.new("UIAspectRatioConstraint", G2L["136"]);
G2L["138"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DABANK.UIAspectRatioConstraint
G2L["139"] = Instance.new("UIAspectRatioConstraint", G2L["135"]);
G2L["139"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DB
G2L["13a"] = Instance.new("Frame", G2L["11b"]);
G2L["13a"]["BorderSizePixel"] = 0;
G2L["13a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["13a"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["13a"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["13a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13a"]["Name"] = [[DB]];
G2L["13a"]["LayoutOrder"] = 2;
G2L["13a"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DB.Trigger
G2L["13b"] = Instance.new("TextButton", G2L["13a"]);
G2L["13b"]["TextWrapped"] = true;
G2L["13b"]["BorderSizePixel"] = 0;
G2L["13b"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["13b"]["TextSize"] = 14;
G2L["13b"]["TextScaled"] = true;
G2L["13b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["13b"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["13b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["13b"]["BackgroundTransparency"] = 1;
G2L["13b"]["Name"] = [[Trigger]];
G2L["13b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13b"]["Text"] = [[DB]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DB.Trigger.UITextSizeConstraint
G2L["13c"] = Instance.new("UITextSizeConstraint", G2L["13b"]);
G2L["13c"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DB.Trigger.UIAspectRatioConstraint
G2L["13d"] = Instance.new("UIAspectRatioConstraint", G2L["13b"]);
G2L["13d"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DB.UIAspectRatioConstraint
G2L["13e"] = Instance.new("UIAspectRatioConstraint", G2L["13a"]);
G2L["13e"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DOWNHILLZGUN
G2L["13f"] = Instance.new("Frame", G2L["11b"]);
G2L["13f"]["BorderSizePixel"] = 0;
G2L["13f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["13f"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["13f"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["13f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13f"]["Name"] = [[DOWNHILLZGUN]];
G2L["13f"]["LayoutOrder"] = 2;
G2L["13f"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DOWNHILLZGUN.Trigger
G2L["140"] = Instance.new("TextButton", G2L["13f"]);
G2L["140"]["TextWrapped"] = true;
G2L["140"]["BorderSizePixel"] = 0;
G2L["140"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["140"]["TextSize"] = 14;
G2L["140"]["TextScaled"] = true;
G2L["140"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["140"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["140"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["140"]["BackgroundTransparency"] = 1;
G2L["140"]["Name"] = [[Trigger]];
G2L["140"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["140"]["Text"] = [[DOWN HILLZ GUN]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DOWNHILLZGUN.Trigger.UITextSizeConstraint
G2L["141"] = Instance.new("UITextSizeConstraint", G2L["140"]);
G2L["141"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DOWNHILLZGUN.Trigger.UIAspectRatioConstraint
G2L["142"] = Instance.new("UIAspectRatioConstraint", G2L["140"]);
G2L["142"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.DOWNHILLZGUN.UIAspectRatioConstraint
G2L["143"] = Instance.new("UIAspectRatioConstraint", G2L["13f"]);
G2L["143"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.Handle
G2L["144"] = Instance.new("LocalScript", G2L["11b"]);
G2L["144"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.RIFLE
G2L["145"] = Instance.new("Frame", G2L["11b"]);
G2L["145"]["BorderSizePixel"] = 0;
G2L["145"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["145"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["145"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["145"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["145"]["Name"] = [[RIFLE]];
G2L["145"]["LayoutOrder"] = 2;
G2L["145"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.RIFLE.Trigger
G2L["146"] = Instance.new("TextButton", G2L["145"]);
G2L["146"]["TextWrapped"] = true;
G2L["146"]["BorderSizePixel"] = 0;
G2L["146"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["146"]["TextSize"] = 14;
G2L["146"]["TextScaled"] = true;
G2L["146"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["146"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["146"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["146"]["BackgroundTransparency"] = 1;
G2L["146"]["Name"] = [[Trigger]];
G2L["146"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["146"]["Text"] = [[RIFLE]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.RIFLE.Trigger.UITextSizeConstraint
G2L["147"] = Instance.new("UITextSizeConstraint", G2L["146"]);
G2L["147"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.RIFLE.Trigger.UIAspectRatioConstraint
G2L["148"] = Instance.new("UIAspectRatioConstraint", G2L["146"]);
G2L["148"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.RIFLE.UIAspectRatioConstraint
G2L["149"] = Instance.new("UIAspectRatioConstraint", G2L["145"]);
G2L["149"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.UIAspectRatioConstraint
G2L["14a"] = Instance.new("UIAspectRatioConstraint", G2L["11b"]);
G2L["14a"]["AspectRatio"] = 1.56645;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.UIPadding
G2L["14b"] = Instance.new("UIPadding", G2L["118"]);
G2L["14b"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport
G2L["14c"] = Instance.new("Frame", G2L["118"]);
G2L["14c"]["BorderSizePixel"] = 0;
G2L["14c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14c"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["14c"]["Size"] = UDim2.new(0.90639, 0, 0.84494, 0);
G2L["14c"]["Position"] = UDim2.new(0.0468, 0, 0, 0);
G2L["14c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14c"]["Name"] = [[PlayerTeleport]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.UICorner
G2L["14d"] = Instance.new("UICorner", G2L["14c"]);
G2L["14d"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.Title
G2L["14e"] = Instance.new("TextLabel", G2L["14c"]);
G2L["14e"]["TextWrapped"] = true;
G2L["14e"]["BorderSizePixel"] = 0;
G2L["14e"]["TextSize"] = 14;
G2L["14e"]["TextScaled"] = true;
G2L["14e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["14e"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["14e"]["BackgroundTransparency"] = 1;
G2L["14e"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["14e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14e"]["Text"] = [[PLAYER TELEPORT]];
G2L["14e"]["Name"] = [[Title]];
G2L["14e"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.Title.UIAspectRatioConstraint
G2L["14f"] = Instance.new("UIAspectRatioConstraint", G2L["14e"]);
G2L["14f"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.UIGradient
G2L["150"] = Instance.new("UIGradient", G2L["14c"]);
G2L["150"]["Rotation"] = 90;
G2L["150"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.UIListLayout
G2L["151"] = Instance.new("UIListLayout", G2L["14c"]);
G2L["151"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.UIAspectRatioConstraint
G2L["152"] = Instance.new("UIAspectRatioConstraint", G2L["14c"]);
G2L["152"]["AspectRatio"] = 1.73288;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TELEPORT
G2L["153"] = Instance.new("Frame", G2L["14c"]);
G2L["153"]["BorderSizePixel"] = 0;
G2L["153"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["153"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["153"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["153"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["153"]["Name"] = [[TELEPORT]];
G2L["153"]["LayoutOrder"] = 1;
G2L["153"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TELEPORT.Trigger
G2L["154"] = Instance.new("TextButton", G2L["153"]);
G2L["154"]["TextWrapped"] = true;
G2L["154"]["BorderSizePixel"] = 0;
G2L["154"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["154"]["TextSize"] = 14;
G2L["154"]["TextScaled"] = true;
G2L["154"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["154"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["154"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["154"]["BackgroundTransparency"] = 1;
G2L["154"]["Name"] = [[Trigger]];
G2L["154"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["154"]["Text"] = [[TELEPORT]];


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TELEPORT.Trigger.UITextSizeConstraint
G2L["155"] = Instance.new("UITextSizeConstraint", G2L["154"]);
G2L["155"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TELEPORT.Trigger.UIAspectRatioConstraint
G2L["156"] = Instance.new("UIAspectRatioConstraint", G2L["154"]);
G2L["156"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TELEPORT.UIAspectRatioConstraint
G2L["157"] = Instance.new("UIAspectRatioConstraint", G2L["153"]);
G2L["157"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TARGETNAME
G2L["158"] = Instance.new("Frame", G2L["14c"]);
G2L["158"]["BorderSizePixel"] = 0;
G2L["158"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["158"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["158"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["158"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["158"]["Name"] = [[TARGETNAME]];
G2L["158"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TARGETNAME.UIAspectRatioConstraint
G2L["159"] = Instance.new("UIAspectRatioConstraint", G2L["158"]);
G2L["159"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TARGETNAME.TARGET
G2L["15a"] = Instance.new("TextBox", G2L["158"]);
G2L["15a"]["Name"] = [[TARGET]];
G2L["15a"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["15a"]["BorderSizePixel"] = 0;
G2L["15a"]["TextWrapped"] = true;
G2L["15a"]["TextSize"] = 14;
G2L["15a"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["15a"]["TextScaled"] = true;
G2L["15a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15a"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15a"]["ClearTextOnFocus"] = false;
G2L["15a"]["PlaceholderText"] = [[TARGET NAME OR DISPLAY]];
G2L["15a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["15a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15a"]["Text"] = [[]];
G2L["15a"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TARGETNAME.TARGET.UITextSizeConstraint
G2L["15b"] = Instance.new("UITextSizeConstraint", G2L["15a"]);
G2L["15b"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.TARGETNAME.TARGET.UIAspectRatioConstraint
G2L["15c"] = Instance.new("UIAspectRatioConstraint", G2L["15a"]);
G2L["15c"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.Handle
G2L["15d"] = Instance.new("LocalScript", G2L["14c"]);
G2L["15d"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.UIAspectRatioConstraint
G2L["15e"] = Instance.new("UIAspectRatioConstraint", G2L["d"]);
G2L["15e"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit
G2L["15f"] = Instance.new("ScrollingFrame", G2L["d"]);
G2L["15f"]["Visible"] = false;
G2L["15f"]["Active"] = true;
G2L["15f"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["15f"]["BorderSizePixel"] = 0;
G2L["15f"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["15f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15f"]["Name"] = [[Orbit]];
G2L["15f"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["15f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["15f"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15f"]["ScrollBarThickness"] = 0;
G2L["15f"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.UIListLayout
G2L["160"] = Instance.new("UIListLayout", G2L["15f"]);
G2L["160"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["160"]["Padding"] = UDim.new(0.05, 0);
G2L["160"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.UIAspectRatioConstraint
G2L["161"] = Instance.new("UIAspectRatioConstraint", G2L["15f"]);
G2L["161"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target
G2L["162"] = Instance.new("Frame", G2L["15f"]);
G2L["162"]["BorderSizePixel"] = 0;
G2L["162"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["162"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["162"]["Size"] = UDim2.new(0.90639, 0, 0.84494, 0);
G2L["162"]["Position"] = UDim2.new(0.0468, 0, 0, 0);
G2L["162"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["162"]["Name"] = [[Target]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.UICorner
G2L["163"] = Instance.new("UICorner", G2L["162"]);
G2L["163"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Title
G2L["164"] = Instance.new("TextLabel", G2L["162"]);
G2L["164"]["TextWrapped"] = true;
G2L["164"]["BorderSizePixel"] = 0;
G2L["164"]["TextSize"] = 14;
G2L["164"]["TextScaled"] = true;
G2L["164"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["164"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["164"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["164"]["BackgroundTransparency"] = 1;
G2L["164"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["164"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["164"]["Text"] = [[TARGET]];
G2L["164"]["Name"] = [[Title]];
G2L["164"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Title.UIAspectRatioConstraint
G2L["165"] = Instance.new("UIAspectRatioConstraint", G2L["164"]);
G2L["165"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.UIGradient
G2L["166"] = Instance.new("UIGradient", G2L["162"]);
G2L["166"]["Rotation"] = 90;
G2L["166"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.UIListLayout
G2L["167"] = Instance.new("UIListLayout", G2L["162"]);
G2L["167"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.UIAspectRatioConstraint
G2L["168"] = Instance.new("UIAspectRatioConstraint", G2L["162"]);
G2L["168"]["AspectRatio"] = 1.73288;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TARGETNAME
G2L["169"] = Instance.new("Frame", G2L["162"]);
G2L["169"]["BorderSizePixel"] = 0;
G2L["169"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["169"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["169"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["169"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["169"]["Name"] = [[TARGETNAME]];
G2L["169"]["LayoutOrder"] = 4;
G2L["169"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TARGETNAME.UIAspectRatioConstraint
G2L["16a"] = Instance.new("UIAspectRatioConstraint", G2L["169"]);
G2L["16a"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TARGETNAME.TARGET
G2L["16b"] = Instance.new("TextBox", G2L["169"]);
G2L["16b"]["Name"] = [[TARGET]];
G2L["16b"]["PlaceholderColor3"] = Color3.fromRGB(116, 0, 0);
G2L["16b"]["BorderSizePixel"] = 0;
G2L["16b"]["TextWrapped"] = true;
G2L["16b"]["TextSize"] = 14;
G2L["16b"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["16b"]["TextScaled"] = true;
G2L["16b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16b"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["16b"]["ClearTextOnFocus"] = false;
G2L["16b"]["PlaceholderText"] = [[TARGET NAME OR DISPLAY]];
G2L["16b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["16b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16b"]["Text"] = [[]];
G2L["16b"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TARGETNAME.TARGET.UITextSizeConstraint
G2L["16c"] = Instance.new("UITextSizeConstraint", G2L["16b"]);
G2L["16c"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TARGETNAME.TARGET.UIAspectRatioConstraint
G2L["16d"] = Instance.new("UIAspectRatioConstraint", G2L["16b"]);
G2L["16d"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN
G2L["16e"] = Instance.new("Frame", G2L["162"]);
G2L["16e"]["BorderSizePixel"] = 0;
G2L["16e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16e"]["Size"] = UDim2.new(1, 0, 0.155, 0);
G2L["16e"]["Position"] = UDim2.new(0, 0, 0.36072, 0);
G2L["16e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16e"]["Name"] = [[SELECTONSCREEN]];
G2L["16e"]["LayoutOrder"] = 5;
G2L["16e"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.Trigger
G2L["16f"] = Instance.new("TextButton", G2L["16e"]);
G2L["16f"]["TextWrapped"] = true;
G2L["16f"]["BorderSizePixel"] = 0;
G2L["16f"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["16f"]["TextSize"] = 14;
G2L["16f"]["TextScaled"] = true;
G2L["16f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16f"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["16f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["16f"]["BackgroundTransparency"] = 1;
G2L["16f"]["Name"] = [[Trigger]];
G2L["16f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16f"]["Text"] = [[CLICK ON TARGET TO SELECT]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.Trigger.UITextSizeConstraint
G2L["170"] = Instance.new("UITextSizeConstraint", G2L["16f"]);
G2L["170"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.Trigger.UIAspectRatioConstraint
G2L["171"] = Instance.new("UIAspectRatioConstraint", G2L["16f"]);
G2L["171"]["AspectRatio"] = 11.17985;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.Handle
G2L["172"] = Instance.new("LocalScript", G2L["16e"]);
G2L["172"]["Name"] = [[Handle]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.UIAspectRatioConstraint
G2L["173"] = Instance.new("UIAspectRatioConstraint", G2L["16e"]);
G2L["173"]["AspectRatio"] = 11.17985;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Orbit
G2L["174"] = Instance.new("LocalScript", G2L["162"]);
G2L["174"]["Name"] = [[Orbit]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Togglers
G2L["175"] = Instance.new("LocalScript", G2L["162"]);
G2L["175"]["Name"] = [[Togglers]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TargetNameHandler
G2L["176"] = Instance.new("LocalScript", G2L["162"]);
G2L["176"]["Name"] = [[TargetNameHandler]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT
G2L["177"] = Instance.new("Frame", G2L["162"]);
G2L["177"]["BorderSizePixel"] = 0;
G2L["177"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["177"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["177"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["177"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["177"]["Name"] = [[ORBIT]];
G2L["177"]["LayoutOrder"] = 1;
G2L["177"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Toggle
G2L["178"] = Instance.new("TextLabel", G2L["177"]);
G2L["178"]["BorderSizePixel"] = 0;
G2L["178"]["TextSize"] = 14;
G2L["178"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["178"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["178"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["178"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["178"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["178"]["Text"] = [[]];
G2L["178"]["Name"] = [[Toggle]];
G2L["178"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Toggle.UICorner
G2L["179"] = Instance.new("UICorner", G2L["178"]);
G2L["179"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Toggle.UIAspectRatioConstraint
G2L["17a"] = Instance.new("UIAspectRatioConstraint", G2L["178"]);
G2L["17a"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.UIAspectRatioConstraint
G2L["17b"] = Instance.new("UIAspectRatioConstraint", G2L["177"]);
G2L["17b"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.KeyBind
G2L["17c"] = Instance.new("TextButton", G2L["177"]);
G2L["17c"]["TextWrapped"] = true;
G2L["17c"]["BorderSizePixel"] = 0;
G2L["17c"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["17c"]["TextSize"] = 14;
G2L["17c"]["TextScaled"] = true;
G2L["17c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17c"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17c"]["ZIndex"] = 2;
G2L["17c"]["Size"] = UDim2.new(0.30638, 0, 1, 0);
G2L["17c"]["BackgroundTransparency"] = 1;
G2L["17c"]["Name"] = [[KeyBind]];
G2L["17c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17c"]["Text"] = [[LeftAlt]];
G2L["17c"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.KeyBind.UITextSizeConstraint
G2L["17d"] = Instance.new("UITextSizeConstraint", G2L["17c"]);
G2L["17d"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Trigger
G2L["17e"] = Instance.new("TextButton", G2L["177"]);
G2L["17e"]["TextWrapped"] = true;
G2L["17e"]["BorderSizePixel"] = 0;
G2L["17e"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["17e"]["TextSize"] = 14;
G2L["17e"]["TextScaled"] = true;
G2L["17e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["17e"]["BackgroundTransparency"] = 1;
G2L["17e"]["Name"] = [[Trigger]];
G2L["17e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17e"]["Text"] = [[ORBIT]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Trigger.UITextSizeConstraint
G2L["17f"] = Instance.new("UITextSizeConstraint", G2L["17e"]);
G2L["17f"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.ORBIT.Trigger.UIAspectRatioConstraint
G2L["180"] = Instance.new("UIAspectRatioConstraint", G2L["17e"]);
G2L["180"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Keybind
G2L["181"] = Instance.new("LocalScript", G2L["162"]);
G2L["181"]["Name"] = [[Keybind]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP
G2L["182"] = Instance.new("Frame", G2L["162"]);
G2L["182"]["BorderSizePixel"] = 0;
G2L["182"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["182"]["Size"] = UDim2.new(1, 0, 0.155, 0);
G2L["182"]["Position"] = UDim2.new(0, 0, 0.36072, 0);
G2L["182"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["182"]["Name"] = [[AUTOSTOMP]];
G2L["182"]["LayoutOrder"] = 2;
G2L["182"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Trigger
G2L["183"] = Instance.new("TextButton", G2L["182"]);
G2L["183"]["TextWrapped"] = true;
G2L["183"]["BorderSizePixel"] = 0;
G2L["183"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["183"]["TextSize"] = 14;
G2L["183"]["TextScaled"] = true;
G2L["183"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["183"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["183"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["183"]["BackgroundTransparency"] = 1;
G2L["183"]["Name"] = [[Trigger]];
G2L["183"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["183"]["Text"] = [[AUTO STOMP]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Trigger.UITextSizeConstraint
G2L["184"] = Instance.new("UITextSizeConstraint", G2L["183"]);
G2L["184"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Trigger.UIAspectRatioConstraint
G2L["185"] = Instance.new("UIAspectRatioConstraint", G2L["183"]);
G2L["185"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Toggle
G2L["186"] = Instance.new("TextLabel", G2L["182"]);
G2L["186"]["BorderSizePixel"] = 0;
G2L["186"]["TextSize"] = 14;
G2L["186"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["186"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["186"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["186"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["186"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["186"]["Text"] = [[]];
G2L["186"]["Name"] = [[Toggle]];
G2L["186"]["Position"] = UDim2.new(0.883, 0, 0.158, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Toggle.UICorner
G2L["187"] = Instance.new("UICorner", G2L["186"]);
G2L["187"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.Toggle.UIAspectRatioConstraint
G2L["188"] = Instance.new("UIAspectRatioConstraint", G2L["186"]);
G2L["188"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.AUTOSTOMP.UIAspectRatioConstraint
G2L["189"] = Instance.new("UIAspectRatioConstraint", G2L["182"]);
G2L["189"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID
G2L["18a"] = Instance.new("Frame", G2L["162"]);
G2L["18a"]["BorderSizePixel"] = 0;
G2L["18a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18a"]["Size"] = UDim2.new(1, 0, 0.155, 0);
G2L["18a"]["Position"] = UDim2.new(0, 0, 0.36072, 0);
G2L["18a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18a"]["Name"] = [[VOID]];
G2L["18a"]["LayoutOrder"] = 3;
G2L["18a"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Trigger
G2L["18b"] = Instance.new("TextButton", G2L["18a"]);
G2L["18b"]["TextWrapped"] = true;
G2L["18b"]["BorderSizePixel"] = 0;
G2L["18b"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["18b"]["TextSize"] = 14;
G2L["18b"]["TextScaled"] = true;
G2L["18b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18b"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["18b"]["BackgroundTransparency"] = 1;
G2L["18b"]["Name"] = [[Trigger]];
G2L["18b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18b"]["Text"] = [[VOID]];


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Trigger.UITextSizeConstraint
G2L["18c"] = Instance.new("UITextSizeConstraint", G2L["18b"]);
G2L["18c"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Trigger.UIAspectRatioConstraint
G2L["18d"] = Instance.new("UIAspectRatioConstraint", G2L["18b"]);
G2L["18d"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Toggle
G2L["18e"] = Instance.new("TextLabel", G2L["18a"]);
G2L["18e"]["BorderSizePixel"] = 0;
G2L["18e"]["TextSize"] = 14;
G2L["18e"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["18e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18e"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18e"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["18e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18e"]["Text"] = [[]];
G2L["18e"]["Name"] = [[Toggle]];
G2L["18e"]["Position"] = UDim2.new(0.883, 0, 0.158, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Toggle.UICorner
G2L["18f"] = Instance.new("UICorner", G2L["18e"]);
G2L["18f"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.Toggle.UIAspectRatioConstraint
G2L["190"] = Instance.new("UIAspectRatioConstraint", G2L["18e"]);
G2L["190"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.VOID.UIAspectRatioConstraint
G2L["191"] = Instance.new("UIAspectRatioConstraint", G2L["18a"]);
G2L["191"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.UIPadding
G2L["192"] = Instance.new("UIPadding", G2L["15f"]);
G2L["192"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock
G2L["193"] = Instance.new("ScrollingFrame", G2L["d"]);
G2L["193"]["Visible"] = false;
G2L["193"]["Active"] = true;
G2L["193"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["193"]["BorderSizePixel"] = 0;
G2L["193"]["CanvasSize"] = UDim2.new(0, 0, 2.5, 0);
G2L["193"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["193"]["Name"] = [[AimLock]];
G2L["193"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["193"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["193"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["193"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["193"]["ScrollBarThickness"] = 0;
G2L["193"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock
G2L["194"] = Instance.new("Frame", G2L["193"]);
G2L["194"]["BorderSizePixel"] = 0;
G2L["194"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["194"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["194"]["Size"] = UDim2.new(0.90639, 0, 0.77882, 0);
G2L["194"]["Position"] = UDim2.new(0.0468, 0, 0, 0);
G2L["194"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["194"]["Name"] = [[AimLock]];
G2L["194"]["LayoutOrder"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.UICorner
G2L["195"] = Instance.new("UICorner", G2L["194"]);
G2L["195"]["CornerRadius"] = UDim.new(0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Title
G2L["196"] = Instance.new("TextLabel", G2L["194"]);
G2L["196"]["TextWrapped"] = true;
G2L["196"]["BorderSizePixel"] = 0;
G2L["196"]["TextSize"] = 14;
G2L["196"]["TextScaled"] = true;
G2L["196"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["196"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["196"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["196"]["BackgroundTransparency"] = 1;
G2L["196"]["Size"] = UDim2.new(1, 0, 0.14026, 0);
G2L["196"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["196"]["Text"] = [[AIMLOCK]];
G2L["196"]["Name"] = [[Title]];
G2L["196"]["Position"] = UDim2.new(-0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Title.UIAspectRatioConstraint
G2L["197"] = Instance.new("UIAspectRatioConstraint", G2L["196"]);
G2L["197"]["AspectRatio"] = 15.44224;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.UIGradient
G2L["198"] = Instance.new("UIGradient", G2L["194"]);
G2L["198"]["Rotation"] = 90;
G2L["198"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(54, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(77, 0, 0))};


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK
G2L["199"] = Instance.new("Frame", G2L["194"]);
G2L["199"]["BorderSizePixel"] = 0;
G2L["199"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["199"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["199"]["Position"] = UDim2.new(0, 0, 0.14026, 0);
G2L["199"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["199"]["Name"] = [[AIMLOCK]];
G2L["199"]["LayoutOrder"] = 1;
G2L["199"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Toggle
G2L["19a"] = Instance.new("TextLabel", G2L["199"]);
G2L["19a"]["BorderSizePixel"] = 0;
G2L["19a"]["TextSize"] = 14;
G2L["19a"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["19a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["19a"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["19a"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["19a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["19a"]["Text"] = [[]];
G2L["19a"]["Name"] = [[Toggle]];
G2L["19a"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Toggle.UICorner
G2L["19b"] = Instance.new("UICorner", G2L["19a"]);
G2L["19b"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Toggle.UIAspectRatioConstraint
G2L["19c"] = Instance.new("UIAspectRatioConstraint", G2L["19a"]);
G2L["19c"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.UIAspectRatioConstraint
G2L["19d"] = Instance.new("UIAspectRatioConstraint", G2L["199"]);
G2L["19d"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.KeyBind
G2L["19e"] = Instance.new("TextButton", G2L["199"]);
G2L["19e"]["TextWrapped"] = true;
G2L["19e"]["BorderSizePixel"] = 0;
G2L["19e"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["19e"]["TextSize"] = 14;
G2L["19e"]["TextScaled"] = true;
G2L["19e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["19e"]["ZIndex"] = 2;
G2L["19e"]["Size"] = UDim2.new(0.30638, 0, 1, 0);
G2L["19e"]["BackgroundTransparency"] = 1;
G2L["19e"]["Name"] = [[KeyBind]];
G2L["19e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["19e"]["Text"] = [[C]];
G2L["19e"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.KeyBind.UITextSizeConstraint
G2L["19f"] = Instance.new("UITextSizeConstraint", G2L["19e"]);
G2L["19f"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Trigger
G2L["1a0"] = Instance.new("TextButton", G2L["199"]);
G2L["1a0"]["TextWrapped"] = true;
G2L["1a0"]["BorderSizePixel"] = 0;
G2L["1a0"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1a0"]["TextSize"] = 14;
G2L["1a0"]["TextScaled"] = true;
G2L["1a0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a0"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a0"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1a0"]["BackgroundTransparency"] = 1;
G2L["1a0"]["Name"] = [[Trigger]];
G2L["1a0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a0"]["Text"] = [[AIMLOCK]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Trigger.UITextSizeConstraint
G2L["1a1"] = Instance.new("UITextSizeConstraint", G2L["1a0"]);
G2L["1a1"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCK.Trigger.UIAspectRatioConstraint
G2L["1a2"] = Instance.new("UIAspectRatioConstraint", G2L["1a0"]);
G2L["1a2"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.UIListLayout
G2L["1a3"] = Instance.new("UIListLayout", G2L["194"]);
G2L["1a3"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK
G2L["1a4"] = Instance.new("Frame", G2L["194"]);
G2L["1a4"]["BorderSizePixel"] = 0;
G2L["1a4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a4"]["Size"] = UDim2.new(1, 0, 0.36872, 0);
G2L["1a4"]["Position"] = UDim2.new(0, 0, 0.38763, 0);
G2L["1a4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a4"]["Name"] = [[CAMERALOCK]];
G2L["1a4"]["LayoutOrder"] = 6;
G2L["1a4"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Trigger
G2L["1a5"] = Instance.new("TextButton", G2L["1a4"]);
G2L["1a5"]["TextWrapped"] = true;
G2L["1a5"]["BorderSizePixel"] = 0;
G2L["1a5"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1a5"]["TextSize"] = 14;
G2L["1a5"]["TextScaled"] = true;
G2L["1a5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a5"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a5"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1a5"]["BackgroundTransparency"] = 1;
G2L["1a5"]["Name"] = [[Trigger]];
G2L["1a5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a5"]["Text"] = [[CAMERA LOCK]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Trigger.UITextSizeConstraint
G2L["1a6"] = Instance.new("UITextSizeConstraint", G2L["1a5"]);
G2L["1a6"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Trigger.UIAspectRatioConstraint
G2L["1a7"] = Instance.new("UIAspectRatioConstraint", G2L["1a5"]);
G2L["1a7"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame
G2L["1a8"] = Instance.new("Frame", G2L["1a4"]);
G2L["1a8"]["Visible"] = false;
G2L["1a8"]["ZIndex"] = 2;
G2L["1a8"]["BorderSizePixel"] = 0;
G2L["1a8"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 0);
G2L["1a8"]["Size"] = UDim2.new(1, 0, 2.57035, 0);
G2L["1a8"]["Position"] = UDim2.new(0, 0, 0.4, 0);
G2L["1a8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a8"]["Name"] = [[DropDownFrame]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling
G2L["1a9"] = Instance.new("ScrollingFrame", G2L["1a8"]);
G2L["1a9"]["Active"] = true;
G2L["1a9"]["ZIndex"] = 2;
G2L["1a9"]["BorderSizePixel"] = 0;
G2L["1a9"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 0);
G2L["1a9"]["Name"] = [[DropDownScrolling]];
G2L["1a9"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["1a9"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1a9"]["ScrollBarImageColor3"] = Color3.fromRGB(255, 0, 0);
G2L["1a9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a9"]["ScrollBarThickness"] = 4;
G2L["1a9"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.UIListLayout
G2L["1aa"] = Instance.new("UIListLayout", G2L["1a9"]);
G2L["1aa"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.HumanoidRootPart
G2L["1ab"] = Instance.new("TextButton", G2L["1a9"]);
G2L["1ab"]["TextWrapped"] = true;
G2L["1ab"]["BorderSizePixel"] = 0;
G2L["1ab"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["1ab"]["TextSize"] = 14;
G2L["1ab"]["TextScaled"] = true;
G2L["1ab"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ab"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1ab"]["ZIndex"] = 2;
G2L["1ab"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["1ab"]["BackgroundTransparency"] = 1;
G2L["1ab"]["LayoutOrder"] = 1;
G2L["1ab"]["Name"] = [[HumanoidRootPart]];
G2L["1ab"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ab"]["Text"] = [[HumanoidRootPart]];
G2L["1ab"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.HumanoidRootPart.UIAspectRatioConstraint
G2L["1ac"] = Instance.new("UIAspectRatioConstraint", G2L["1ab"]);
G2L["1ac"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.UpperTorso
G2L["1ad"] = Instance.new("TextButton", G2L["1a9"]);
G2L["1ad"]["TextWrapped"] = true;
G2L["1ad"]["BorderSizePixel"] = 0;
G2L["1ad"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["1ad"]["TextSize"] = 14;
G2L["1ad"]["TextScaled"] = true;
G2L["1ad"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ad"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1ad"]["ZIndex"] = 2;
G2L["1ad"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["1ad"]["BackgroundTransparency"] = 1;
G2L["1ad"]["LayoutOrder"] = 2;
G2L["1ad"]["Name"] = [[UpperTorso]];
G2L["1ad"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ad"]["Text"] = [[UpperTorso]];
G2L["1ad"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.UpperTorso.UIAspectRatioConstraint
G2L["1ae"] = Instance.new("UIAspectRatioConstraint", G2L["1ad"]);
G2L["1ae"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.LowerTorso
G2L["1af"] = Instance.new("TextButton", G2L["1a9"]);
G2L["1af"]["TextWrapped"] = true;
G2L["1af"]["BorderSizePixel"] = 0;
G2L["1af"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["1af"]["TextSize"] = 14;
G2L["1af"]["TextScaled"] = true;
G2L["1af"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1af"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1af"]["ZIndex"] = 2;
G2L["1af"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["1af"]["BackgroundTransparency"] = 1;
G2L["1af"]["LayoutOrder"] = 3;
G2L["1af"]["Name"] = [[LowerTorso]];
G2L["1af"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1af"]["Text"] = [[LowerTorso]];
G2L["1af"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.LowerTorso.UIAspectRatioConstraint
G2L["1b0"] = Instance.new("UIAspectRatioConstraint", G2L["1af"]);
G2L["1b0"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.Head
G2L["1b1"] = Instance.new("TextButton", G2L["1a9"]);
G2L["1b1"]["TextWrapped"] = true;
G2L["1b1"]["BorderSizePixel"] = 0;
G2L["1b1"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["1b1"]["TextSize"] = 14;
G2L["1b1"]["TextScaled"] = true;
G2L["1b1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b1"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b1"]["ZIndex"] = 2;
G2L["1b1"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["1b1"]["BackgroundTransparency"] = 1;
G2L["1b1"]["Name"] = [[Head]];
G2L["1b1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b1"]["Text"] = [[Head]];
G2L["1b1"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.Head.UIAspectRatioConstraint
G2L["1b2"] = Instance.new("UIAspectRatioConstraint", G2L["1b1"]);
G2L["1b2"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.DropDownScrolling.UIAspectRatioConstraint
G2L["1b3"] = Instance.new("UIAspectRatioConstraint", G2L["1a9"]);
G2L["1b3"]["AspectRatio"] = 5.42583;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.UICorner
G2L["1b4"] = Instance.new("UICorner", G2L["1a8"]);
G2L["1b4"]["CornerRadius"] = UDim.new(0.1, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.DropDownFrame.UIAspectRatioConstraint
G2L["1b5"] = Instance.new("UIAspectRatioConstraint", G2L["1a8"]);
G2L["1b5"]["AspectRatio"] = 5.42583;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.LOCKON
G2L["1b6"] = Instance.new("TextLabel", G2L["1a4"]);
G2L["1b6"]["TextWrapped"] = true;
G2L["1b6"]["BorderSizePixel"] = 0;
G2L["1b6"]["TextSize"] = 14;
G2L["1b6"]["TextScaled"] = true;
G2L["1b6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b6"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b6"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["1b6"]["BackgroundTransparency"] = 1;
G2L["1b6"]["Size"] = UDim2.new(1.00022, 0, 0.93111, 0);
G2L["1b6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b6"]["Text"] = [[Head]];
G2L["1b6"]["Name"] = [[LOCKON]];
G2L["1b6"]["Position"] = UDim2.new(-0.00365, 0, 0.46407, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.LOCKON.UIAspectRatioConstraint
G2L["1b7"] = Instance.new("UIAspectRatioConstraint", G2L["1b6"]);
G2L["1b7"]["AspectRatio"] = 14.98145;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Arrow
G2L["1b8"] = Instance.new("TextLabel", G2L["1a4"]);
G2L["1b8"]["TextWrapped"] = true;
G2L["1b8"]["BorderSizePixel"] = 0;
G2L["1b8"]["TextSize"] = 14;
G2L["1b8"]["TextScaled"] = true;
G2L["1b8"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1b8"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1b8"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1b8"]["BackgroundTransparency"] = 1;
G2L["1b8"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1b8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b8"]["Text"] = [[<]];
G2L["1b8"]["Name"] = [[Arrow]];
G2L["1b8"]["Position"] = UDim2.new(0.88346, 0, 0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Arrow.UICorner
G2L["1b9"] = Instance.new("UICorner", G2L["1b8"]);
G2L["1b9"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.Arrow.UIAspectRatioConstraint
G2L["1ba"] = Instance.new("UIAspectRatioConstraint", G2L["1b8"]);
G2L["1ba"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CAMERALOCK.UIAspectRatioConstraint
G2L["1bb"] = Instance.new("UIAspectRatioConstraint", G2L["1a4"]);
G2L["1bb"]["AspectRatio"] = 5.87411;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE
G2L["1bc"] = Instance.new("Frame", G2L["194"]);
G2L["1bc"]["BorderSizePixel"] = 0;
G2L["1bc"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1bc"]["Size"] = UDim2.new(1, 0, 0.36872, 0);
G2L["1bc"]["Position"] = UDim2.new(0, 0, 0.38763, 0);
G2L["1bc"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1bc"]["Name"] = [[AIMLOCKTOGGLE]];
G2L["1bc"]["LayoutOrder"] = 7;
G2L["1bc"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Trigger
G2L["1bd"] = Instance.new("TextButton", G2L["1bc"]);
G2L["1bd"]["TextWrapped"] = true;
G2L["1bd"]["BorderSizePixel"] = 0;
G2L["1bd"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1bd"]["TextSize"] = 14;
G2L["1bd"]["TextScaled"] = true;
G2L["1bd"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1bd"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1bd"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1bd"]["BackgroundTransparency"] = 1;
G2L["1bd"]["Name"] = [[Trigger]];
G2L["1bd"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1bd"]["Text"] = [[AIMLOCK TRIGGER MODE]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Trigger.UITextSizeConstraint
G2L["1be"] = Instance.new("UITextSizeConstraint", G2L["1bd"]);
G2L["1be"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Trigger.UIAspectRatioConstraint
G2L["1bf"] = Instance.new("UIAspectRatioConstraint", G2L["1bd"]);
G2L["1bf"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame
G2L["1c0"] = Instance.new("Frame", G2L["1bc"]);
G2L["1c0"]["Visible"] = false;
G2L["1c0"]["ZIndex"] = 2;
G2L["1c0"]["BorderSizePixel"] = 0;
G2L["1c0"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 0);
G2L["1c0"]["Size"] = UDim2.new(1, 0, 2.57035, 0);
G2L["1c0"]["Position"] = UDim2.new(0.00022, 0, 0.4, 0);
G2L["1c0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c0"]["Name"] = [[DropDownFrame]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling
G2L["1c1"] = Instance.new("ScrollingFrame", G2L["1c0"]);
G2L["1c1"]["Active"] = true;
G2L["1c1"]["ZIndex"] = 2;
G2L["1c1"]["BorderSizePixel"] = 0;
G2L["1c1"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 0);
G2L["1c1"]["Name"] = [[DropDownScrolling]];
G2L["1c1"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["1c1"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1c1"]["ScrollBarImageColor3"] = Color3.fromRGB(255, 0, 0);
G2L["1c1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c1"]["ScrollBarThickness"] = 4;
G2L["1c1"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.UIListLayout
G2L["1c2"] = Instance.new("UIListLayout", G2L["1c1"]);
G2L["1c2"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.Toggle
G2L["1c3"] = Instance.new("TextButton", G2L["1c1"]);
G2L["1c3"]["TextWrapped"] = true;
G2L["1c3"]["BorderSizePixel"] = 0;
G2L["1c3"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["1c3"]["TextSize"] = 14;
G2L["1c3"]["TextScaled"] = true;
G2L["1c3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c3"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c3"]["ZIndex"] = 2;
G2L["1c3"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["1c3"]["BackgroundTransparency"] = 1;
G2L["1c3"]["LayoutOrder"] = 1;
G2L["1c3"]["Name"] = [[Toggle]];
G2L["1c3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c3"]["Text"] = [[TOGGLE]];
G2L["1c3"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.Toggle.UIAspectRatioConstraint
G2L["1c4"] = Instance.new("UIAspectRatioConstraint", G2L["1c3"]);
G2L["1c4"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.Hold
G2L["1c5"] = Instance.new("TextButton", G2L["1c1"]);
G2L["1c5"]["TextWrapped"] = true;
G2L["1c5"]["BorderSizePixel"] = 0;
G2L["1c5"]["TextColor3"] = Color3.fromRGB(148, 0, 0);
G2L["1c5"]["TextSize"] = 14;
G2L["1c5"]["TextScaled"] = true;
G2L["1c5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c5"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c5"]["ZIndex"] = 2;
G2L["1c5"]["Size"] = UDim2.new(1, 0, 0.4, 0);
G2L["1c5"]["BackgroundTransparency"] = 1;
G2L["1c5"]["Name"] = [[Hold]];
G2L["1c5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c5"]["Text"] = [[HOLD]];
G2L["1c5"]["Position"] = UDim2.new(0, 0, -0.01977, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.Hold.UIAspectRatioConstraint
G2L["1c6"] = Instance.new("UIAspectRatioConstraint", G2L["1c5"]);
G2L["1c6"]["AspectRatio"] = 13.56456;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.DropDownScrolling.UIAspectRatioConstraint
G2L["1c7"] = Instance.new("UIAspectRatioConstraint", G2L["1c1"]);
G2L["1c7"]["AspectRatio"] = 5.42583;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.UICorner
G2L["1c8"] = Instance.new("UICorner", G2L["1c0"]);
G2L["1c8"]["CornerRadius"] = UDim.new(0.1, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.DropDownFrame.UIAspectRatioConstraint
G2L["1c9"] = Instance.new("UIAspectRatioConstraint", G2L["1c0"]);
G2L["1c9"]["AspectRatio"] = 5.42583;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.MODE
G2L["1ca"] = Instance.new("TextLabel", G2L["1bc"]);
G2L["1ca"]["TextWrapped"] = true;
G2L["1ca"]["BorderSizePixel"] = 0;
G2L["1ca"]["TextSize"] = 14;
G2L["1ca"]["TextScaled"] = true;
G2L["1ca"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ca"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1ca"]["TextColor3"] = Color3.fromRGB(173, 0, 0);
G2L["1ca"]["BackgroundTransparency"] = 1;
G2L["1ca"]["Size"] = UDim2.new(1.00022, 0, 0.93111, 0);
G2L["1ca"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ca"]["Text"] = [[HOLD]];
G2L["1ca"]["Name"] = [[MODE]];
G2L["1ca"]["Position"] = UDim2.new(-0.00365, 0, 0.46407, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.MODE.UIAspectRatioConstraint
G2L["1cb"] = Instance.new("UIAspectRatioConstraint", G2L["1ca"]);
G2L["1cb"]["AspectRatio"] = 14.98145;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Arrow
G2L["1cc"] = Instance.new("TextLabel", G2L["1bc"]);
G2L["1cc"]["TextWrapped"] = true;
G2L["1cc"]["BorderSizePixel"] = 0;
G2L["1cc"]["TextSize"] = 14;
G2L["1cc"]["TextScaled"] = true;
G2L["1cc"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1cc"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1cc"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1cc"]["BackgroundTransparency"] = 1;
G2L["1cc"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1cc"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1cc"]["Text"] = [[<]];
G2L["1cc"]["Name"] = [[Arrow]];
G2L["1cc"]["Position"] = UDim2.new(0.88346, 0, 0.05, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Arrow.UICorner
G2L["1cd"] = Instance.new("UICorner", G2L["1cc"]);
G2L["1cd"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.Arrow.UIAspectRatioConstraint
G2L["1ce"] = Instance.new("UIAspectRatioConstraint", G2L["1cc"]);
G2L["1ce"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.AIMLOCKTOGGLE.UIAspectRatioConstraint
G2L["1cf"] = Instance.new("UIAspectRatioConstraint", G2L["1bc"]);
G2L["1cf"]["AspectRatio"] = 5.87411;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT
G2L["1d0"] = Instance.new("Frame", G2L["194"]);
G2L["1d0"]["BorderSizePixel"] = 0;
G2L["1d0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d0"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["1d0"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["1d0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d0"]["Name"] = [[ANTIGROUNDSHOOT]];
G2L["1d0"]["LayoutOrder"] = 4;
G2L["1d0"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Trigger
G2L["1d1"] = Instance.new("TextButton", G2L["1d0"]);
G2L["1d1"]["TextWrapped"] = true;
G2L["1d1"]["BorderSizePixel"] = 0;
G2L["1d1"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1d1"]["TextSize"] = 14;
G2L["1d1"]["TextScaled"] = true;
G2L["1d1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d1"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1d1"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1d1"]["BackgroundTransparency"] = 1;
G2L["1d1"]["Name"] = [[Trigger]];
G2L["1d1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d1"]["Text"] = [[ANTI GROUND SHOOT]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Trigger.UITextSizeConstraint
G2L["1d2"] = Instance.new("UITextSizeConstraint", G2L["1d1"]);
G2L["1d2"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Trigger.UIAspectRatioConstraint
G2L["1d3"] = Instance.new("UIAspectRatioConstraint", G2L["1d1"]);
G2L["1d3"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Toggle
G2L["1d4"] = Instance.new("TextLabel", G2L["1d0"]);
G2L["1d4"]["BorderSizePixel"] = 0;
G2L["1d4"]["TextSize"] = 14;
G2L["1d4"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1d4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1d4"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d4"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1d4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d4"]["Text"] = [[]];
G2L["1d4"]["Name"] = [[Toggle]];
G2L["1d4"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Toggle.UICorner
G2L["1d5"] = Instance.new("UICorner", G2L["1d4"]);
G2L["1d5"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.Toggle.UIAspectRatioConstraint
G2L["1d6"] = Instance.new("UIAspectRatioConstraint", G2L["1d4"]);
G2L["1d6"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.ANTIGROUNDSHOOT.UIAspectRatioConstraint
G2L["1d7"] = Instance.new("UIAspectRatioConstraint", G2L["1d0"]);
G2L["1d7"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.UIAspectRatioConstraint
G2L["1d8"] = Instance.new("UIAspectRatioConstraint", G2L["194"]);
G2L["1d8"]["AspectRatio"] = 1.88;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK
G2L["1d9"] = Instance.new("Frame", G2L["194"]);
G2L["1d9"]["BorderSizePixel"] = 0;
G2L["1d9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d9"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["1d9"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["1d9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d9"]["Name"] = [[CREWCHECK]];
G2L["1d9"]["LayoutOrder"] = 2;
G2L["1d9"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Trigger
G2L["1da"] = Instance.new("TextButton", G2L["1d9"]);
G2L["1da"]["TextWrapped"] = true;
G2L["1da"]["BorderSizePixel"] = 0;
G2L["1da"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1da"]["TextSize"] = 14;
G2L["1da"]["TextScaled"] = true;
G2L["1da"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1da"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1da"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1da"]["BackgroundTransparency"] = 1;
G2L["1da"]["Name"] = [[Trigger]];
G2L["1da"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1da"]["Text"] = [[CREW CHECK]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Trigger.UITextSizeConstraint
G2L["1db"] = Instance.new("UITextSizeConstraint", G2L["1da"]);
G2L["1db"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Trigger.UIAspectRatioConstraint
G2L["1dc"] = Instance.new("UIAspectRatioConstraint", G2L["1da"]);
G2L["1dc"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Toggle
G2L["1dd"] = Instance.new("TextLabel", G2L["1d9"]);
G2L["1dd"]["BorderSizePixel"] = 0;
G2L["1dd"]["TextSize"] = 14;
G2L["1dd"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1dd"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1dd"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1dd"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1dd"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1dd"]["Text"] = [[]];
G2L["1dd"]["Name"] = [[Toggle]];
G2L["1dd"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Toggle.UICorner
G2L["1de"] = Instance.new("UICorner", G2L["1dd"]);
G2L["1de"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.Toggle.UIAspectRatioConstraint
G2L["1df"] = Instance.new("UIAspectRatioConstraint", G2L["1dd"]);
G2L["1df"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.CREWCHECK.UIAspectRatioConstraint
G2L["1e0"] = Instance.new("UIAspectRatioConstraint", G2L["1d9"]);
G2L["1e0"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK
G2L["1e1"] = Instance.new("Frame", G2L["194"]);
G2L["1e1"]["BorderSizePixel"] = 0;
G2L["1e1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e1"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["1e1"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["1e1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e1"]["Name"] = [[FRIENDCHECK]];
G2L["1e1"]["LayoutOrder"] = 3;
G2L["1e1"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Trigger
G2L["1e2"] = Instance.new("TextButton", G2L["1e1"]);
G2L["1e2"]["TextWrapped"] = true;
G2L["1e2"]["BorderSizePixel"] = 0;
G2L["1e2"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1e2"]["TextSize"] = 14;
G2L["1e2"]["TextScaled"] = true;
G2L["1e2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e2"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1e2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1e2"]["BackgroundTransparency"] = 1;
G2L["1e2"]["Name"] = [[Trigger]];
G2L["1e2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e2"]["Text"] = [[FRIEND CHECK]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Trigger.UITextSizeConstraint
G2L["1e3"] = Instance.new("UITextSizeConstraint", G2L["1e2"]);
G2L["1e3"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Trigger.UIAspectRatioConstraint
G2L["1e4"] = Instance.new("UIAspectRatioConstraint", G2L["1e2"]);
G2L["1e4"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Toggle
G2L["1e5"] = Instance.new("TextLabel", G2L["1e1"]);
G2L["1e5"]["BorderSizePixel"] = 0;
G2L["1e5"]["TextSize"] = 14;
G2L["1e5"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1e5"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1e5"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e5"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1e5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e5"]["Text"] = [[]];
G2L["1e5"]["Name"] = [[Toggle]];
G2L["1e5"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Toggle.UICorner
G2L["1e6"] = Instance.new("UICorner", G2L["1e5"]);
G2L["1e6"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.Toggle.UIAspectRatioConstraint
G2L["1e7"] = Instance.new("UIAspectRatioConstraint", G2L["1e5"]);
G2L["1e7"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.FRIENDCHECK.UIAspectRatioConstraint
G2L["1e8"] = Instance.new("UIAspectRatioConstraint", G2L["1e1"]);
G2L["1e8"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Togglers
G2L["1e9"] = Instance.new("LocalScript", G2L["194"]);
G2L["1e9"]["Name"] = [[Togglers]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Aimlock
G2L["1ea"] = Instance.new("LocalScript", G2L["194"]);
G2L["1ea"]["Name"] = [[Aimlock]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Keybind
G2L["1eb"] = Instance.new("LocalScript", G2L["194"]);
G2L["1eb"]["Name"] = [[Keybind]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Dropdown
G2L["1ec"] = Instance.new("LocalScript", G2L["194"]);
G2L["1ec"]["Name"] = [[Dropdown]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.WALLCHECK
G2L["1ed"] = Instance.new("Frame", G2L["194"]);
G2L["1ed"]["BorderSizePixel"] = 0;
G2L["1ed"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ed"]["Size"] = UDim2.new(1, 0, 0.1553, 0);
G2L["1ed"]["Position"] = UDim2.new(0, 0, 0.29556, 0);
G2L["1ed"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ed"]["Name"] = [[WALLCHECK]];
G2L["1ed"]["LayoutOrder"] = 5;
G2L["1ed"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.WALLCHECK.Trigger
G2L["1ee"] = Instance.new("TextButton", G2L["1ed"]);
G2L["1ee"]["TextWrapped"] = true;
G2L["1ee"]["BorderSizePixel"] = 0;
G2L["1ee"]["TextColor3"] = Color3.fromRGB(116, 0, 0);
G2L["1ee"]["TextSize"] = 14;
G2L["1ee"]["TextScaled"] = true;
G2L["1ee"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ee"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1ee"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1ee"]["BackgroundTransparency"] = 1;
G2L["1ee"]["Name"] = [[Trigger]];
G2L["1ee"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ee"]["Text"] = [[WALLCHECK]];


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.WALLCHECK.Trigger.UITextSizeConstraint
G2L["1ef"] = Instance.new("UITextSizeConstraint", G2L["1ee"]);
G2L["1ef"]["MaxTextSize"] = 40;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.WALLCHECK.Trigger.UIAspectRatioConstraint
G2L["1f0"] = Instance.new("UIAspectRatioConstraint", G2L["1ee"]);
G2L["1f0"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.WALLCHECK.Toggle
G2L["1f1"] = Instance.new("TextLabel", G2L["1ed"]);
G2L["1f1"]["BorderSizePixel"] = 0;
G2L["1f1"]["TextSize"] = 14;
G2L["1f1"]["BackgroundColor3"] = Color3.fromRGB(135, 0, 0);
G2L["1f1"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1f1"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f1"]["Size"] = UDim2.new(0.05745, 0, 0.76715, 0);
G2L["1f1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f1"]["Text"] = [[]];
G2L["1f1"]["Name"] = [[Toggle]];
G2L["1f1"]["Position"] = UDim2.new(0.88346, 0, 0.15794, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.WALLCHECK.Toggle.UICorner
G2L["1f2"] = Instance.new("UICorner", G2L["1f1"]);
G2L["1f2"]["CornerRadius"] = UDim.new(0.2, 0);


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.WALLCHECK.Toggle.UIAspectRatioConstraint
G2L["1f3"] = Instance.new("UIAspectRatioConstraint", G2L["1f1"]);
G2L["1f3"]["AspectRatio"] = 1.04435;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.WALLCHECK.UIAspectRatioConstraint
G2L["1f4"] = Instance.new("UIAspectRatioConstraint", G2L["1ed"]);
G2L["1f4"]["AspectRatio"] = 13.9463;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.UIListLayout
G2L["1f5"] = Instance.new("UIListLayout", G2L["193"]);
G2L["1f5"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["1f5"]["Padding"] = UDim.new(0.05, 0);
G2L["1f5"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.UIAspectRatioConstraint
G2L["1f6"] = Instance.new("UIAspectRatioConstraint", G2L["193"]);
G2L["1f6"]["AspectRatio"] = 1.61538;


-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.UIPadding
G2L["1f7"] = Instance.new("UIPadding", G2L["193"]);
G2L["1f7"]["PaddingTop"] = UDim.new(0.03, 0);


-- StarterGui.havoc.MainFrame.SideFrame
G2L["1f8"] = Instance.new("Frame", G2L["4"]);
G2L["1f8"]["BorderSizePixel"] = 0;
G2L["1f8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f8"]["Size"] = UDim2.new(0.20659, 0, 0.8892, 0);
G2L["1f8"]["Position"] = UDim2.new(0, 0, 0.1108, 0);
G2L["1f8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f8"]["Name"] = [[SideFrame]];
G2L["1f8"]["BackgroundTransparency"] = 1;


-- StarterGui.havoc.MainFrame.SideFrame.LocalPlayer
G2L["1f9"] = Instance.new("TextButton", G2L["1f8"]);
G2L["1f9"]["TextWrapped"] = true;
G2L["1f9"]["BorderSizePixel"] = 0;
G2L["1f9"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["1f9"]["TextSize"] = 1;
G2L["1f9"]["TextScaled"] = true;
G2L["1f9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f9"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1f9"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["1f9"]["BackgroundTransparency"] = 1;
G2L["1f9"]["Name"] = [[LocalPlayer]];
G2L["1f9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f9"]["Text"] = [[LOCAL PLAYER]];
G2L["1f9"]["Position"] = UDim2.new(0, 0, -0, 0);


-- StarterGui.havoc.MainFrame.SideFrame.LocalPlayer.UITextSizeConstraint
G2L["1fa"] = Instance.new("UITextSizeConstraint", G2L["1f9"]);
G2L["1fa"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.LocalPlayer.UIAspectRatioConstraint
G2L["1fb"] = Instance.new("UIAspectRatioConstraint", G2L["1f9"]);
G2L["1fb"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.UIListLayout
G2L["1fc"] = Instance.new("UIListLayout", G2L["1f8"]);
G2L["1fc"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.havoc.MainFrame.SideFrame.Player
G2L["1fd"] = Instance.new("TextButton", G2L["1f8"]);
G2L["1fd"]["TextWrapped"] = true;
G2L["1fd"]["BorderSizePixel"] = 0;
G2L["1fd"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["1fd"]["TextSize"] = 1;
G2L["1fd"]["TextScaled"] = true;
G2L["1fd"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1fd"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1fd"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["1fd"]["BackgroundTransparency"] = 1;
G2L["1fd"]["LayoutOrder"] = 1;
G2L["1fd"]["Name"] = [[Player]];
G2L["1fd"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1fd"]["Text"] = [[PLAYER]];
G2L["1fd"]["Position"] = UDim2.new(0, 0, 0.28565, 0);


-- StarterGui.havoc.MainFrame.SideFrame.Player.UITextSizeConstraint
G2L["1fe"] = Instance.new("UITextSizeConstraint", G2L["1fd"]);
G2L["1fe"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.Player.UIAspectRatioConstraint
G2L["1ff"] = Instance.new("UIAspectRatioConstraint", G2L["1fd"]);
G2L["1ff"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.AutoSettings
G2L["200"] = Instance.new("TextButton", G2L["1f8"]);
G2L["200"]["TextWrapped"] = true;
G2L["200"]["BorderSizePixel"] = 0;
G2L["200"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["200"]["TextSize"] = 1;
G2L["200"]["TextScaled"] = true;
G2L["200"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["200"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["200"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["200"]["BackgroundTransparency"] = 1;
G2L["200"]["LayoutOrder"] = 2;
G2L["200"]["Name"] = [[AutoSettings]];
G2L["200"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["200"]["Text"] = [[AutoSettings]];
G2L["200"]["Position"] = UDim2.new(0, 0, 0.5713, 0);


-- StarterGui.havoc.MainFrame.SideFrame.AutoSettings.UITextSizeConstraint
G2L["201"] = Instance.new("UITextSizeConstraint", G2L["200"]);
G2L["201"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.AutoSettings.UIAspectRatioConstraint
G2L["202"] = Instance.new("UIAspectRatioConstraint", G2L["200"]);
G2L["202"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.Teleport
G2L["203"] = Instance.new("TextButton", G2L["1f8"]);
G2L["203"]["TextWrapped"] = true;
G2L["203"]["BorderSizePixel"] = 0;
G2L["203"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["203"]["TextSize"] = 1;
G2L["203"]["TextScaled"] = true;
G2L["203"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["203"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["203"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["203"]["BackgroundTransparency"] = 1;
G2L["203"]["LayoutOrder"] = 3;
G2L["203"]["Name"] = [[Teleport]];
G2L["203"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["203"]["Text"] = [[TELEPORT]];
G2L["203"]["Position"] = UDim2.new(0, 0, 0.71413, 0);


-- StarterGui.havoc.MainFrame.SideFrame.Teleport.UITextSizeConstraint
G2L["204"] = Instance.new("UITextSizeConstraint", G2L["203"]);
G2L["204"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.Teleport.UIAspectRatioConstraint
G2L["205"] = Instance.new("UIAspectRatioConstraint", G2L["203"]);
G2L["205"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.Settings
G2L["206"] = Instance.new("TextButton", G2L["1f8"]);
G2L["206"]["TextWrapped"] = true;
G2L["206"]["BorderSizePixel"] = 0;
G2L["206"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["206"]["TextSize"] = 1;
G2L["206"]["TextScaled"] = true;
G2L["206"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["206"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["206"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["206"]["BackgroundTransparency"] = 1;
G2L["206"]["LayoutOrder"] = 5;
G2L["206"]["Name"] = [[Settings]];
G2L["206"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["206"]["Text"] = [[SETTINGS]];
G2L["206"]["Position"] = UDim2.new(0, 0, 0.85695, 0);


-- StarterGui.havoc.MainFrame.SideFrame.Settings.UITextSizeConstraint
G2L["207"] = Instance.new("UITextSizeConstraint", G2L["206"]);
G2L["207"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.Settings.UIAspectRatioConstraint
G2L["208"] = Instance.new("UIAspectRatioConstraint", G2L["206"]);
G2L["208"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.LocalScript
G2L["209"] = Instance.new("LocalScript", G2L["1f8"]);



-- StarterGui.havoc.MainFrame.SideFrame.UIAspectRatioConstraint
G2L["20a"] = Instance.new("UIAspectRatioConstraint", G2L["1f8"]);
G2L["20a"]["AspectRatio"] = 0.42061;


-- StarterGui.havoc.MainFrame.SideFrame.Orbit
G2L["20b"] = Instance.new("TextButton", G2L["1f8"]);
G2L["20b"]["TextWrapped"] = true;
G2L["20b"]["BorderSizePixel"] = 0;
G2L["20b"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["20b"]["TextSize"] = 1;
G2L["20b"]["TextScaled"] = true;
G2L["20b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20b"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["20b"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["20b"]["BackgroundTransparency"] = 1;
G2L["20b"]["LayoutOrder"] = 1;
G2L["20b"]["Name"] = [[Orbit]];
G2L["20b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20b"]["Text"] = [[ORBIT]];
G2L["20b"]["Position"] = UDim2.new(0, 0, 0.42848, 0);


-- StarterGui.havoc.MainFrame.SideFrame.Orbit.UITextSizeConstraint
G2L["20c"] = Instance.new("UITextSizeConstraint", G2L["20b"]);
G2L["20c"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.Orbit.UIAspectRatioConstraint
G2L["20d"] = Instance.new("UIAspectRatioConstraint", G2L["20b"]);
G2L["20d"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.SideFrame.AimLock
G2L["20e"] = Instance.new("TextButton", G2L["1f8"]);
G2L["20e"]["TextWrapped"] = true;
G2L["20e"]["BorderSizePixel"] = 0;
G2L["20e"]["TextColor3"] = Color3.fromRGB(136, 0, 0);
G2L["20e"]["TextSize"] = 1;
G2L["20e"]["TextScaled"] = true;
G2L["20e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["20e"]["Size"] = UDim2.new(1, 0, 0.14283, 0);
G2L["20e"]["BackgroundTransparency"] = 1;
G2L["20e"]["LayoutOrder"] = 4;
G2L["20e"]["Name"] = [[AimLock]];
G2L["20e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20e"]["Text"] = [[AIMLOCK]];
G2L["20e"]["Position"] = UDim2.new(0, 0, 0.14283, 0);


-- StarterGui.havoc.MainFrame.SideFrame.AimLock.UITextSizeConstraint
G2L["20f"] = Instance.new("UITextSizeConstraint", G2L["20e"]);
G2L["20f"]["MaxTextSize"] = 21;


-- StarterGui.havoc.MainFrame.SideFrame.AimLock.UIAspectRatioConstraint
G2L["210"] = Instance.new("UIAspectRatioConstraint", G2L["20e"]);
G2L["210"]["AspectRatio"] = 2.94492;


-- StarterGui.havoc.MainFrame.Accent
G2L["211"] = Instance.new("Frame", G2L["4"]);
G2L["211"]["BorderSizePixel"] = 0;
G2L["211"]["BackgroundColor3"] = Color3.fromRGB(69, 0, 0);
G2L["211"]["Size"] = UDim2.new(0.002, 0, 0.889, 0);
G2L["211"]["Position"] = UDim2.new(0.20659, 0, 0.1108, 0);
G2L["211"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["211"]["Name"] = [[Accent]];


-- StarterGui.havoc.MainFrame.Accent.UIAspectRatioConstraint
G2L["212"] = Instance.new("UIAspectRatioConstraint", G2L["211"]);
G2L["212"]["AspectRatio"] = 0.00407;


-- StarterGui.havoc.MainFrame.Accent
G2L["213"] = Instance.new("Frame", G2L["4"]);
G2L["213"]["BorderSizePixel"] = 0;
G2L["213"]["BackgroundColor3"] = Color3.fromRGB(69, 0, 0);
G2L["213"]["Size"] = UDim2.new(1, 0, 0.002, 0);
G2L["213"]["Position"] = UDim2.new(0, 0, 0.108, 0);
G2L["213"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["213"]["Name"] = [[Accent]];


-- StarterGui.havoc.MainFrame.Accent.UIAspectRatioConstraint
G2L["214"] = Instance.new("UIAspectRatioConstraint", G2L["213"]);
G2L["214"]["AspectRatio"] = 905.19946;


-- StarterGui.havoc.MainFrame.Title
G2L["215"] = Instance.new("TextLabel", G2L["4"]);
G2L["215"]["TextWrapped"] = true;
G2L["215"]["BorderSizePixel"] = 0;
G2L["215"]["TextSize"] = 14;
G2L["215"]["TextScaled"] = true;
G2L["215"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["215"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["215"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["215"]["BackgroundTransparency"] = 1;
G2L["215"]["Size"] = UDim2.new(0.9985, 0, 0.10803, 0);
G2L["215"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["215"]["Text"] = [[HAVOC]];
G2L["215"]["Name"] = [[Title]];


-- StarterGui.havoc.MainFrame.Title.UIAspectRatioConstraint
G2L["216"] = Instance.new("UIAspectRatioConstraint", G2L["215"]);
G2L["216"]["AspectRatio"] = 16.73271;


-- StarterGui.havoc.MainFrame.UIAspectRatioConstraint
G2L["217"] = Instance.new("UIAspectRatioConstraint", G2L["4"]);
G2L["217"]["AspectRatio"] = 1.8104;


-- StarterGui.havoc.MainFrame.Title
G2L["218"] = Instance.new("TextLabel", G2L["4"]);
G2L["218"]["TextWrapped"] = true;
G2L["218"]["BorderSizePixel"] = 0;
G2L["218"]["TextSize"] = 14;
G2L["218"]["TextScaled"] = true;
G2L["218"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["218"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["218"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["218"]["BackgroundTransparency"] = 1;
G2L["218"]["Size"] = UDim2.new(0.12326, 0, 0.06534, 0);
G2L["218"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["218"]["Text"] = [[(beta)]];
G2L["218"]["Name"] = [[Title]];
G2L["218"]["Position"] = UDim2.new(0.59223, 0, 0.0427, 0);


-- StarterGui.havoc.MainFrame.Title.UIAspectRatioConstraint
G2L["219"] = Instance.new("UIAspectRatioConstraint", G2L["218"]);
G2L["219"]["AspectRatio"] = 3.4155;


-- StarterGui.havoc.Lighting
G2L["21a"] = Instance.new("LocalScript", G2L["1"]);
G2L["21a"]["Enabled"] = false;
G2L["21a"]["Name"] = [[Lighting]];
G2L["21a"]["Disabled"] = true;


-- StarterGui.havoc.LoadGlobalTable
G2L["21b"] = Instance.new("LocalScript", G2L["1"]);
G2L["21b"]["Name"] = [[LoadGlobalTable]];


-- StarterGui.havoc.ESPSFolder.Controller
local function C_3()
	local script = G2L["3"];
	local ESPSFolder = script.Parent

	ESPSFolder.ChildAdded:Connect(function(child)
		local Player = game.Players:FindFirstChild(child.Name)
		if Player then
			local Slide = child.Health.Bar.Slide

			local function SetupHealthBar(Character)
				local Humanoid = Character:FindFirstChild("Humanoid")
				if not Humanoid then
					Humanoid = Character:WaitForChild("Humanoid", 5) -- Wait for up to 5 seconds in case of lag
				end
				if not Humanoid then return end -- If Humanoid still doesn't exist, exit

				local function UpdateHealth()
					if Humanoid and Humanoid.Parent then
						local HealthPercent = Humanoid.Health / math.max(Humanoid.MaxHealth, 1)

						-- Tween health bar size and position
						local newSize = UDim2.new(Slide.Size.X.Scale, 0, HealthPercent, 0)
						local newPosition = UDim2.new(Slide.Position.X.Scale, 0, 1, 0)

						Slide:TweenSizeAndPosition(newSize, newPosition, Enum.EasingDirection.Out, Enum.EasingStyle.Linear, 0.15, true)
					end
				end

				-- Connect to HealthChanged
				Humanoid.HealthChanged:Connect(UpdateHealth)
				UpdateHealth()
			end

			-- Set up for the current character
			if Player.Character then
				SetupHealthBar(Player.Character)
			end

			-- Listen for respawns and reinitialize the health bar
			Player.CharacterAdded:Connect(SetupHealthBar)
		end
	end)

end;
task.spawn(C_3);
-- StarterGui.havoc.MainFrame.Glow.GLOW
local function C_8()
	local script = G2L["8"];
	local imageLabel = script.Parent -- Make sure this script is inside your ImageLabel
	local uiGradient = imageLabel:FindFirstChild("UIGradient")

	-- Define the gradient with alternating red and dark red sections
	uiGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),  -- Bright Red
		ColorSequenceKeypoint.new(0.2, Color3.fromRGB(139, 0, 0)), -- Dark Red
		ColorSequenceKeypoint.new(0.4, Color3.fromRGB(255, 0, 0)), -- Bright Red
		ColorSequenceKeypoint.new(0.6, Color3.fromRGB(139, 0, 0)), -- Dark Red
		ColorSequenceKeypoint.new(0.8, Color3.fromRGB(255, 0, 0)), -- Bright Red
		ColorSequenceKeypoint.new(1, Color3.fromRGB(139, 0, 0))   -- Dark Red
	})

	-- Gradient rotation speed
	local speed = 4

	local function rotateGradient()
		while true do
			uiGradient.Rotation = (uiGradient.Rotation + speed) % 360
			wait(0.03)
		end
	end

	rotateGradient()

end;
task.spawn(C_8);
-- StarterGui.havoc.MainFrame.Drag.DragScript
local function C_b()
	local script = G2L["b"];
	local UIS = game:GetService('UserInputService')
	local frame = script.Parent.Parent
	local dragToggle = nil
	local dragSpeed = 0.05
	local dragStart = nil
	local startPos = nil

	local function updateInput(input)
		local delta = input.Position - dragStart
		local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		game:GetService('TweenService'):Create(frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
	end

	frame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
			dragToggle = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)

	UIS.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			if dragToggle then
				updateInput(input)
			end
		end
	end)
end;
task.spawn(C_b);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.CFRAMEWALK.Handle
local function C_1e()
	local script = G2L["1e"];
	local TweenService = game:GetService("TweenService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")
	local KeyBindBTN = script.Parent:WaitForChild("KeyBind")

	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
	local userInputService = game:GetService("UserInputService")
	local runService = game:GetService("RunService")

	local activeKeys = {} -- Track currently pressed keys
	local cframeMovementEnabled = false
	local currentKeyBind = Enum.KeyCode.F
	local awaitingKeyBind = false

	-- Function to update the character and humanoidRootPart reference
	local function updateCharacter()
		character = player.Character or player.CharacterAdded:Wait()
		humanoidRootPart = character:WaitForChild("HumanoidRootPart")
	end

	-- Listen for character respawn and update references
	player.CharacterAdded:Connect(function()
		updateCharacter()
	end)

	-- Toggle CFrame movement
	function toggleCFrameMovement(enable)
		if Toggle.BackgroundColor3 == Color3.fromRGB(255,0,0) then
			cframeMovementEnabled = enable
			if not enable then
				activeKeys = {} -- Reset active keys when disabled
			end
		end
	end

	-- Update CFrame movement
	runService.RenderStepped:Connect(function()
		if not cframeMovementEnabled then return end

		local moveDirection = Vector3.new(0, 0, 0)

		-- Update moveDirection based on active keys
		if activeKeys.W then
			moveDirection = moveDirection + Vector3.new(0, 0, 1)
		end
		if activeKeys.S then
			moveDirection = moveDirection + Vector3.new(0, 0, -1)
		end
		if activeKeys.A then
			moveDirection = moveDirection + Vector3.new(-1, 0, 0)
		end
		if activeKeys.D then
			moveDirection = moveDirection + Vector3.new(1, 0, 0)
		end

		-- Normalize and apply camera-relative direction
		if moveDirection.Magnitude > 0 then
			moveDirection = moveDirection.Unit

			local camera = workspace.CurrentCamera
			local cameraCFrame = camera.CFrame
			local lookVector = Vector3.new(cameraCFrame.LookVector.X, 0, cameraCFrame.LookVector.Z).Unit
			local rightVector = Vector3.new(cameraCFrame.RightVector.X, 0, cameraCFrame.RightVector.Z).Unit

			local finalDirection = (lookVector * moveDirection.Z + rightVector * moveDirection.X) * tonumber(script.Parent.Parent:WaitForChild("CFRAMESPEED").SPEED.Text) / 60
			humanoidRootPart.CFrame = humanoidRootPart.CFrame + finalDirection
		end
	end)

	-- Handle key presses
	userInputService.InputBegan:Connect(function(input, processed)
		if awaitingKeyBind then
			currentKeyBind = input.KeyCode
			KeyBindBTN.Text = tostring(currentKeyBind):gsub("Enum.KeyCode.", "")
			awaitingKeyBind = false
			return
		end

		if processed then return end -- Ignore input if processed by chat or GUI

		if input.KeyCode == Enum.KeyCode.W then
			activeKeys.W = true
		elseif input.KeyCode == Enum.KeyCode.S then
			activeKeys.S = true
		elseif input.KeyCode == Enum.KeyCode.A then
			activeKeys.A = true
		elseif input.KeyCode == Enum.KeyCode.D then
			activeKeys.D = true
		elseif input.KeyCode == currentKeyBind then
			toggleCFrameMovement(not cframeMovementEnabled)
		end
	end)

	-- Handle key releases
	userInputService.InputEnded:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.W then
			activeKeys.W = false
		elseif input.KeyCode == Enum.KeyCode.S then
			activeKeys.S = false
		elseif input.KeyCode == Enum.KeyCode.A then
			activeKeys.A = false
		elseif input.KeyCode == Enum.KeyCode.D then
			activeKeys.D = false
		end
	end)

	-- Handle UI toggle button
	TriggerBTN.MouseButton1Up:Connect(function()
		if Toggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			toggleCFrameMovement(false)
		else
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			toggleCFrameMovement(true)
		end
	end)

	-- Handle keybind button
	KeyBindBTN.MouseButton1Click:Connect(function()
		KeyBindBTN.Text = "Press Any Key"
		awaitingKeyBind = true
	end)

end;
task.spawn(C_1e);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Cframe.FLY.Handle
local function C_31()
	local script = G2L["31"];
	local TweenService = game:GetService("TweenService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local HAVOC = getgenv().HAVOC
	local Fly = HAVOC.LocalPlayer.Fly

	local UserInputService = game:GetService("UserInputService")
	local RunService = game:GetService("RunService")

	local Player = game.Players.LocalPlayer
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
	local Humanoid = Character:WaitForChild("Humanoid")
	local Camera = workspace.CurrentCamera

	local FlyTrigger = script.Parent:WaitForChild("Trigger")
	local FlyToggle = script.Parent:WaitForChild("Toggle")
	local KeyBindBTN = script.Parent:WaitForChild("KeyBind")

	local activeKeys = {}
	local flyEnabled = false
	local currentKeyBind = Fly.KeyBind or Enum.KeyCode.H
	local awaitingKeyBind = false

	local function updateCharacter()
		Character = Player.Character or Player.CharacterAdded:Wait()
		HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
		Humanoid = Character:WaitForChild("Humanoid")
	end

	Player.CharacterAdded:Connect(updateCharacter)

	local function toggleFlying(enable)
		if FlyToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			flyEnabled = enable
			if not enable then
				activeKeys = {} 
			end
		end
	end

	RunService.RenderStepped:Connect(function()
		if not flyEnabled then return end

		HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
		HumanoidRootPart.AssemblyAngularVelocity = Vector3.zero

		local moveDirection = Vector3.new(0, 0, 0)

		if activeKeys.W then moveDirection = moveDirection + Vector3.new(0, 0, 1) end
		if activeKeys.S then moveDirection = moveDirection + Vector3.new(0, 0, -1) end
		if activeKeys.A then moveDirection = moveDirection + Vector3.new(-1, 0, 0) end
		if activeKeys.D then moveDirection = moveDirection + Vector3.new(1, 0, 0) end
		if activeKeys.Space then moveDirection = moveDirection + Vector3.new(0, 1, 0) end
		if activeKeys.LeftShift then moveDirection = moveDirection + Vector3.new(0, -1, 0) end

		if moveDirection.Magnitude > 0 then
			moveDirection = moveDirection.Unit * (script.Parent.Parent.FLYSPEED.SPEED.Text / 60)
			local cameraCFrame = Camera.CFrame
			local finalDirection = (cameraCFrame.LookVector * moveDirection.Z + cameraCFrame.RightVector * moveDirection.X) + Vector3.new(0, moveDirection.Y, 0)
			HumanoidRootPart.AssemblyLinearVelocity = finalDirection * 60
		else
			local currentVelocity = HumanoidRootPart.AssemblyLinearVelocity
			HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, currentVelocity.Y, 0)
		end
	end)

	UserInputService.InputBegan:Connect(function(input, processed)
		if awaitingKeyBind then
			currentKeyBind = input.KeyCode
			KeyBindBTN.Text = tostring(currentKeyBind):gsub("Enum.KeyCode.", "")
			awaitingKeyBind = false
			return
		end

		if processed then return end

		if input.KeyCode == Enum.KeyCode.W then activeKeys.W = true end
		if input.KeyCode == Enum.KeyCode.S then activeKeys.S = true end
		if input.KeyCode == Enum.KeyCode.A then activeKeys.A = true end
		if input.KeyCode == Enum.KeyCode.D then activeKeys.D = true end
		if input.KeyCode == Enum.KeyCode.Space then activeKeys.Space = true end
		if input.KeyCode == Enum.KeyCode.LeftShift then activeKeys.LeftShift = true end
		if input.KeyCode == currentKeyBind then toggleFlying(not flyEnabled) end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.W then activeKeys.W = false end
		if input.KeyCode == Enum.KeyCode.S then activeKeys.S = false end
		if input.KeyCode == Enum.KeyCode.A then activeKeys.A = false end
		if input.KeyCode == Enum.KeyCode.D then activeKeys.D = false end
		if input.KeyCode == Enum.KeyCode.Space then activeKeys.Space = false end
		if input.KeyCode == Enum.KeyCode.LeftShift then activeKeys.LeftShift = false end
	end)

	FlyTrigger.MouseButton1Up:Connect(function()
		if FlyToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(FlyToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			toggleFlying(false)
		else
			local tween = TweenService:Create(FlyToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			toggleFlying(true)
		end
	end)

	KeyBindBTN.MouseButton1Click:Connect(function()
		KeyBindBTN.Text = "Press Any Key"
		awaitingKeyBind = true
	end) 
end;
task.spawn(C_31);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.INFSTAMINA.Handle
local function C_47()
	local script = G2L["47"];
	local globaltable = getgenv().HAVOC.LocalPlayer.CharacterSettings

	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	TriggerBTN.MouseButton1Up:Connect(function()
		if globaltable.InfStamina then
			globaltable.InfStamina = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			globaltable.InfStamina = true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	runservice.RenderStepped:Connect(function()
		if globaltable.InfStamina then
			local character = Player.Character or Player.CharacterAdded:Wait()
			if character then
				local humanoid = character:WaitForChild("Humanoid")
				humanoid.JumpPower = 50
			end
		end
	end)
end;
task.spawn(C_47);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoShootingRecoil.Handle
local function C_50()
	local script = G2L["50"];
	local globaltable = getgenv().HAVOC.LocalPlayer.CharacterSettings

	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	local MainEvent = game.ReplicatedStorage:WaitForChild("MainEvent")

	TriggerBTN.MouseButton1Up:Connect(function()
		if globaltable.NoShootingRecoil then
			globaltable.NoShootingRecoil = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			globaltable.NoShootingRecoil =  true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	MainEvent.OnClientEvent:Connect(function(arg1)
		if arg1 == "ShootingRecoil" then

		end
	end)
	runservice.RenderStepped:Connect(function()
		if globaltable.NoShootingRecoil then
			local character = Player.Character or Player.CharacterAdded:Wait()
			if character then
				local humanoid = character:WaitForChild("Humanoid")
				humanoid.JumpPower = 50
			end
		end
	end)
end;
task.spawn(C_50);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.AntiStomp.Handle
local function C_59()
	local script = G2L["59"];
	local globaltable = getgenv().HAVOC.LocalPlayer.CharacterSettings

	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	TriggerBTN.MouseButton1Up:Connect(function()
		if globaltable.AntiStomp then
			globaltable.AntiStomp = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			globaltable.AntiStomp = true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	runservice.RenderStepped:Connect(function()
		if globaltable.AntiStomp then
			if Player.Character:WaitForChild("BodyEffects")['K.O'].Value == true then 
				if Player.Character:FindFirstChild("Head") then
					Player.Character.Head:Destroy()
				end
			end
		end
	end)
end;
task.spawn(C_59);
-- StarterGui.havoc.MainFrame.ViewFrame.LocalPlayer.Playersettings.NoSeats.Handle
local function C_62()
	local script = G2L["62"];
	local globaltable = getgenv().HAVOC.LocalPlayer.CharacterSettings

	local Lighting = game:GetService("Lighting")
	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	local seats = {}
	local cooldown = false

	TriggerBTN.MouseButton1Up:Connect(function()
		if globaltable.NoSeats then
			globaltable.NoSeats = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			globaltable.NoSeats = true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()

		end
	end)

	runservice.RenderStepped:Connect(function()
		if globaltable.NoSeats and cooldown == false then
			cooldown = true
			for _,v in ipairs(workspace:GetDescendants()) do
				if v:IsA("Seat") then
					v.Parent = Lighting
					table.insert(seats,v)
				end
			end
		elseif not globaltable.NoSeats then
			cooldown = false
			for _,v in ipairs(seats) do
				v.Parent = workspace
			end
		end
	end)
end;
task.spawn(C_62);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.Esp.ESP
local function C_85()
	local script = G2L["85"];
	local TweenService = game:GetService("TweenService")
	local Players = game:GetService("Players")

	local Player = Players.LocalPlayer
	local ESPSFolder = script.Parent.Parent.Parent.Parent.Parent:WaitForChild("ESPSFolder")

	local espBTN = script.Parent:WaitForChild("ESP"):WaitForChild("Trigger")
	local espToggle = espBTN.Parent:WaitForChild("Toggle")

	local boxBTN = script.Parent:WaitForChild("BOX"):WaitForChild("Trigger")
	local boxToggle = boxBTN.Parent:WaitForChild("Toggle")

	local aotBTN = script.Parent:WaitForChild("ALWAYSONTOP"):WaitForChild("Trigger")
	local aotToggle = aotBTN.Parent:WaitForChild("Toggle")

	local ESPEnabled = false
	local BOXEnabled = false
	local AOTEnabled = true

	local connections = {}

	-- Function to create ESP for a player
	local function createESP(plr)
		local existingESP = ESPSFolder:FindFirstChild(plr.Name)
		if existingESP then
			existingESP:Destroy()
		end

		local ESPGUI = script.Parent.ESPGUI:Clone()
		ESPGUI.PLAYERNAME.Text = plr.Name
		ESPGUI.Enabled = true
		ESPGUI.Name = plr.Name
		ESPGUI.BOX.Visible = BOXEnabled
		ESPGUI.AlwaysOnTop = AOTEnabled
		ESPGUI.Parent = ESPSFolder


		-- Ensure character exists and set Adornee
		local function updateESP(character)
			local hrp = character:WaitForChild("HumanoidRootPart", 6)
			if hrp then
				ESPGUI.Adornee = hrp
			end
		end

		-- Connect CharacterAdded event
		local charAddedConn = plr.CharacterAdded:Connect(updateESP)
		connections[plr] = charAddedConn

		-- If player has a character, set ESP immediately
		if plr.Character then
			updateESP(plr.Character)
		end
	end

	-- Toggle ESP settings
	local function ESPTOGGLES(action, enabled)
		for _, gui in ipairs(ESPSFolder:GetChildren()) do
			if gui:IsA("BillboardGui") then
				if action == "BOX" then
					gui.BOX.Visible = enabled
				elseif action == "ALWAYSONTOP" then
					gui.AlwaysOnTop = enabled
				end
			end
		end
	end

	-- ESP Toggle logic
	local function ESPTOGGLE(action)
		if action == "EnableESP" then
			ESPEnabled = true
			for _, plr in ipairs(Players:GetPlayers()) do
				if plr ~= Player then
					createESP(plr)
				end
			end
		elseif action == "DisableESP" then
			ESPEnabled = false
			for _, gui in ipairs(ESPSFolder:GetChildren()) do
				if gui:IsA("BillboardGui") then
					gui:Destroy()
				end
			end
		elseif action == "EnableBOX" then
			BOXEnabled = true
			ESPTOGGLES("BOX", true)
		elseif action == "DisableBOX" then
			BOXEnabled = false
			ESPTOGGLES("BOX", false)
		elseif action == "EnableAOT" then
			AOTEnabled = true
			ESPTOGGLES("ALWAYSONTOP", true)
		elseif action == "DisableAOT" then
			AOTEnabled = false
			ESPTOGGLES("ALWAYSONTOP", false)
		end
	end

	-- ESP Button Clicks
	espBTN.MouseButton1Up:Connect(function()
		ESPEnabled = not ESPEnabled
		espToggle.BackgroundColor3 = ESPEnabled and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(134, 0, 0)
		ESPTOGGLE(ESPEnabled and "EnableESP" or "DisableESP")
	end)

	boxBTN.MouseButton1Up:Connect(function()
		BOXEnabled = not BOXEnabled
		boxToggle.BackgroundColor3 = BOXEnabled and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(134, 0, 0)
		ESPTOGGLE(BOXEnabled and "EnableBOX" or "DisableBOX")
	end)

	aotBTN.MouseButton1Up:Connect(function()
		AOTEnabled = not AOTEnabled
		aotToggle.BackgroundColor3 = AOTEnabled and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(134, 0, 0)
		ESPTOGGLE(AOTEnabled and "EnableAOT" or "DisableAOT")
	end)

	-- Player Join/Leave Handling
	Players.ChildAdded:Connect(function(plr)
		wait(1) -- Shorter wait to ensure the player is fully loaded
		if ESPEnabled then
			createESP(plr)
		end
	end)

	Players.ChildRemoved:Connect(function(plr)
		-- Disconnect CharacterAdded connection
		if connections[plr] then
			connections[plr]:Disconnect()
			connections[plr] = nil
		end

		-- Remove ESP GUI
		local ESPGUI = ESPSFolder:FindFirstChild(plr.Name)
		if ESPGUI then
			ESPGUI:Destroy()
		end
	end)

end;
task.spawn(C_85);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.Spectate
local function C_a1()
	local script = G2L["a1"];
	local TweenService = game:GetService("TweenService")

	local Player = game.Players.LocalPlayer
	local Camera = workspace.CurrentCamera

	local HAVOC = getgenv().HAVOC
	local View = HAVOC.Player.View

	local SpectateTrigger = script.Parent:WaitForChild("VIEW"):WaitForChild("Trigger")
	local SpectateToggle = SpectateTrigger.Parent:WaitForChild("Toggle")

	local function toggleSpectate()
		if View.Enabled then
			local targetPlayer
			for _, plr in ipairs(game.Players:GetPlayers()) do
				if plr.Name == View.Target or plr.DisplayName == View.Target then
					targetPlayer = plr
				end
			end
			if targetPlayer then
				Camera.CameraSubject = targetPlayer.Character.HumanoidRootPart
			end
		else
			Camera.CameraSubject = Player.Character
		end
	end

	SpectateTrigger.MouseButton1Up:Connect(function()
		if View.Enabled then
			View.Enabled = false
			local tween = TweenService:Create(SpectateToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			toggleSpectate()
		else
			View.Enabled = true
			local tween = TweenService:Create(SpectateToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			toggleSpectate()
		end
	end)
end;
task.spawn(C_a1);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.View.TargetNameHandler
local function C_a2()
	local script = G2L["a2"];
	local HAVOC = getgenv().HAVOC
	local ViewGLOBAL = HAVOC.Player.View

	local TARGETNAME = script.Parent:WaitForChild("TARGETNAME")
	local TargetNameTextBox = TARGETNAME:WaitForChild("TARGET")

	local function findClosestMatchingPlayer(inputName)
		inputName = inputName:lower()
		for _, player in pairs(game.Players:GetPlayers()) do
			local username = player.Name:lower()
			local displayName = player.DisplayName:lower()

			-- Check if input matches a part of the player's username or display name
			if username:find(inputName, 1, true) or displayName:find(inputName, 1, true) then
				return player.DisplayName
			end
		end
		return nil
	end

	TargetNameTextBox.FocusLost:Connect(function(enterPressed)
		if enterPressed then
			local partialInput = TargetNameTextBox.Text
			local foundPlayer = findClosestMatchingPlayer(partialInput)

			if foundPlayer then
				ViewGLOBAL.Target = foundPlayer
				TargetNameTextBox.Text = foundPlayer
			else
				ViewGLOBAL.Target = nil
				TargetNameTextBox.Text = "No player found"
			end
		end
	end)
end;
task.spawn(C_a2);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Togglers
local function C_b1()
	local script = G2L["b1"];
	local HAVOC = getgenv().HAVOC
	local RageAimGLOBAL = HAVOC.Player.RageAim

	local TweenService = game:GetService("TweenService")

	local TweenInfoON = TweenInfo.new(0.1)
	local TweenInfoOFF = TweenInfo.new(0.1)

	local KillAuraTrigger = script.Parent:WaitForChild("KILLAURA"):WaitForChild("Trigger")
	local KillAuraToggle = KillAuraTrigger.Parent:WaitForChild("Toggle")

	local WallBangTrigger = script.Parent:WaitForChild("WALLBANG"):WaitForChild("Trigger")
	local WallBangToggle = WallBangTrigger.Parent:WaitForChild("Toggle")

	KillAuraTrigger.MouseButton1Up:Connect(function()
		if KillAuraToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(KillAuraToggle, TweenInfoOFF, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			RageAimGLOBAL.KillAura = false
		else
			local tween = TweenService:Create(KillAuraToggle, TweenInfoON, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			RageAimGLOBAL.KillAura = true
		end
	end)

	WallBangTrigger.MouseButton1Up:Connect(function()
		if WallBangToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(WallBangToggle, TweenInfoOFF, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			RageAimGLOBAL.WallBang = false
		else
			local tween = TweenService:Create(WallBangToggle, TweenInfoON, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			RageAimGLOBAL.WallBang = true
		end
	end)
end;
task.spawn(C_b1);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.KillAura
local function C_b3()
	local script = G2L["b3"];
	local RunService = game:GetService("RunService")
	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local Player = Players.LocalPlayer
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")

	local HAVOC = getgenv().HAVOC
	local RageAimGLOBAL = HAVOC.Player.RageAim

	local function UpdateCharacter(newCharacter)
		Character = newCharacter
		HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
	end

	Player.CharacterAdded:Connect(UpdateCharacter)

	local function checkCrew(targetPlayer)
		local OurInformation = Player:WaitForChild("DataFolder"):FindFirstChild("Information")
		local TheirInformation = targetPlayer:WaitForChild("DataFolder"):FindFirstChild("Information")
		if not (OurInformation and TheirInformation) then return false end

		local ourCrew = OurInformation:FindFirstChild("Crew")
		local theirCrew = TheirInformation:FindFirstChild("Crew")

		if not ourCrew or not theirCrew then return true end

		return ourCrew.Value ~= theirCrew.Value
	end

	local function GetTool()
		local Tool = Player:FindFirstChildWhichIsA("Tool")
		for _, v in pairs(Character:GetChildren()) do
			if v:FindFirstChild("Ammo") and v:FindFirstChild("MaxAmmo") then
				return v
			end
		end
		return nil
	end

	local function isPlayerBlacklisted(targetPlayer)
		if not RageAimGLOBAL.Blacklist then return false end
		for _, name in ipairs(RageAimGLOBAL.Blacklist) do
			if targetPlayer.Name == name or targetPlayer.DisplayName == name then
				return true
			end
		end
		return false
	end

	local function isPlayerWhitelisted(targetPlayer)
		if not RageAimGLOBAL.Whitelist then return false end
		for _, name in ipairs(RageAimGLOBAL.Whitelist) do
			if targetPlayer.Name == name or targetPlayer.DisplayName == name then
				return true
			end
		end
		return false
	end

	local function shouldKill(targetPlayer)
		local hasBlacklist = RageAimGLOBAL.Blacklist and #RageAimGLOBAL.Blacklist > 0
		local hasWhitelist = RageAimGLOBAL.Whitelist and #RageAimGLOBAL.Whitelist > 0

		if hasBlacklist and hasWhitelist then
			return true
		elseif hasBlacklist then
			return isPlayerBlacklisted(targetPlayer)
		elseif hasWhitelist then
			return not isPlayerWhitelisted(targetPlayer)
		end

		return true
	end

	local function GetClosestPlayer()
		local closestPlayer = nil
		local shortestDistance = math.huge

		for _, target in pairs(Players:GetPlayers()) do
			if target ~= Player and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
				local targetRoot = target.Character:FindFirstChild("HumanoidRootPart")
				if HumanoidRootPart then
					local distance = (HumanoidRootPart.Position - targetRoot.Position).Magnitude

					if distance < shortestDistance 
						and target.Character:FindFirstChild("BodyEffects") 
						and not target.Character.BodyEffects["K.O"].Value 
						and checkCrew(target) 
						and shouldKill(target) then

						shortestDistance = distance
						closestPlayer = target
					end
				end
			end
		end

		return closestPlayer
	end

	local function ShootGun(targetPlayer)
		local targetHead = targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head")
		local gun = GetTool()

		if targetHead and gun and HumanoidRootPart then
			if not targetPlayer.Character:FindFirstChild("BodyEffects")["K.O"].Value then
				local args = {
					[1] = "ShootGun",
					[2] = gun:WaitForChild("Handle"),
					[3] = HumanoidRootPart.Position,
					[4] = targetHead.Position,
					[5] = targetHead,
					[6] = Vector3.zAxis
				}
				ReplicatedStorage:WaitForChild("MainEvent"):FireServer(unpack(args))
			end
		end
	end

	RunService.RenderStepped:Connect(function()
		if RageAimGLOBAL.KillAura then
			local targetPlayer = GetClosestPlayer()
			if targetPlayer then
				ShootGun(targetPlayer)
			end
		end
	end)

end;
task.spawn(C_b3);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Whitelist
local function C_be()
	local script = G2L["be"];
	local HAVOC = getgenv().HAVOC
	local RageAimGLOBAL = HAVOC.Player.RageAim

	local WhitelistTextBox = script.Parent:WaitForChild("WHITELIST"):WaitForChild("TARGET")

	local function findClosestMatchingPlayer(inputName)
		inputName = inputName:lower()
		for _, player in ipairs(game.Players:GetPlayers()) do
			local username = player.Name:lower()
			local displayName = player.DisplayName:lower()
			if username:find(inputName, 1, true) or displayName:find(inputName, 1, true) then
				return player.Name
			end
		end
		return nil
	end

	WhitelistTextBox.FocusLost:Connect(function(enterPressed)
		local inputText = WhitelistTextBox.Text
		local whitelistTable = {}

		if inputText == "" or inputText:match("^%s*$") then
			RageAimGLOBAL.Whitelist = {}
			return
		end

		for substring in string.gmatch(inputText, "[^,]+") do
			local trimmed = substring:match("^%s*(.-)%s*$")
			local foundPlayer = findClosestMatchingPlayer(trimmed)

			if foundPlayer then
				table.insert(whitelistTable, foundPlayer)
			end
		end

		RageAimGLOBAL.Whitelist = whitelistTable

		WhitelistTextBox.Text = table.concat(whitelistTable, ", ")
	end)

end;
task.spawn(C_be);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.Blacklist
local function C_bf()
	local script = G2L["bf"];
	local HAVOC = getgenv().HAVOC
	local RageAimGLOBAL = HAVOC.Player.RageAim

	local BlacklistTextBox = script.Parent:WaitForChild("BLACKLIST"):WaitForChild("TARGET")

	local function findClosestMatchingPlayer(inputName)
		inputName = inputName:lower()
		for _, player in ipairs(game.Players:GetPlayers()) do
			local username = player.Name:lower()
			local displayName = player.DisplayName:lower()
			if username:find(inputName, 1, true) or displayName:find(inputName, 1, true) then
				return player.Name
			end
		end
		return nil
	end

	BlacklistTextBox.FocusLost:Connect(function(enterPressed)
		local inputText = BlacklistTextBox.Text
		local blacklistTable = {}

		if inputText == "" or inputText:match("^%s*$") then
			RageAimGLOBAL.Blacklist = {}
			return
		end

		for substring in string.gmatch(inputText, "[^,]+") do
			local trimmed = substring:match("^%s*(.-)%s*$")
			local foundPlayer = findClosestMatchingPlayer(trimmed)

			if foundPlayer then
				table.insert(blacklistTable, foundPlayer)
			end
		end

		RageAimGLOBAL.Blacklist = blacklistTable
		BlacklistTextBox.Text = table.concat(blacklistTable, ", ")
	end)
end;
task.spawn(C_bf);
-- StarterGui.havoc.MainFrame.ViewFrame.Player.RageAim.RageAim
local function C_c8()
	local script = G2L["c8"];
	local RunService = game:GetService("RunService")
	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local UserInputService = game:GetService("UserInputService")

	local Player = Players.LocalPlayer
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")

	local HAVOC = getgenv().HAVOC
	local RageAimGLOBAL = HAVOC.Player.RageAim

	local function UpdateCharacter(newCharacter)
		Character = newCharacter
		HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
	end

	Player.CharacterAdded:Connect(UpdateCharacter)

	local function getClosestPlayer()
		local Camera = workspace.CurrentCamera
		local MousePosition = UserInputService:GetMouseLocation()
		local Closest
		local Distance = math.huge

		for _, otherPlayer in ipairs(Players:GetPlayers()) do
			local Character = otherPlayer.Character
			if otherPlayer ~= Player and Character and Character:FindFirstChild("Head") then
				local Head = Character.Head
				local Position, OnScreen = Camera:WorldToViewportPoint(Head.Position)
				if OnScreen then
					local screenPosition = Vector2.new(Position.X, Position.Y)
					local distance = (screenPosition - MousePosition).Magnitude

					if distance < Distance then
						Closest = otherPlayer
						Distance = distance
					end
				end
			end
		end
		return Closest
	end

	local function GetTool()
		local Tool = Player:FindFirstChildWhichIsA("Tool")
		for _, v in pairs(Player.Character:GetChildren()) do 
			if (v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo')) then 
				Tool = v 
				return Tool
			end
		end
	end

	local function childadded()
		Character.ChildAdded:Connect(function(child)
			local gun = GetTool()
			if gun then
				if RageAimGLOBAL.WallBang then 
					gun:FindFirstChildOfClass("LocalScript").Disabled = true
				end
				gun.Activated:Connect(function()
					if RageAimGLOBAL.WallBang then
						local target = getClosestPlayer()
						if target then
							local args = {
								[1] = "ShootGun",
								[2] = gun:WaitForChild("Handle"),
								[3] = HumanoidRootPart.Position,
								[4] = target.Character.Head.Position,
								[5] = target.Character.Head,
								[6] = Vector3.new(0,0,0)
							}
							game:GetService("ReplicatedStorage"):WaitForChild("MainEvent"):FireServer(unpack(args))
						end
					end
				end)
			end
		end)
	end

	childadded()

	Player.CharacterAdded:Connect(childadded)

	RunService.RenderStepped:Connect(function()
		if not RageAimGLOBAL.WallBang then
			local gun = GetTool()
			if gun then
				gun:FindFirstChildOfClass("LocalScript").Disabled = false
			end
		end
	end)
end;
task.spawn(C_c8);
-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.UIVISIBILITY.Handle
local function C_d5()
	local script = G2L["d5"];
	local userInputService = game:GetService("UserInputService")

	local HAVOC = script.Parent.Parent.Parent.Parent.Parent

	local KeyBindBTN = script.Parent:WaitForChild("KeyBind")
	local currentKeyBind = Enum.KeyCode.LeftControl

	KeyBindBTN.MouseButton1Click:Connect(function()
		KeyBindBTN.Text = "Press Any Key"
		awaitingKeyBind = true
	end)

	userInputService.InputBegan:Connect(function(input,processed)
		if not processed then
			if awaitingKeyBind then
				currentKeyBind = input.KeyCode
				KeyBindBTN.Text = tostring(currentKeyBind):gsub("Enum.KeyCode.", "")
				awaitingKeyBind = false
				return
			end

			if input.KeyCode == currentKeyBind then
				HAVOC.Visible = not HAVOC.Visible
			end
		end
	end)
end;
task.spawn(C_d5);
-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.Handle
local function C_e2()
	local script = G2L["e2"];
	local TweenService = game:GetService("TweenService")
	local Players = game:GetService("Players")
	local StarterGui = game:GetService("StarterGui")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local player = game.Players.LocalPlayer

	local joinleaveBTN = script.Parent:WaitForChild("JOIN_LEAVENOTI"):WaitForChild("Trigger")
	local joinleaveToggle = joinleaveBTN.Parent:WaitForChild("Toggle")

	local joinleaveEnabled = false

	function sendNotification(title, text, duration)
		StarterGui:SetCore("SendNotification", {
			Title = title;
			Text = text;
			Duration = duration;
		})
	end

	joinleaveBTN.MouseButton1Up:Connect(function()
		if joinleaveEnabled then
			joinleaveEnabled = false
			local tween = TweenService:Create(joinleaveToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			joinleaveEnabled = true
			local tween = TweenService:Create(joinleaveToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	Players.ChildAdded:Connect(function(plr)
		if plr:IsA("Player") and joinleaveEnabled then
			sendNotification("JOINED", "DISPLAY: " .. plr.DisplayName .. " USER: " .. plr.Name, 4)
		end
	end)

	Players.ChildRemoved:Connect(function(plr)
		if plr:IsA("Player") and joinleaveEnabled then
			sendNotification("LEFT", "DISPLAY: " .. plr.DisplayName .. " USER: " .. plr.Name, 4)
		end
	end)
end;
task.spawn(C_e2);
-- StarterGui.havoc.MainFrame.ViewFrame.Settings.MainSettings.REMOVESNOW.Handle
local function C_ea()
	local script = G2L["ea"];
	local TweenService = game:GetService("TweenService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local Toggle = script.Parent:WaitForChild("Toggle")

	local removesnowEnabled = false

	TriggerBTN.MouseButton1Up:Connect(function()
		if removesnowEnabled then
			removesnowEnabled = false
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			for _, snow in pairs(game.Lighting:GetDescendants()) do
				if snow.Name == "Snow" then
					snow.Parent = workspace
				end
			end
		else
			removesnowEnabled = true
			local tween = TweenService:Create(Toggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			for _, snow in pairs(workspace:GetDescendants()) do
				if snow.Name == "Snow" then
					snow.Parent = game.Lighting
				end
			end
		end
	end)
end;
task.spawn(C_ea);
-- StarterGui.havoc.MainFrame.ViewFrame.AutoSettings.Configuration.AutoSettings
local function C_10e()
	local script = G2L["10e"];
	local HAVOC = getgenv().HAVOC
	local AutoGLOBAL = HAVOC.AutoSettings

	local TweenService = game:GetService("TweenService")
	local runservice = game:GetService("RunService")
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local Player = game.Players.LocalPlayer

	local AutoReloadTrigger = script.Parent:WaitForChild("AUTORELOAD"):WaitForChild("Trigger")
	local AutoReloadToggle = AutoReloadTrigger.Parent:WaitForChild("Toggle")

	local AutoStompTrigger = script.Parent:WaitForChild("AUTOSTOMP"):WaitForChild("Trigger")
	local AutoStompToggle = AutoStompTrigger.Parent:WaitForChild("Toggle")

	local AutoShootTrigger = script.Parent:WaitForChild("AUTOSHOOT"):WaitForChild("Trigger")
	local AutoShootToggle = AutoShootTrigger.Parent:WaitForChild("Toggle")

	local AutoMaskTrigger = script.Parent:WaitForChild("AUTOMASK"):WaitForChild("Trigger")
	local AutoMaskToggle = AutoMaskTrigger.Parent:WaitForChild("Toggle")

	AutoReloadTrigger.MouseButton1Up:Connect(function()
		if AutoGLOBAL.AutoReload then
			AutoGLOBAL.AutoReload = false
			local tween = TweenService:Create(AutoReloadToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AutoGLOBAL.AutoReload = true
			local tween = TweenService:Create(AutoReloadToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	AutoStompTrigger.MouseButton1Up:Connect(function()
		if AutoGLOBAL.AutoStomp then
			AutoGLOBAL.AutoStomp = false
			local tween = TweenService:Create(AutoStompToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AutoGLOBAL.AutoStomp = true
			local tween = TweenService:Create(AutoStompToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	AutoShootTrigger.MouseButton1Up:Connect(function()
		if AutoGLOBAL.AutoShoot then
			AutoGLOBAL.AutoShoot = false
			local tween = TweenService:Create(AutoShootToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AutoGLOBAL.AutoShoot = true
			local tween = TweenService:Create(AutoShootToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	AutoMaskTrigger.MouseButton1Up:Connect(function()
		if AutoGLOBAL.AutoMask then
			AutoGLOBAL.AutoMask = false
			local tween = TweenService:Create(AutoMaskToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AutoGLOBAL.AutoMask = true
			local tween = TweenService:Create(AutoMaskToggle, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	local function GetTool3()
		local Tool
		for _, v in pairs(Player.Character:GetChildren()) do 
			if (v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo')) then 
				Tool = v 
				return Tool
			end
		end
	end

	runservice.RenderStepped:Connect(function()
		if AutoGLOBAL.AutoReload then
			local Gun = GetTool3()
			local KOValue = Player.Character:WaitForChild('BodyEffects')['K.O'].Value
			if Gun and KOValue ~= true and Gun.Ammo.Value < 1 then
				game:GetService("ReplicatedStorage"):FindFirstChild("MainEvent"):FireServer("Reload",Gun)
			end
		end
		if AutoGLOBAL.AutoShoot then
			local Gun = GetTool3()
			local KOValue = Player.Character:WaitForChild('BodyEffects')['K.O'].Value
			if Gun and KOValue ~= true then
				Gun:Activate()
			end
		end
		if AutoGLOBAL.AutoStomp then
			game:GetService("ReplicatedStorage"):FindFirstChild("MainEvent"):FireServer("Stomp")
		end
		if AutoGLOBAL.AutoMask then
			local Mask = Player.Backpack:FindFirstChild("[Mask]")
			local Humanoid = Player.Character.Humanoid
			if Mask and Humanoid and Humanoid.DisplayDistanceType ~= Enum.HumanoidDisplayDistanceType.None then
				Humanoid:EquipTool(Mask)
				Mask:Activate()
			end
		end
	end)
end;
task.spawn(C_10e);
-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.Places.Handle
local function C_144()
	local script = G2L["144"];
	local player = game.Players.LocalPlayer
	local Character = player.Character or player.CharacterAdded:Wait()
	local Humanoid = Character:WaitForChild("Humanoid")
	local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

	local function updateCharacter()
		Character = player.Character or player.CharacterAdded:Wait()
		HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
	end

	player.CharacterAdded:Connect(function()
		updateCharacter()
	end)

	for _,TriggerBTN in pairs(script.Parent:GetDescendants()) do
		if TriggerBTN:IsA("TextButton") then
			TriggerBTN.MouseButton1Up:Connect(function()
				if HumanoidRootPart and Humanoid.Health > 0 then
					if TriggerBTN.Parent.Name == "DABANK" then
						HumanoidRootPart.CFrame = CFrame.new(-385.50,21.42,-282.75,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "DB" then
						HumanoidRootPart.CFrame = CFrame.new(-1024.69, 21.97, -274,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "DOWNHILLZGUN" then
						HumanoidRootPart.CFrame = CFrame.new(-557.99,8.22,-736.59,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "MILITARY" then
						HumanoidRootPart.CFrame = CFrame.new(9.52,26.47,-869.6,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "REVOLVER" then
						HumanoidRootPart.CFrame = CFrame.new(-628.08,21.97,-129.13,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "UPHILLZGUN" then
						HumanoidRootPart.CFrame = CFrame.new(481.9,48.2,-607.5,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "WAREHOUSE" then
						HumanoidRootPart.CFrame = CFrame.new(481.9,48,2,-607.5,0,0,0)
					elseif TriggerBTN.Parent.Name == "RIFLE" then
						local rifleModel = workspace:FindFirstChild("[Rifle] - $1694", true)
						HumanoidRootPart.CFrame = rifleModel.Head.CFrame
					end
				end
			end)
		end
	end
end;
task.spawn(C_144);
-- StarterGui.havoc.MainFrame.ViewFrame.Teleport.PlayerTeleport.Handle
local function C_15d()
	local script = G2L["15d"];
	local Client = game.Players.LocalPlayer
	local Character = Client.Character or Client.CharacterAdded:Wait()
	local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

	local TeleportTrigger = script.Parent:WaitForChild("TELEPORT"):WaitForChild("Trigger")
	local TargetNameTextBox = script.Parent:WaitForChild("TARGETNAME"):WaitForChild("TARGET")
	local function updateCharacter()
		Character = Client.Character or Client.CharacterAdded:Wait()
		HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
	end

	local function findClosestMatchingPlayer(inputName)
		inputName = inputName:lower()
		for _, player in pairs(game.Players:GetPlayers()) do
			local username = player.Name:lower()
			local displayName = player.DisplayName:lower()

			if username:find(inputName, 1, true) or displayName:find(inputName, 1, true) then
				return player
			end
		end
		return nil
	end

	Client.CharacterAdded:Connect(function()
		updateCharacter()
	end)

	TeleportTrigger.MouseButton1Up:Connect(function()
		local foundPlayer = findClosestMatchingPlayer(TargetNameTextBox.Text)
		if foundPlayer then
			TargetNameTextBox.Text = foundPlayer.DisplayName
			HumanoidRootPart.CFrame = foundPlayer.Character.LowerTorso.CFrame
		else
			TargetNameTextBox.Text = ""
			TargetNameTextBox.PlaceholderText = "NO PLAYER FOUND"
			wait(2)
			TargetNameTextBox.PlaceholderText = "TARGET NAME OR DISPLAY"
		end
	end)
end;
task.spawn(C_15d);
-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.SELECTONSCREEN.Handle
local function C_172()
	local script = G2L["172"];
	local HAVOC = getgenv().HAVOC
	local OrbitGLOBAL = HAVOC.Orbit

	local Player = game.Players.LocalPlayer
	local Mouse = Player:GetMouse()

	local TriggerBTN = script.Parent:WaitForChild("Trigger")
	local playerText = script.Parent.Parent:WaitForChild("TARGETNAME"):WaitForChild("TARGET")
	local defaultText = TriggerBTN.Text

	-- Function to find the character model
	local function getCharacterFromTarget(target)
		while target do
			if target:FindFirstChild("Humanoid") then
				return target
			end
			target = target.Parent
		end
		return nil
	end

	TriggerBTN.MouseButton1Up:Connect(function()
		TriggerBTN.Text = "Select a player" -- Change button text to indicate selection mode
		local connection
		connection = Mouse.Button1Up:Connect(function()
			local TargetSelect = Mouse.Target
			if TargetSelect then
				local character = getCharacterFromTarget(TargetSelect)
				if character then
					local selectedPlayer = game.Players:GetPlayerFromCharacter(character)
					if selectedPlayer and selectedPlayer ~= Player then
						playerText.Text = selectedPlayer.Name
						OrbitGLOBAL.Target = selectedPlayer.Name
						TriggerBTN.Text = defaultText
						connection:Disconnect() -- Stop listening for mouse clicks
						return
					end
				end
			end
			-- If no valid character or player is found, reset
			connection:Disconnect()
			TriggerBTN.Text = defaultText
		end)
	end)

end;
task.spawn(C_172);
-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Orbit
local function C_174()
	local script = G2L["174"];
	local vim = game:GetService("VirtualInputManager")
	local HAVOC = getgenv().HAVOC
	local OrbitGLOBAL = HAVOC.Orbit

	local Players = game:GetService("Players")
	local UserInputService = game:GetService("UserInputService")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local RunService = game:GetService("RunService")
	local camera = workspace.CurrentCamera

	local localPlayer = Players.LocalPlayer
	local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
	local rootPart = character:WaitForChild("HumanoidRootPart")

	local DataFolder = localPlayer:WaitForChild("DataFolder")
	local InventoryFolder = DataFolder:WaitForChild("Inventory")

	local targetPlayer

	local ESPS = script.Parent.Parent.Parent.Parent.Parent:WaitForChild("ESPSFolder")

	local OrbitEnabled = false
	local gettingAmmo = false
	local reloadingAmmo = false
	local isBusy = false
	local minY = 1000000
	local moveDistance = 1000

	local rifleModel = workspace:FindFirstChild("[Rifle] - $1694", true)
	local rifleAmmo
	for _, v in ipairs(workspace:GetDescendants()) do
		if string.find(v.Name, "Rifle Ammo", 1, true) and v:IsA("Model") then
			rifleAmmo = v
			break
		end
	end

	local function updateCharacterReferences()
		character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
		rootPart = character:WaitForChild("HumanoidRootPart")
	end

	localPlayer.CharacterAdded:Connect(function()
		updateCharacterReferences()
	end)

	local function getTargetCFrame()
		for _, player in ipairs(Players:GetPlayers()) do
			if player.Name == OrbitGLOBAL.Target or player.DisplayName == OrbitGLOBAL.Target then
				targetPlayer = player
			end
		end
		if targetPlayer and targetPlayer.Character then
			local targetRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
			if targetRoot then
				return targetRoot.CFrame
			end
		end
		return nil
	end

	local function GetTool()
		local Tool
		for _, v in pairs(localPlayer.Character:GetChildren()) do 
			if string.find(v.Name,"Rifle") or string.find(v.Name, "LMG") or string.find(v.Name,"Silencer") or string.find(v.Name,"AUG") then
				if v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo') then 
					Tool = v
					if not isBusy then
						camera.CameraSubject = character
					end
					return Tool
				end
			end
		end
		for _,v in pairs(localPlayer.Backpack:GetChildren()) do
			if string.find(v.Name,"Rifle") or string.find(v.Name, "LMG") or string.find(v.Name,"Silencer") or string.find(v.Name,"AUG") then
				if v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo') then 
					Tool = v 
					localPlayer.Character.Humanoid:EquipTool(v)
					return Tool
				end
			end 
		end
		rootPart.CFrame = rifleModel.Head.CFrame * CFrame.new(0, -3, 0)
		camera.CameraSubject = rifleModel.Head
		camera.CFrame = CFrame.new(camera.CFrame.Position, rifleModel.Head.Position)
		local screenPoint = camera:WorldToViewportPoint(rifleModel.Head.Position)
		vim:SendMouseMoveEvent(screenPoint.X, screenPoint.Y, game)
		vim:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, true, game, 0)
		task.wait(0.1)
		vim:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, false, game, 0)
	end

	local function getAmmo()
		rootPart.CFrame = rifleAmmo.Head.CFrame * CFrame.new(0, -3, 0)
		camera.CameraSubject = rifleAmmo.Head
		camera.CFrame = CFrame.new(camera.CFrame.Position, rifleAmmo.Head.Position)
		local screenPoint = camera:WorldToViewportPoint(rifleAmmo.Head.Position)
		vim:SendMouseMoveEvent(screenPoint.X, screenPoint.Y, game)
		vim:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, true, game, 0)
		task.wait(0.1)
		vim:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, false, game, 0)
	end

	local function orbitAround()
		local targetCFrame = getTargetCFrame()
		if targetCFrame then
			local orbitRadius = 12
			local orbitSpeed = 30
			local angle = tick() * orbitSpeed
			local x = math.cos(angle) * orbitRadius
			local z = math.sin(angle) * orbitRadius
			local orbitOffset = Vector3.new(x, 10, z)
			rootPart.CFrame = targetCFrame * CFrame.new(orbitOffset)
		end
	end

	local function lockCamera()
		local targetHead = targetPlayer.Character:FindFirstChild("Head")
		if targetHead then
			camera.CFrame = CFrame.new(camera.CFrame.Position, targetHead.Position)
		end
	end

	local function shootGun()
		local targetHead = targetPlayer.Character:FindFirstChild("Head")
		local gun = GetTool()
		if targetHead then
			if gun then
				if not targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value then
					local args = {
						[1] = "ShootGun",
						[2] = gun:WaitForChild("Handle"),
						[3] = rootPart.Position,
						[4] = targetHead.Position,
						[5] = targetHead,
						[6] = Vector3.new(0,0,0)
					}
					game:GetService("ReplicatedStorage"):WaitForChild("MainEvent"):FireServer(unpack(args))
				end
			end
		end
	end

	local function void()
		local randomX = math.random(-moveDistance, moveDistance)
		local randomZ = math.random(-moveDistance, moveDistance)
		local randomY = math.random(-moveDistance, moveDistance) 

		local newY = math.max(rootPart.Position.Y + randomY, minY)

		rootPart.CFrame = CFrame.new(rootPart.Position.X + randomX, newY, rootPart.Position.Z + randomZ)
	end
	UserInputService.InputBegan:Connect(function(input,processed)
		if not processed then
			if input.KeyCode == OrbitGLOBAL.Settings.KeyBind and OrbitGLOBAL.Enabled then
				if not OrbitEnabled then
					OrbitEnabled = true
				else
					OrbitEnabled = false
				end
			end
		end
	end)

	RunService.RenderStepped:Connect(function()
		if not OrbitGLOBAL.Enabled and OrbitEnabled then
			OrbitEnabled = false
		end

		if OrbitEnabled and not isBusy then
			local gun = GetTool()
			if gun then
				getTargetCFrame()
				if targetPlayer and targetPlayer.Character then
					if not targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value and isBusy == false then
						orbitAround()
						lockCamera()
						shootGun()
					end

					--[[if ESPS:FindFirstChild(targetPlayer.Name) then
						ESPS[targetPlayer.Name].BOX.ImageColor3 = Color3.fromRGB(255, 0, 0)
					end--]]

					if InventoryFolder[gun.Name].Value == "0" and gun.Ammo.Value == 0 then
						isBusy = true
						while InventoryFolder[gun.Name].Value == "0" and gun.Ammo.Value == 0 and OrbitEnabled and not localPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value and not targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value do
							localPlayer.Character.Humanoid:UnequipTools()
							gettingAmmo = true
							getAmmo()
						end
						GetTool()
						camera.CameraSubject = character
						gettingAmmo = false
						isBusy = false
					end

					if OrbitGLOBAL.Settings.Void and not isBusy then
						if gun.Ammo.Value == 0 and tonumber(InventoryFolder[gun.Name].Value) > 0 then
							if not targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value then
								isBusy = true
								while gun.Ammo.Value == 0 and tonumber(InventoryFolder[gun.Name].Value) > 0 and OrbitEnabled and not localPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value and not targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value do
									reloadingAmmo = true
									wait()
									void()
								end
								reloadingAmmo = false
								isBusy = false
							end
						end
					end
					if targetPlayer and targetPlayer.Character and targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value and not gettingAmmo and not reloadingAmmo and not isBusy then
						if OrbitGLOBAL.Settings.AutoStomp then
							if targetPlayer.Character:WaitForChild("BodyEffects")['Dead'].Value then
								if OrbitGLOBAL.Settings.Void then
									isBusy = true
									while targetPlayer and targetPlayer.Character and OrbitEnabled and targetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value and not localPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value and not gettingAmmo and not reloadingAmmo do
										wait()
										void()
									end
									isBusy = false
								end
							else
								local upperTorsoPosition = targetPlayer.Character.UpperTorso.Position
								local targetPosition = upperTorsoPosition + Vector3.new(0, 3, 0)
								rootPart.CFrame = CFrame.new(targetPosition, targetPosition + Vector3.new(0, 0, -1))
								ReplicatedStorage.MainEvent:FireServer("Stomp")
							end
						end
					end
				end
			end
		end
	end)
end;
task.spawn(C_174);
-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Togglers
local function C_175()
	local script = G2L["175"];
	local HAVOC = getgenv().HAVOC
	local OrbitGLOBAL = HAVOC.Orbit

	local TweenService = game:GetService("TweenService")

	local TweenInfoON = TweenInfo.new(0.1)
	local TweenInfoOFF = TweenInfo.new(0.1)

	local OrbitTrigger = script.Parent:WaitForChild("ORBIT"):WaitForChild("Trigger")
	local OrbitToggle = OrbitTrigger.Parent:WaitForChild("Toggle")

	local AutoStompTrigger = script.Parent:WaitForChild("AUTOSTOMP"):WaitForChild("Trigger")
	local AutoStompToggle = AutoStompTrigger.Parent:WaitForChild("Toggle")

	local VoidTrigger = script.Parent:WaitForChild("VOID"):WaitForChild("Trigger")
	local VoidToggle = VoidTrigger.Parent:WaitForChild("Toggle")

	OrbitTrigger.MouseButton1Up:Connect(function()
		if OrbitToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(OrbitToggle, TweenInfoOFF, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Enabled = false
		else
			local tween = TweenService:Create(OrbitToggle, TweenInfoON, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Enabled = true
		end
	end)

	AutoStompTrigger.MouseButton1Up:Connect(function()
		if AutoStompToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(AutoStompToggle, TweenInfoOFF, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Settings.AutoStomp = false
		else
			local tween = TweenService:Create(AutoStompToggle, TweenInfoON, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Settings.AutoStomp = true
		end
	end)

	VoidTrigger.MouseButton1Up:Connect(function()
		if VoidToggle.BackgroundColor3 == Color3.fromRGB(255, 0, 0) then
			local tween = TweenService:Create(VoidToggle, TweenInfoOFF, { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Settings.Void = false
		else
			local tween = TweenService:Create(VoidToggle, TweenInfoON, { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			OrbitGLOBAL.Settings.Void = true
		end
	end)
end;
task.spawn(C_175);
-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.TargetNameHandler
local function C_176()
	local script = G2L["176"];
	local HAVOC = getgenv().HAVOC
	local OrbitGLOBAL = HAVOC.Orbit

	local TARGETNAME = script.Parent:WaitForChild("TARGETNAME")
	local TargetNameTextBox = TARGETNAME:WaitForChild("TARGET")

	local function findClosestMatchingPlayer(inputName)
		inputName = inputName:lower()
		for _, player in pairs(game.Players:GetPlayers()) do
			local username = player.Name:lower()
			local displayName = player.DisplayName:lower()
			if username:find(inputName, 1, true) or displayName:find(inputName, 1, true) then
				return player.DisplayName
			end
		end
		return nil
	end

	TargetNameTextBox.FocusLost:Connect(function(enterPressed)
		if enterPressed then
			if TargetNameTextBox.Text == "" then
				OrbitGLOBAL.Target = ""
				return
			end
			local partialInput = TargetNameTextBox.Text
			local foundPlayer = findClosestMatchingPlayer(partialInput)

			if foundPlayer then
				OrbitGLOBAL.Target = foundPlayer
				TargetNameTextBox.Text = foundPlayer
			else
				OrbitGLOBAL.Target = nil
				TargetNameTextBox.Text = ""
				TargetNameTextBox.PlaceholderText = "NO PLAYER FOUND"
				wait(2)
				TargetNameTextBox.PlaceholderText = "TARGET NAME OR DISPLAY"
			end
		end
	end)

end;
task.spawn(C_176);
-- StarterGui.havoc.MainFrame.ViewFrame.Orbit.Target.Keybind
local function C_181()
	local script = G2L["181"];
	local HAVOC = getgenv().HAVOC
	local OrbitGLOBAL = HAVOC.Orbit

	local UserInputService = game:GetService("UserInputService")
	local KeyBindBTN = script.Parent:WaitForChild("ORBIT"):WaitForChild("KeyBind")
	local awaitingKeyBind = false

	UserInputService.InputBegan:Connect(function(input)
		if awaitingKeyBind then
			OrbitGLOBAL.Settings.KeyBind = input.KeyCode
			KeyBindBTN.Text = tostring(input.KeyCode):gsub("Enum.KeyCode.", "")
			awaitingKeyBind = false
			return
		end
	end)

	KeyBindBTN.MouseButton1Click:Connect(function()
		KeyBindBTN.Text = "Press Any Key"
		awaitingKeyBind = true
	end)
end;
task.spawn(C_181);
-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Togglers
local function C_1e9()
	local script = G2L["1e9"];
	local TweenService = game:GetService("TweenService")

	local HAVOC = getgenv().HAVOC
	local AimLockGLOBAL = HAVOC.AimLock

	local aimlockBTN = script.Parent:WaitForChild("AIMLOCK"):WaitForChild("Trigger")
	local aimlockToggle = aimlockBTN.Parent:WaitForChild("Toggle")
	local antidownBTN = script.Parent:WaitForChild("ANTIGROUNDSHOOT"):WaitForChild("Trigger")
	local antidownToggle = antidownBTN.Parent:WaitForChild("Toggle")
	local friendcheckBTN = script.Parent:WaitForChild("FRIENDCHECK").Trigger
	local friendcheckToggle = friendcheckBTN.Parent:WaitForChild("Toggle")
	local crewcheckBTN = script.Parent:WaitForChild("CREWCHECK").Trigger
	local crewcheckToggle = crewcheckBTN.Parent:WaitForChild("Toggle")
	local wallcheckTrigger = script.Parent:WaitForChild("WALLCHECK").Trigger
	local wallcheckToggle = wallcheckTrigger.Parent:WaitForChild("Toggle")

	aimlockBTN.MouseButton1Up:Connect(function()
		if AimLockGLOBAL.Enabled then
			local tween = TweenService:Create(aimlockToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
			AimLockGLOBAL.Enabled = false
		else
			local tween = TweenService:Create(aimlockToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
			AimLockGLOBAL.Enabled = true
		end
	end)

	crewcheckBTN.MouseButton1Up:Connect(function()
		if AimLockGLOBAL.Settings.CrewCheck then
			AimLockGLOBAL.Settings.CrewCheck = false
			local tween = TweenService:Create(crewcheckToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AimLockGLOBAL.Settings.CrewCheck = true
			local tween = TweenService:Create(crewcheckToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	friendcheckBTN.MouseButton1Up:Connect(function()
		if AimLockGLOBAL.Settings.FriendCheck then
			AimLockGLOBAL.Settings.FriendCheck = false
			local tween = TweenService:Create(friendcheckToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AimLockGLOBAL.Settings.FriendCheck = true
			local tween = TweenService:Create(friendcheckToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	antidownBTN.MouseButton1Up:Connect(function()
		if AimLockGLOBAL.Settings.AntiGroundShoot then
			AimLockGLOBAL.Settings.AntiGroundShoot = false
			local tween = TweenService:Create(antidownToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AimLockGLOBAL.Settings.AntiGroundShoot = true
			local tween = TweenService:Create(antidownToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)

	wallcheckTrigger.MouseButton1Up:Connect(function()
		if AimLockGLOBAL.Settings.WallCheck then
			AimLockGLOBAL.Settings.WallCheck = false
			local tween = TweenService:Create(wallcheckToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(134, 0, 0) })
			tween:Play()
		else
			AimLockGLOBAL.Settings.WallCheck = true
			local tween = TweenService:Create(wallcheckToggle, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(255, 0, 0) })
			tween:Play()
		end
	end)
end;
task.spawn(C_1e9);
-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Aimlock
local function C_1ea()
	local script = G2L["1ea"];
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local UserInputService = game:GetService("UserInputService")
	local camera = workspace.CurrentCamera
	local player = Players.LocalPlayer
	local mouse = player:GetMouse()

	local HAVOC = getgenv().HAVOC
	local AimLockGLOBAL = HAVOC.AimLock

	local ESPSFolder = script.Parent.Parent.Parent.Parent.Parent:WaitForChild("ESPSFolder")

	local aimTarget = nil
	local isHoldingKeybind = false

	local toggleMode = false

	function checkCrew(targetPlayer)
		local OurInformation = player:WaitForChild("DataFolder"):FindFirstChild("Information")
		local TheirInformation = targetPlayer:WaitForChild("DataFolder"):FindFirstChild("Information")
		if not (OurInformation and TheirInformation) then
			return false
		end

		local ourCrew = OurInformation:FindFirstChild("Crew")
		local theirCrew = TheirInformation:FindFirstChild("Crew")

		if not ourCrew then 
			return true
		end

		if not theirCrew then
			return true
		end

		return ourCrew.Value ~= theirCrew.Value
	end

	local friendStatusCache = {}

	local function isFriend(targetPlayerID)
		return player:IsFriendsWith(targetPlayerID)
	end

	local function getClosestPlayer()
		local Camera = workspace.CurrentCamera
		local MousePosition = UserInputService:GetMouseLocation()
		local Closest
		local Distance = math.huge

		for _, otherPlayer in ipairs(Players:GetPlayers()) do
			local Character = otherPlayer.Character
			if otherPlayer ~= player and Character and Character:FindFirstChild("Head") then
				local Head = Character.Head
				local Position, OnScreen = Camera:WorldToViewportPoint(Head.Position)
				if OnScreen then
					local screenPosition = Vector2.new(Position.X, Position.Y)
					local distance = (screenPosition - MousePosition).Magnitude
					if AimLockGLOBAL.Settings.WallCheck then
						local rayParams = RaycastParams.new()
						rayParams.FilterDescendantsInstances = {player.Character}
						rayParams.FilterType = Enum.RaycastFilterType.Blacklist

						local origin = Camera.CFrame.Position
						local direction = (Head.Position - origin).Unit * (Head.Position - origin).Magnitude

						local result = workspace:Raycast(origin, direction, rayParams)
						if not result or result.Instance:IsDescendantOf(Character) then
							if distance < Distance then
								Closest = otherPlayer
								Distance = distance
							end
						end
					else
						if distance < Distance then
							Closest = otherPlayer
							Distance = distance
						end
					end
				end
			end
		end
		return Closest
	end

	function updateESPColors()
		for _, guiElement in ipairs(ESPSFolder:GetChildren()) do
			if guiElement:IsA("BillboardGui") then
				if aimTarget and guiElement.Name == aimTarget.Name then
					guiElement.BOX.ImageColor3 = Color3.fromRGB(255, 0, 0)
					guiElement.PLAYERNAME.TextColor3 = Color3.fromRGB(255, 0, 0)
				else
					guiElement.BOX.ImageColor3 = Color3.fromRGB(255, 255, 255)
					guiElement.PLAYERNAME.TextColor3 = Color3.fromRGB(255, 255, 255)
				end
			end
		end
	end

	function toggleAimlock()
		if AimLockGLOBAL.Enabled then
			aimTarget = nil
		end
		--updateESPColors()
	end

	local lastCheckedTarget = nil
	local isLastTargetFriend = false
	local isLastTargetCrewValid = false

	function aimlockUpdate()
		if AimLockGLOBAL.Enabled and isHoldingKeybind then
			if not aimTarget or not aimTarget.Character or not aimTarget.Character:FindFirstChild("Head") then
				aimTarget = getClosestPlayer()
				lastCheckedTarget = nil
			end

			if aimTarget and aimTarget.Character then
				if aimTarget ~= lastCheckedTarget then
					lastCheckedTarget = aimTarget

					if AimLockGLOBAL.Settings.CrewCheck then
						isLastTargetCrewValid = checkCrew(aimTarget)
					else
						isLastTargetCrewValid = true
					end

					if AimLockGLOBAL.Settings.FriendCheck then
						isLastTargetFriend = isFriend(aimTarget.UserId)
					else
						isLastTargetFriend = false
					end
				end

				if AimLockGLOBAL.Settings.AntiGroundShoot and aimTarget.Character:WaitForChild("BodyEffects")['K.O'].Value then
					aimTarget = getClosestPlayer()
					lastCheckedTarget = nil
				elseif AimLockGLOBAL.Settings.CrewCheck and not isLastTargetCrewValid then
					aimTarget = getClosestPlayer()
					lastCheckedTarget = nil
				elseif AimLockGLOBAL.Settings.FriendCheck and isLastTargetFriend then
					aimTarget = getClosestPlayer()
					lastCheckedTarget = nil
				else
					if aimTarget and aimTarget.Character then
						camera.CFrame = CFrame.new(camera.CFrame.Position, aimTarget.Character:FindFirstChild(AimLockGLOBAL.Settings.AimPart).Position)
					end
				end
			end
		end
		--updateESPColors()
	end

	UserInputService.InputBegan:Connect(function(input)
		if AimLockGLOBAL.Enabled and input.KeyCode == AimLockGLOBAL.Settings.KeyBind and toggleMode == false then
			isHoldingKeybind = true
		end
		if AimLockGLOBAL.Enabled and input.KeyCode == AimLockGLOBAL.Settings.KeyBind and toggleMode == true then
			aimTarget = nil
			if isHoldingKeybind then
				isHoldingKeybind = false
			else
				isHoldingKeybind = true
			end
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.KeyCode == AimLockGLOBAL.Settings.KeyBind and not toggleMode then
			isHoldingKeybind = false
			aimTarget = nil
			--updateESPColors()
		end
	end)

	RunService.Heartbeat:Connect(function()
		local BodyEffects = player.Character:FindFirstChild("BodyEffects")
		if AimLockGLOBAL.Enabled and player.Character.Humanoid.Health > 0 and BodyEffects and not BodyEffects["K.O"].Value then
			aimlockUpdate()
		end
		if AimLockGLOBAL.Settings.Mode == "HOLD" then
			toggleMode = false
		else
			toggleMode = true
		end
	end)
end;
task.spawn(C_1ea);
-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Keybind
local function C_1eb()
	local script = G2L["1eb"];
	local HAVOC = getgenv().HAVOC
	local AimLockGLOBAL = HAVOC.AimLock

	local UserInputService = game:GetService("UserInputService")
	local KeyBindBTN = script.Parent:WaitForChild("AIMLOCK"):WaitForChild("KeyBind")
	local awaitingKeyBind = false

	UserInputService.InputBegan:Connect(function(input)
		if awaitingKeyBind then
			AimLockGLOBAL.Settings.KeyBind = input.KeyCode
			KeyBindBTN.Text = tostring(input.KeyCode):gsub("Enum.KeyCode.", "")
			awaitingKeyBind = false
			return
		end
	end)

	KeyBindBTN.MouseButton1Click:Connect(function()
		KeyBindBTN.Text = "Press Any Key"
		awaitingKeyBind = true
	end)

end;
task.spawn(C_1eb);
-- StarterGui.havoc.MainFrame.ViewFrame.AimLock.AimLock.Dropdown
local function C_1ec()
	local script = G2L["1ec"];
	local TweenService = game:GetService("TweenService")

	local HAVOC = getgenv().HAVOC
	local AimLockGLOBAL = HAVOC.AimLock

	local cameralockBTN = script.Parent:WaitForChild("CAMERALOCK"):WaitForChild("Trigger")
	local cameralockDropDownFrame = cameralockBTN.Parent:WaitForChild("DropDownFrame")
	local cameralockLockOnText = cameralockBTN.Parent:WaitForChild("LOCKON")
	local aimlockmodeBTN = script.Parent:WaitForChild("AIMLOCKTOGGLE"):WaitForChild("Trigger")
	local aimlockmodeDropDownFrame = aimlockmodeBTN.Parent:WaitForChild("DropDownFrame")
	local aimlockmodeLockOnText = aimlockmodeBTN.Parent:WaitForChild("MODE")

	local cameralockDropDownScrolling = cameralockDropDownFrame:WaitForChild("DropDownScrolling")
	local cameralockArrow = cameralockBTN.Parent:WaitForChild("Arrow")
	local aimlockmodeArrow = aimlockmodeBTN.Parent:WaitForChild("Arrow")
	local aimlockmodeDropDownScrolling = aimlockmodeDropDownFrame:WaitForChild("DropDownScrolling")

	function tweenArrow(targetRotation)
		local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local tween = TweenService:Create(cameralockArrow, tweenInfo, {Rotation = targetRotation})
		tween:Play()
	end

	function tweenArrow2(targetRotation)
		local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local tween = TweenService:Create(aimlockmodeArrow, tweenInfo, {Rotation = targetRotation})
		tween:Play()
	end

	for _, button in ipairs(cameralockDropDownScrolling:GetChildren()) do
		if button:IsA("TextButton") then
			button.MouseButton1Up:Connect(function()
				cameralockLockOnText.Text = button.Text
				AimLockGLOBAL.Settings.AimPart = button.Text
				cameralockDropDownFrame.Visible = false
				tweenArrow(0)
			end)
		end
	end

	for _, button in ipairs(aimlockmodeDropDownScrolling:GetChildren()) do
		if button:IsA("TextButton") then
			button.MouseButton1Up:Connect(function()
				aimlockmodeLockOnText.Text = button.Text
				AimLockGLOBAL.Settings.Mode = button.Text
				aimlockmodeDropDownFrame.Visible = false
				tweenArrow2(0)
			end)
		end
	end

	cameralockBTN.MouseButton1Up:Connect(function()
		cameralockDropDownFrame.Visible = not cameralockDropDownFrame.Visible
		local targetRotation = cameralockDropDownFrame.Visible and -90 or 0
		tweenArrow(targetRotation)
	end)

	aimlockmodeBTN.MouseButton1Up:Connect(function()
		aimlockmodeDropDownFrame.Visible = not aimlockmodeDropDownFrame.Visible
		local targetRotation = aimlockmodeDropDownFrame.Visible and -90 or 0
		tweenArrow2(targetRotation)
	end)
end;
task.spawn(C_1ec);
-- StarterGui.havoc.MainFrame.SideFrame.LocalScript
local function C_209()
	local script = G2L["209"];
	local ViewFrame = script.Parent.Parent:WaitForChild("ViewFrame")

	function disableFrames()
		for i,v in ipairs(ViewFrame:GetChildren()) do
			if v:IsA("ScrollingFrame") then
				v.Visible = false
			end
		end
	end

	for _, button in ipairs(script.Parent:GetChildren()) do
		if button:IsA("TextButton") then
			button.MouseButton1Up:Connect(function()
				disableFrames()
				ViewFrame:FindFirstChild(button.Name).Visible = true
			end)
		end
	end
end;
task.spawn(C_209);
-- StarterGui.havoc.LoadGlobalTable
local function C_21b()
	local script = G2L["21b"];
	local TweenService = game:GetService("TweenService")
	local TweenInfoON = TweenInfo.new(0.1)
	local TweenInfoOFF = TweenInfo.new(0.1)

	local HAVOC = getgenv().HAVOC

	local function findSettingByName(name, table)
		for key, v in pairs(table) do
			if typeof(v) == "table" then
				local result = findSettingByName(name, v)
				if result ~= nil then
					return result
				end
			elseif key:upper() == name then
				return v
			end
		end
		return nil
	end

	local function findKeyBindValue(buttonName, table)
		for key, setting in pairs(table) do
			if setting.Settings and setting.Settings.KeyBind then
				if key:upper() == buttonName:upper() then
					return setting.Settings.KeyBind
				end
			end
		end
		return nil
	end

	for _, button in ipairs(script.Parent:GetDescendants()) do
		if button:IsA("Frame") and button.Name ~= "Target" then
			local settingValue = findSettingByName(button.Name:upper(), HAVOC)
			if button:FindFirstChild("KeyBind") then
				local keyBindValue = findKeyBindValue(button.Name, HAVOC)
				if keyBindValue and typeof(keyBindValue) == "EnumItem" then
					button.KeyBind.Text = keyBindValue.Name
				end
			end

			if settingValue ~= nil then
				local targetColor = (typeof(settingValue) == "boolean" and settingValue) and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(134, 0, 0)
				local tween = TweenService:Create(button.Toggle, TweenInfoON, { BackgroundColor3 = targetColor })
				tween:Play()
			end
		end
	end

end;
task.spawn(C_21b);

return G2L["1"], require;
